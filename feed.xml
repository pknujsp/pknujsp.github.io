<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://pknujsp.github.io//jekyll-theme-yat/feed.xml" rel="self" type="application/atom+xml" /><link href="https://pknujsp.github.io//jekyll-theme-yat/" rel="alternate" type="text/html" hreflang="ko" /><updated>2024-12-10T16:44:58+09:00</updated><id>https://pknujsp.github.io//jekyll-theme-yat/feed.xml</id><title type="html">Jsp Notes</title><subtitle>tech, study etc...</subtitle><author><name>Junsung Park</name></author><entry><title type="html">SKY 멘토님으로부터 총 5,760분의 멘토링을 받고 나서</title><link href="https://pknujsp.github.io//jekyll-theme-yat/swm/2024/12/09/SKY-%EB%A9%98%ED%86%A0%EB%8B%98%EC%9C%BC%EB%A1%9C%EB%B6%80%ED%84%B0-%EC%B4%9D-5,760%EB%B6%84%EC%9D%98-%EB%A9%98%ED%86%A0%EB%A7%81%EC%9D%84-%EB%B0%9B%EA%B3%A0-%EB%82%98%EC%84%9C.html" rel="alternate" type="text/html" title="SKY 멘토님으로부터 총 5,760분의 멘토링을 받고 나서" /><published>2024-12-09T00:00:00+09:00</published><updated>2024-12-09T00:00:00+09:00</updated><id>https://pknujsp.github.io//jekyll-theme-yat/swm/2024/12/09/SKY%20%EB%A9%98%ED%86%A0%EB%8B%98%EC%9C%BC%EB%A1%9C%EB%B6%80%ED%84%B0%20%EC%B4%9D%205,760%EB%B6%84%EC%9D%98%20%EB%A9%98%ED%86%A0%EB%A7%81%EC%9D%84%20%EB%B0%9B%EA%B3%A0%20%EB%82%98%EC%84%9C</id><content type="html" xml:base="https://pknujsp.github.io//jekyll-theme-yat/swm/2024/12/09/SKY-%EB%A9%98%ED%86%A0%EB%8B%98%EC%9C%BC%EB%A1%9C%EB%B6%80%ED%84%B0-%EC%B4%9D-5,760%EB%B6%84%EC%9D%98-%EB%A9%98%ED%86%A0%EB%A7%81%EC%9D%84-%EB%B0%9B%EA%B3%A0-%EB%82%98%EC%84%9C.html"><![CDATA[<h3 id="sw-마에스트로-연수생-생활-마무리">SW 마에스트로 연수생 생활 마무리</h3>

<p>길고도 짧았던 6개월간의 SW 마에스트로 15기 연수생 생활을 마치고, 이제 새로운 시작을 앞두고 있다. 따뜻한 4월, 설렘과 기대로 시작했던 연수 생활은 수많은 도전과 배움으로 채워졌고, 그 안에서 나는 성장했다. 특히, SKY 멘토님은 등대와 같은 존재였다. 길을 잃을 때마다 함께 고민하며 방향을 제시해주셨고, 계속 나아갈 수 있도록 격려와 지지를 아끼지 않으셨다. 이 글을 통해 SKY 멘토님께 깊은 감사의 마음을 전하며, 연수생으로서의 소중한 경험과 멘토링 후기를 남기고자 한다.</p>

<h3 id="연수생-혜택">연수생 혜택</h3>

<p><img src="https://github.com/user-attachments/assets/b63505b6-994e-423b-9072-5ed54d5e8f76" alt="image" /></p>

<p>연수생으로서의 혜택은 정말 많다. 다른 기관의 프로그램과는 결이 다르다.
개인 당 IT기기 구매 지원비, 팀별 프로젝트 지원비와 같이 금전적인 혜택도 있지만, 무엇보다도 멘토링을 받을 수 있는 것이 가장 큰 혜택이다.
각자의 분야에서 경험을 쌓아온 멘토님들로부터 직접적인 조언을 받을 수 있기 때문이다. 그들의 경험을 듣고 배울 수 있는 것이 가치가 엄청나다.
개발자, CEO, 디자이너, 마케터 등 다양한 분야에서 경험을 쌓아온 멘토님들로부터 다양한 조언을 받을 수 있다.</p>

<p>앞서 얘기했듯 이 글에서는 멘토링에 대한 후기를 남기고자 한다.</p>

<h3 id="멘토링">멘토링</h3>

<p>우리 팀은 <a href="https://ktalker.kr">Ktalker</a>라는 이름으로 <strong>온라인 한국어 학습 서비스</strong>를 기획 운영하였다. 10개가 넘는 서비스 아이디어 중에서 KPOP, KDRAMA등 대중 문화가 글로벌로 인기를 끌고 있는 요즈음, Ai와 결합하면 시장성이 높을 것이라고 판단해서 이 아이디어를 선택했던 것이다.</p>

<p>왜 SKY 멘토님으로부터 올 한해 동안 멘토링을 받고 싶었는지는 이유가 있다.</p>

<p>수 년전 부터 컴공선배의 유튜브를 즐겨보았는데, 그 중에서도 SKY 멘토님이 출연하신 영상을 많이 보았다. 그 영상을 보면서 개발자로서의 자세, 마인드, 역량에 대한 내용 등을 배울 수 있었다.</p>

<p><img src="https://github.com/user-attachments/assets/325e50fa-e7f0-4b7c-80cd-60addba2c48e" alt="image" />
<a href="http://www.youtube.com/@comgongbro">컴공선배</a></p>

<p>SW마에스트로를 처음 인지한 것은 컴공선배가 아니었다. 4월 초에는 연수과정이 어떻게 돌아가는지 정확하게 알지 못했고, 멘토님 목록을 보던 중 SKY 멘토님이 있다는 것을 알고나서 전담 멘토링을 받고 싶다고 생각했었다. 원래는 멘토로 활동하고 계신지 몰랐다.</p>

<h3 id="멘토링-후기">멘토링 후기</h3>

<p>SKY 멘토님과의 만남은 나에게 특별한 행운이었다. 멘토님은 늘 따뜻한 미소와 진심 어린 조언으로 나를 격려해주셨고, 날카로운 질문과 통찰력 있는 분석으로 내가 생각하지도 못했던 부분까지 짚어주셨다. 멘토링은 단순한 지식 전달을 넘어서, 스스로 생각하고 문제를 해결할 수 있는 역량을 키워주는 값진 경험이었다.</p>

<p>멘토링은 정규 멘토링과 자유 멘토링이 있는데, 정규 멘토링은 격주로 오프라인, 온라인을 병행하며 1회에 3시간씩 진행되었다.</p>

<p>보통은 정규 멘토링만 이뤄지고 자유 멘토링은 빈도가 적은 편인데 SKY 멘토님은 다른 팀과 함께 격주로 토요일 마다 2주간 서로 프로젝트 진행한 내용을 프레젠테이션하며 공유하는 시간을 마련해주셨다. 오픈 스프린트 리뷰라고 부르는 이 시간은 다른 팀의 프로젝트를 보며 배울 수 있는 기회가 되었다. 서로 의견도 나누고 피드백도 주고 받는 시간이어서 정말 유익했다. 이렇게 다 같이 모여서 프로젝트를 공유하는 시간은 SKY 멘토님만이 유일한 것으로 알고 있다.</p>

<p><img src="https://github.com/user-attachments/assets/d3590129-f900-466c-b20e-394af5f76fcf" alt="image" />
<em>오픈 스프린트 리뷰 발표 자료 커버</em></p>

<p>정규 멘토링 20회 가량, 오픈 스프린트 리뷰 10회 이상으로 대략 총 5,760분, 96시간을 멘토링 받았다. 거의 매주 멘토님을 만나서 이야기를 나누었던 것 같다. 이렇게 빈번하게 멘토님을 뵐수 있었던 건 행운이라고 생각한다. 다른 팀들 얘기들어보면 멘토님을 한 달에 한번도 만나지 못하는 경우도 있었다. 바쁘신 상황에서도 많은 시간을 투자해주셔서 감사하다.</p>

<p>멘토링은 크게 서비스 관련 부분과 개인적인 부분으로 나누어 진행되었다.</p>

<p>서비스 관련 멘토링은 단순히 기술적인 측면뿐만 아니라, 서비스의 본질적인 가치를 고민하고 실현하는 데 초점을 맞추었다.</p>

<ul>
  <li>비즈니스 모델링: 멘토님은 시장 분석, 경쟁사 분석, 고객 분석 등 다양한 방법을 소개해주셨고, 이를 토대로 어떻게 운영과 개발을 해야하는지 알 수 있었다.</li>
  <li>서비스 기획: 사용자 중심의 서비스 기획 방법론을 배우고, 실제 서비스에 적용하며 실무 역량을 강화했다.</li>
  <li>수익화 관련: 다양한 수익 모델을 분석하고, 서비스의 특성에 맞는 최적의 수익화 전략을 수립했다.</li>
  <li>마케팅 전략: 효과적인 마케팅 채널 선정 및 운영, 고객 확보 및 유지 전략 등을 학습하고 실행했다.</li>
  <li>사용자 경험 및 피드백을 위한 방법: 사용자 인터뷰, 설문조사 등 다양한 방법을 통해 사용자 경험을 개선하고, 피드백을 수용하는 방법을 익혔다.</li>
</ul>

<p>서비스를 만듦에 있어서 개발은 정말 큰 비중이 아니라 비전, 기획 의도, 사용자 유치 전략이 대부분 인 것같다. 2024년 4월까지만 해도 개발만 주로 해왔던 지라 이런 부분이 부족했었는데, 멘토님의 도움으로 이런 부분을 채울 수 있었다. 앞으로는 혼자서 서비스를 만들더라도 이전과는 다른 방식으로 제대로 된 서비스를 만들 수 있을 것 같다.</p>

<p><img src="https://github.com/user-attachments/assets/9f3cdfc3-8d93-4fa3-84c6-f9a18a3db96d" alt="image" /></p>

<p>7월에 프로젝트를 어떻게 이어나가야 할지 애를 먹고 있을 때, 뭘 해야하는지 목록을 다 작성하고 우선순위를 정하는 걸 도와주셨다.</p>

<p><img src="https://github.com/user-attachments/assets/a043b311-bcd3-47fb-8f43-6a366efe8154" alt="image" /></p>

<p>고객 유치가 어려운 상황에서 KPT회고를 통해서 문제를 파악하고 해결 방안을 찾는 걸 도와주셨다.</p>

<p>또한 판서를 하시면서 쉽게 이해할 수 있도록 도와주셨고, 이해가 안되는 부분은 멘토링 시간이 끝나도 애매하게 마무리 되는 것없이 쉽게쉽게 이해할 수 있도록 도와주셨다.</p>

<p><img src="https://github.com/user-attachments/assets/e438a914-0f77-463a-b4e6-2e3ba15db5ec" alt="20240615_140156" />
<em>6월 멘토링 중</em></p>

<p><img src="https://github.com/user-attachments/assets/c0dc66cc-1ea8-4dea-bae0-ea061d5a121c" alt="20240727_135300" />
<em>7월 멘토링 중</em></p>

<p><img src="https://github.com/user-attachments/assets/8fbddc47-0690-4460-9a86-fed7779a3758" alt="20240907_135032" />
<em>9월 멘토링 중</em></p>

<p><img src="https://github.com/user-attachments/assets/421c54f8-efca-4604-8281-ccb3571d13e0" alt="20241109_171013" />
<em>11월 멘토링 중</em></p>

<h4 id="멘토님의-헌신적인-마음을-느꼈던-순간">멘토님의 헌신적인 마음을 느꼈던 순간</h4>

<p>4월부터 9월까지, 나는 팀장으로서 비전을 제시하고 기획을 주도하는 역할을 맡았다. 하지만 늦었지만 9월에 들어서면서, 스스로 내 역할을 제대로 수행하지 못하고 있다는 것을 인지했고, 이는 곧 팀 전체의 혼란과 프로젝트 진행의 어려움으로 이어졌다. 서비스와 팀 모두 방향성을 잃고 표류하면서 답답해하고 있을 때, 멘토님께서는 기존보다 더 심층적인 멘토링을 진행해주셨다. 멘토님의 날카로운 분석과 조언은 팀원들과 함께 고민하고 해결책을 찾아나가는 데 큰 도움이 되었다.</p>

<p>이후 10월 초까지 2주 동안, 나는 매일 팀의 활동 내용을 멘토님께 보고하며 밀착 멘토링을 받았다. 멘토님은 단순히 방향을 제시하는 것을 넘어, 함께 고민하고 해결책을 찾아나가는 든든한 지원군과 같았었다. 한 번은 황금같은 주말 밤에, 개인적인 질문이 있어 조심스럽게 메시지를 드렸는데, 멘토님께서는 자정이 넘도록 4시간 가까이 정성껏 답변해주셨다. 그때 나는 멘토님의 헌신적인 마음에 깊은 감동을 받았고, 뭘 해야할지 다시 정리해가면서 앞으로 나아갈 수 있었다. 이 외에도 멘토님은 지치고 힘든 순간마다 끊임없이 격려와 지지를 보내주시면서, 내가 한 사람으로서 성장하는 데 큰 도움을 주셨다.</p>

<table>
  <thead>
    <tr>
      <th>8:11 PM</th>
      <th>00:24 AM</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>![image](https://github.com/user-attachments/assets/db0f9fd4-d3b3-46db-8a05-e13d9809f14e)</td>
      <td>![image](https://github.com/user-attachments/assets/ee4d0de1-29d1-46d3-a378-b55e87e3ec73)</td>
    </tr>
  </tbody>
</table>

<p>실무적인 내용 뿐만 아니라, 개인적으로 인간으로서 성장하는 데 도움이 되는 내용도 많이 배웠다.</p>

<p>어떤 일을 할때나 문제를 해결할 때 어떤 방식으로 접근해야 하는지, 불필요한 것을 버리고 중요한 것을 구분하는 방법 등 다양한 내용이다.</p>

<ul>
  <li>비판적인 사고: 멘토님은 항상 “왜?”라는 질문을 던지며 문제의 본질을 파악하고, 다양한 관점에서 분석하는 능력을 기를 수 있었다.</li>
  <li>문제해결을 위한 사고: 복잡한 문제를 단순화하고, 논리적인 사고 과정을 통해 해결을 하는 방법에 대해서 조언을 얻었다.</li>
  <li>우선순위 설정: 제한된 시간과 자원을 어떻게 효율적으로 나누고 관리해서 목표를 달성해야 하는지 배웠다.</li>
</ul>

<p>나에게 가장 컸던 건 비판적인 사고방식이다. 이전에는 문제가 생겼을 때, 그 문제를 해결하기 위해 어떤 방법을 쓸지 고민했지만, 멘토님의 가르침 덕분에 문제의 원인을 파악하고, 그 원인을 해결하기 위한 방법을 찾게 되었다. 한 줄로 설명하면 HOW가 아니라 WHY로 시작하는 사고로 접근하는 방식인데, 이런 사고방식은 평소 일상에서도 도움이 되고 있다.</p>

<p>멘토님의 가르침 덕분에 저는 서비스 개발뿐만 아니라, 한 명의 주체적인 사람으로서 성장할 수 있었다. 멘토님께 다시 한번 진심으로 감사드린다.</p>

<h3 id="epilogue">Epilogue</h3>

<p>4월, 처음 시작했을 때만 해도 모든 것이 낯설고 막막했다. 멘토님의 말씀 하나하나가 소중했지만, 솔직히 모든 내용을 당시에 다 이해하지는 못했다. 하지만 8개월간의 SW 마에스트로 여정을 거치며 직접 프로젝트를 진행하고, 수많은 시행착오를 겪으면서 얻은 많은 조언들이 지금 돌아봤을 때는 2023년의 나와는 다른 사람이 되도록 만들어 준것 같다. 내가 얼마나 부족한지, 그리고 어떤 방식으로 행동해야 하는지를 깨닫게 되었고, 끊임없이 배우고 노력하며 부족한 부분을 채워나가는 과정에서 진정한 성장의 기쁨을 경험했다.</p>

<p>이제 연수생으로서의 생활은 마무리되었지만, 이곳에서의 경험과 멘토님의 가르침은 내 마음속에 깊이 새겨져 앞으로 나아가는 길에 든든한 나침반이 되어줄 것 같다. 불가능하지만 16기를 또 하고 싶다는 생각도 든다. 왜냐하면 16기를 한다면 15기로 처음 시작했을때보다 훨씬 더 잘할 수 있을거 같다는 생각때문이다.</p>

<p>8개월간의 값진 경험을 바탕으로 끊임없이 배우고 도전하면서 누군가에게 대체 불가능한 가치를 제공하는 사람이 되기 위해 최선을 다할 것이다. 함께했던 동기들과 멘토님들께 다시 한번 진심으로 감사드린다. 앞으로 우리 모두 각자의 자리에서 가치있는 모습을 보이기를 응원한다.</p>]]></content><author><name>Junsung Park</name></author><category term="SWM" /><category term="SWM" /><summary type="html"><![CDATA[SW 마에스트로 연수생 생활 마무리]]></summary></entry><entry><title type="html">스크롤 가능한 커스텀 TopAppBar만들기</title><link href="https://pknujsp.github.io//jekyll-theme-yat/android/2024/03/07/%EC%8A%A4%ED%81%AC%EB%A1%A4-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BB%A4%EC%8A%A4%ED%85%80-TopAppBar%EB%A7%8C%EB%93%A4%EA%B8%B0.html" rel="alternate" type="text/html" title="스크롤 가능한 커스텀 TopAppBar만들기" /><published>2024-03-07T00:00:00+09:00</published><updated>2024-03-07T00:00:00+09:00</updated><id>https://pknujsp.github.io//jekyll-theme-yat/android/2024/03/07/%EC%8A%A4%ED%81%AC%EB%A1%A4%20%EA%B0%80%EB%8A%A5%ED%95%9C%20%EC%BB%A4%EC%8A%A4%ED%85%80%20TopAppBar%EB%A7%8C%EB%93%A4%EA%B8%B0</id><content type="html" xml:base="https://pknujsp.github.io//jekyll-theme-yat/android/2024/03/07/%EC%8A%A4%ED%81%AC%EB%A1%A4-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BB%A4%EC%8A%A4%ED%85%80-TopAppBar%EB%A7%8C%EB%93%A4%EA%B8%B0.html"><![CDATA[<h2 id="내용이-심하게-부실해서-수정하고-있습니다">내용이 심하게 부실해서 수정하고 있습니다.</h2>

<h2 id="다음과-같이-스크롤-할-수-있는-topappbar를-만들어-보고자-합니다">다음과 같이 스크롤 할 수 있는 TopAppBar를 만들어 보고자 합니다.</h2>

<p><img src="https://github.com/pknujsp/pknujsp/assets/48265129/19c9e7b8-1c58-4886-9291-dad3e2104703" alt="" /></p>

<h2 id="만들게된-계기">만들게된 계기</h2>

<ul>
  <li>자체적으로 LargeTopAppBar를 제공하지만 가장 큰 Title 컴포저블의 높이가 최대 <code class="language-plaintext highlighter-rouge">152dp</code>로 제한되어 있다.</li>
  <li>아래 코드는 Compose material3의 TopAppBar를 구현한 클래스의 코드 중 일부이다. 보다시피 최대 높이인 <code class="language-plaintext highlighter-rouge">ContainerHeight</code>가 <code class="language-plaintext highlighter-rouge">152.0.dp</code>로 고정되어 있다. 이로 인해서 더 큰 높이의 Title 컴포저블을 사용하면 아래 일부가 잘리게 되는 문제가 생긴다.</li>
  <li>또한 기본적으로 이 컴포저블은 material3의 스타일을 따른 것이므로 커스텀이 제한된다.</li>
  <li>아래처럼 좀 더 높이가 큰 TopAppBar가 필요하고, 제한을 벗어나 커스텀이 가능한게 필요하여 구현하게 되었다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center">기본제공</th>
      <th style="text-align: center">구현하고자 하는 것</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">![](https://developer.android.com/static/images/jetpack/compose/components/appbar-large.svg)</td>
      <td style="text-align: center">![](https://github.com/pknujsp/pknujsp/assets/48265129/fa263fe9-cfa4-4ba5-b463-70c74b4008bf)</td>
    </tr>
  </tbody>
</table>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// package androidx.compose.material3.tokens.TopAppBarLargeTokens.kt</span>
<span class="k">internal</span> <span class="kd">object</span> <span class="nc">TopAppBarLargeTokens</span> <span class="p">{</span>
    <span class="o">..</span><span class="p">.</span>
    <span class="kd">val</span> <span class="py">ContainerHeight</span> <span class="p">=</span> <span class="mf">152.0</span><span class="p">.</span><span class="n">dp</span>
    <span class="o">..</span><span class="p">.</span>
<span class="p">}</span>

<span class="c1">// package androidx.compose.material3.AppBar.kt</span>
<span class="nd">@OptIn</span><span class="p">(</span><span class="nc">ExperimentalMaterial3Api</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
<span class="nd">@Composable</span>
<span class="k">private</span> <span class="k">fun</span> <span class="nf">TwoRowsTopAppBar</span><span class="p">(</span>
    <span class="o">..</span><span class="p">.</span>
    <span class="n">maxHeight</span><span class="p">:</span> <span class="nc">Dp</span><span class="p">,</span>
    <span class="n">pinnedHeight</span><span class="p">:</span> <span class="nc">Dp</span><span class="p">,</span>
    <span class="o">..</span><span class="p">.</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">pinnedHeightPx</span><span class="p">:</span> <span class="nc">Float</span> <span class="c1">// 작은 Title 컴포저블의 높이</span>
    <span class="kd">val</span> <span class="py">maxHeightPx</span><span class="p">:</span> <span class="nc">Float</span> <span class="c1">// 허용하는 최대 Title 컴포저블의 높이</span>
    <span class="kd">val</span> <span class="py">titleBottomPaddingPx</span><span class="p">:</span> <span class="nc">Int</span>
    <span class="nc">LocalDensity</span><span class="p">.</span><span class="n">current</span><span class="p">.</span><span class="nf">run</span> <span class="p">{</span>
        <span class="n">pinnedHeightPx</span> <span class="p">=</span> <span class="n">pinnedHeight</span><span class="p">.</span><span class="nf">toPx</span><span class="p">()</span>
        <span class="n">maxHeightPx</span> <span class="p">=</span> <span class="n">maxHeight</span><span class="p">.</span><span class="nf">toPx</span><span class="p">()</span>
        <span class="n">titleBottomPaddingPx</span> <span class="p">=</span> <span class="n">titleBottomPadding</span><span class="p">.</span><span class="nf">roundToPx</span><span class="p">()</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="구현">구현</h2>

<h3 id="먼저-기본-topappbar의-구현-코드를-살펴보자">먼저 기본 TopAppBar의 구현 코드를 살펴보자.</h3>

<h4 id="largetopappbar-컴포저블의-구현은-다음과-같다"><code class="language-plaintext highlighter-rouge">LargeTopAppBar</code> 컴포저블의 구현은 다음과 같다.</h4>

<ul>
  <li>Scaffold에서 <code class="language-plaintext highlighter-rouge">topBar</code>를 사용하여 TopAppBar를 배치할 때 이 함수를 사용한다.</li>
  <li>실제 구현하는 컴포저블 함수를 따로 <code class="language-plaintext highlighter-rouge">TwoRowsTopAppBar</code>로 구현하고 있다.</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ExperimentalMaterial3Api</span>
<span class="nd">@Composable</span>
<span class="k">fun</span> <span class="nf">LargeTopAppBar</span><span class="p">(</span>
    <span class="n">title</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">,</span>
    <span class="n">modifier</span><span class="p">:</span> <span class="nc">Modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">,</span>
    <span class="n">navigationIcon</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span> <span class="p">=</span> <span class="p">{},</span>
    <span class="n">actions</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="nc">RowScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span> <span class="p">=</span> <span class="p">{},</span>
    <span class="n">windowInsets</span><span class="p">:</span> <span class="nc">WindowInsets</span> <span class="p">=</span> <span class="nc">TopAppBarDefaults</span><span class="p">.</span><span class="n">windowInsets</span><span class="p">,</span>
    <span class="n">colors</span><span class="p">:</span> <span class="nc">TopAppBarColors</span> <span class="p">=</span> <span class="nc">TopAppBarDefaults</span><span class="p">.</span><span class="nf">largeTopAppBarColors</span><span class="p">(),</span>
    <span class="n">scrollBehavior</span><span class="p">:</span> <span class="nc">TopAppBarScrollBehavior</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="nc">TwoRowsTopAppBar</span><span class="p">(</span>
        <span class="n">title</span> <span class="p">=</span> <span class="n">title</span><span class="p">,</span>
        <span class="n">titleTextStyle</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="nf">fromToken</span><span class="p">(</span><span class="nc">TopAppBarLargeTokens</span><span class="p">.</span><span class="nc">HeadlineFont</span><span class="p">),</span>
        <span class="n">smallTitleTextStyle</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="nf">fromToken</span><span class="p">(</span><span class="nc">TopAppBarSmallTokens</span><span class="p">.</span><span class="nc">HeadlineFont</span><span class="p">),</span>
        <span class="n">titleBottomPadding</span> <span class="p">=</span> <span class="nc">LargeTitleBottomPadding</span><span class="p">,</span>
        <span class="n">smallTitle</span> <span class="p">=</span> <span class="n">title</span><span class="p">,</span>
        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
        <span class="n">navigationIcon</span> <span class="p">=</span> <span class="n">navigationIcon</span><span class="p">,</span>
        <span class="n">actions</span> <span class="p">=</span> <span class="n">actions</span><span class="p">,</span>
        <span class="n">colors</span> <span class="p">=</span> <span class="n">colors</span><span class="p">,</span>
        <span class="n">windowInsets</span> <span class="p">=</span> <span class="n">windowInsets</span><span class="p">,</span>
        <span class="n">maxHeight</span> <span class="p">=</span> <span class="nc">TopAppBarLargeTokens</span><span class="p">.</span><span class="nc">ContainerHeight</span><span class="p">,</span>
        <span class="n">pinnedHeight</span> <span class="p">=</span> <span class="nc">TopAppBarSmallTokens</span><span class="p">.</span><span class="nc">ContainerHeight</span><span class="p">,</span>
        <span class="n">scrollBehavior</span> <span class="p">=</span> <span class="n">scrollBehavior</span>
    <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="tworowstopappbar은-다음과-같이-구현되어-있다"><code class="language-plaintext highlighter-rouge">TwoRowsTopAppBar</code>은 다음과 같이 구현되어 있다.</h4>

<ul>
  <li>먼저 높이를 체크하고</li>
  <li>dp인 값을 px로 변환한다.</li>
  <li>하단 타이틀의 접히고 펼치는 동작이 자연스럽게 이루어지도록 드래그 시 y축의 드래그 양의 상한을 조정한다.</li>
  <li>앱 바가 접힌 상태를 <code class="language-plaintext highlighter-rouge">0.0 - 1.0</code> 사이의 값으로 결정한다.</li>
  <li>컴포저블의 경우 Surface에 Column을 배치하고 순서대로 상단 타이틀과 하단 타이틀을 배치한다.</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Composable</span>
<span class="k">private</span> <span class="k">fun</span> <span class="nf">TwoRowsTopAppBar</span><span class="p">(</span>
    <span class="n">modifier</span><span class="p">:</span> <span class="nc">Modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">,</span>
    <span class="n">title</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">,</span>
    <span class="n">titleTextStyle</span><span class="p">:</span> <span class="nc">TextStyle</span><span class="p">,</span>
    <span class="n">titleBottomPadding</span><span class="p">:</span> <span class="nc">Dp</span><span class="p">,</span>
    <span class="n">smallTitle</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">,</span>
    <span class="n">smallTitleTextStyle</span><span class="p">:</span> <span class="nc">TextStyle</span><span class="p">,</span>
    <span class="n">navigationIcon</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">,</span>
    <span class="n">actions</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="nc">RowScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">,</span>
    <span class="n">windowInsets</span><span class="p">:</span> <span class="nc">WindowInsets</span><span class="p">,</span>
    <span class="n">colors</span><span class="p">:</span> <span class="nc">TopAppBarColors</span><span class="p">,</span>
    <span class="n">maxHeight</span><span class="p">:</span> <span class="nc">Dp</span><span class="p">,</span>
    <span class="n">pinnedHeight</span><span class="p">:</span> <span class="nc">Dp</span><span class="p">,</span>
    <span class="n">scrollBehavior</span><span class="p">:</span> <span class="nc">TopAppBarScrollBehavior</span><span class="p">?</span>
<span class="p">)</span> <span class="p">{</span> 
    <span class="c1">// maxHeight가 pinnedHeight 이하일 경우 예외를 던진다.</span>
    <span class="c1">// 이 부분은 private 내부 함수이므로, 개발자가 직접 API에서 접근이 불가능하다.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">maxHeight</span> <span class="p">&lt;=</span> <span class="n">pinnedHeight</span><span class="p">)</span> <span class="p">{</span> <span class="o">..</span><span class="p">.</span> <span class="p">}</span>

    <span class="c1">// 높이를 픽셀로 변환</span>
    <span class="kd">val</span> <span class="py">pinnedHeightPx</span><span class="p">:</span> <span class="nc">Float</span>
    <span class="kd">val</span> <span class="py">maxHeightPx</span><span class="p">:</span> <span class="nc">Float</span>
    <span class="kd">val</span> <span class="py">titleBottomPaddingPx</span><span class="p">:</span> <span class="nc">Int</span>
    <span class="nc">LocalDensity</span><span class="p">.</span><span class="n">current</span><span class="p">.</span><span class="nf">run</span> <span class="p">{</span>
        <span class="n">pinnedHeightPx</span> <span class="p">=</span> <span class="n">pinnedHeight</span><span class="p">.</span><span class="nf">toPx</span><span class="p">()</span>
        <span class="n">maxHeightPx</span> <span class="p">=</span> <span class="n">maxHeight</span><span class="p">.</span><span class="nf">toPx</span><span class="p">()</span>
        <span class="n">titleBottomPaddingPx</span> <span class="p">=</span> <span class="n">titleBottomPadding</span><span class="p">.</span><span class="nf">roundToPx</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="c1">// 앱 바가 드래그 될 때 접히기 시작해야 하는 y축 드래그 양의 상한을 조정해서 상단, 하단 타이틀 영역이 올바르게 보이도록 한다.</span>
    <span class="nc">SideEffect</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">scrollBehavior</span><span class="o">?.</span><span class="n">state</span><span class="o">?.</span><span class="n">heightOffsetLimit</span> <span class="p">!=</span> <span class="n">pinnedHeightPx</span> <span class="p">-</span> <span class="n">maxHeightPx</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">scrollBehavior</span><span class="o">?.</span><span class="n">state</span><span class="o">?.</span><span class="n">heightOffsetLimit</span> <span class="p">=</span> <span class="n">pinnedHeightPx</span> <span class="p">-</span> <span class="n">maxHeightPx</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 스크롤 동작이 발생할 때, 상하단 타이틀의 가시성을 조정하기 위한 값으로 사용된다.</span>
    <span class="c1">// 이 값이 0.5f 라면 반 정도 접힌 상태, 1.0f 라면 완전히 펼쳐진 상태를 의미한다.</span>
    <span class="kd">val</span> <span class="py">colorTransitionFraction</span> <span class="p">=</span> <span class="n">scrollBehavior</span><span class="o">?.</span><span class="n">state</span><span class="o">?.</span><span class="n">collapsedFraction</span> <span class="o">?:</span> <span class="mf">0f</span>
    <span class="kd">val</span> <span class="py">appBarContainerColor</span> <span class="p">=</span> <span class="n">colors</span><span class="p">.</span><span class="nf">containerColor</span><span class="p">(</span><span class="n">colorTransitionFraction</span><span class="p">)</span>

    <span class="c1">// 액션 아이콘들을 Row로 묶어서 표시한다.</span>
    <span class="kd">val</span> <span class="py">actionsRow</span> <span class="p">=</span> <span class="nd">@Composable</span> <span class="p">{</span>
        <span class="nc">Row</span><span class="p">(</span>
            <span class="n">horizontalArrangement</span> <span class="p">=</span> <span class="nc">Arrangement</span><span class="p">.</span><span class="nc">End</span><span class="p">,</span>
            <span class="n">verticalAlignment</span> <span class="p">=</span> <span class="nc">Alignment</span><span class="p">.</span><span class="nc">CenterVertically</span><span class="p">,</span>
            <span class="n">content</span> <span class="p">=</span> <span class="n">actions</span>
        <span class="p">)</span>
    <span class="p">}</span>
    <span class="kd">val</span> <span class="py">topTitleAlpha</span> <span class="p">=</span> <span class="nc">TopTitleAlphaEasing</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">colorTransitionFraction</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">bottomTitleAlpha</span> <span class="p">=</span> <span class="mf">1f</span> <span class="p">-</span> <span class="n">colorTransitionFraction</span>

    <span class="c1">// 하단 타이틀을 표시할지 여부를 결정하는 기준 값</span>
    <span class="c1">// 0.5f 이하일 경우 상단 타이틀을 표시하고, 그렇지 않을 경우 하단 타이틀을 표시한다.</span>
    <span class="kd">val</span> <span class="py">hideTopRowSemantics</span> <span class="p">=</span> <span class="n">colorTransitionFraction</span> <span class="p">&lt;</span> <span class="mf">0.5f</span>
    <span class="kd">val</span> <span class="py">hideBottomRowSemantics</span> <span class="p">=</span> <span class="p">!</span><span class="n">hideTopRowSemantics</span>

    <span class="c1">// 앱 바에 드래그 동작을 가능하게 한다.</span>
    <span class="kd">val</span> <span class="py">appBarDragModifier</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">scrollBehavior</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">scrollBehavior</span><span class="p">.</span><span class="n">isPinned</span><span class="p">)</span> <span class="p">{</span>
        <span class="nc">Modifier</span><span class="p">.</span><span class="nf">draggable</span><span class="p">(</span>
            <span class="n">orientation</span> <span class="p">=</span> <span class="nc">Orientation</span><span class="p">.</span><span class="nc">Vertical</span><span class="p">,</span>
            <span class="n">state</span> <span class="p">=</span> <span class="nf">rememberDraggableState</span> <span class="p">{</span> <span class="n">delta</span> <span class="p">-&gt;</span>
                <span class="n">scrollBehavior</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">heightOffset</span> <span class="p">=</span> <span class="n">scrollBehavior</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">heightOffset</span> <span class="p">+</span> <span class="n">delta</span>
            <span class="p">},</span>
            <span class="n">onDragStopped</span> <span class="p">=</span> <span class="p">{</span> <span class="n">velocity</span> <span class="p">-&gt;</span>
                <span class="c1">// 드래그가 멈췄을 때 앱 바의 확장 또는 접힘 동작을 결정한다.</span>
                <span class="c1">// colorTransitionFraction 값이 0.5f를 기준으로 접힐지 펼쳐질지 결정한다.</span>
                <span class="c1">// 이 때 애니메이션이 발생하게 된다.</span>
                <span class="nf">settleAppBar</span><span class="p">(</span>
                    <span class="n">scrollBehavior</span><span class="p">.</span><span class="n">state</span><span class="p">,</span>
                    <span class="n">velocity</span><span class="p">,</span>
                    <span class="n">scrollBehavior</span><span class="p">.</span><span class="n">flingAnimationSpec</span><span class="p">,</span>
                    <span class="n">scrollBehavior</span><span class="p">.</span><span class="n">snapAnimationSpec</span>
                <span class="p">)</span>
            <span class="p">}</span>
        <span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nc">Modifier</span>
    <span class="p">}</span>

    <span class="nc">Surface</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="n">appBarDragModifier</span><span class="p">),</span> <span class="n">color</span> <span class="p">=</span> <span class="n">appBarContainerColor</span><span class="p">)</span> <span class="p">{</span>
        <span class="nc">Column</span> <span class="p">{</span>
            <span class="nc">TopAppBarLayout</span><span class="p">(</span>
                <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span>
                    <span class="p">.</span><span class="nf">windowInsetsPadding</span><span class="p">(</span><span class="n">windowInsets</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">clipToBounds</span><span class="p">(),</span>
                <span class="n">heightPx</span> <span class="p">=</span> <span class="n">pinnedHeightPx</span><span class="p">,</span>
                <span class="n">navigationIconContentColor</span> <span class="p">=</span>
                <span class="n">colors</span><span class="p">.</span><span class="n">navigationIconContentColor</span><span class="p">,</span>
                <span class="n">titleContentColor</span> <span class="p">=</span> <span class="n">colors</span><span class="p">.</span><span class="n">titleContentColor</span><span class="p">,</span>
                <span class="n">actionIconContentColor</span> <span class="p">=</span>
                <span class="n">colors</span><span class="p">.</span><span class="n">actionIconContentColor</span><span class="p">,</span>
                <span class="n">title</span> <span class="p">=</span> <span class="n">smallTitle</span><span class="p">,</span>
                <span class="n">titleTextStyle</span> <span class="p">=</span> <span class="n">smallTitleTextStyle</span><span class="p">,</span>
                <span class="n">titleAlpha</span> <span class="p">=</span> <span class="n">topTitleAlpha</span><span class="p">,</span>
                <span class="n">titleVerticalArrangement</span> <span class="p">=</span> <span class="nc">Arrangement</span><span class="p">.</span><span class="nc">Center</span><span class="p">,</span>
                <span class="n">titleHorizontalArrangement</span> <span class="p">=</span> <span class="nc">Arrangement</span><span class="p">.</span><span class="nc">Start</span><span class="p">,</span>
                <span class="n">titleBottomPadding</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
                <span class="n">hideTitleSemantics</span> <span class="p">=</span> <span class="n">hideTopRowSemantics</span><span class="p">,</span>
                <span class="n">navigationIcon</span> <span class="p">=</span> <span class="n">navigationIcon</span><span class="p">,</span>
                <span class="n">actions</span> <span class="p">=</span> <span class="n">actionsRow</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="nc">TopAppBarLayout</span><span class="p">(</span>
                <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span>
                    <span class="p">.</span><span class="nf">windowInsetsPadding</span><span class="p">(</span><span class="n">windowInsets</span><span class="p">.</span><span class="nf">only</span><span class="p">(</span><span class="nc">WindowInsetsSides</span><span class="p">.</span><span class="nc">Horizontal</span><span class="p">))</span>
                    <span class="p">.</span><span class="nf">clipToBounds</span><span class="p">(),</span>
                <span class="n">heightPx</span> <span class="p">=</span> <span class="n">maxHeightPx</span> <span class="p">-</span> <span class="n">pinnedHeightPx</span> <span class="p">+</span> <span class="p">(</span><span class="n">scrollBehavior</span><span class="o">?.</span><span class="n">state</span><span class="o">?.</span><span class="n">heightOffset</span>
                    <span class="o">?:</span> <span class="mf">0f</span><span class="p">),</span>
                <span class="n">navigationIconContentColor</span> <span class="p">=</span>
                <span class="n">colors</span><span class="p">.</span><span class="n">navigationIconContentColor</span><span class="p">,</span>
                <span class="n">titleContentColor</span> <span class="p">=</span> <span class="n">colors</span><span class="p">.</span><span class="n">titleContentColor</span><span class="p">,</span>
                <span class="n">actionIconContentColor</span> <span class="p">=</span>
                <span class="n">colors</span><span class="p">.</span><span class="n">actionIconContentColor</span><span class="p">,</span>
                <span class="n">title</span> <span class="p">=</span> <span class="n">title</span><span class="p">,</span>
                <span class="n">titleTextStyle</span> <span class="p">=</span> <span class="n">titleTextStyle</span><span class="p">,</span>
                <span class="n">titleAlpha</span> <span class="p">=</span> <span class="n">bottomTitleAlpha</span><span class="p">,</span>
                <span class="n">titleVerticalArrangement</span> <span class="p">=</span> <span class="nc">Arrangement</span><span class="p">.</span><span class="nc">Bottom</span><span class="p">,</span>
                <span class="n">titleHorizontalArrangement</span> <span class="p">=</span> <span class="nc">Arrangement</span><span class="p">.</span><span class="nc">Start</span><span class="p">,</span>
                <span class="n">titleBottomPadding</span> <span class="p">=</span> <span class="n">titleBottomPaddingPx</span><span class="p">,</span>
                <span class="n">hideTitleSemantics</span> <span class="p">=</span> <span class="n">hideBottomRowSemantics</span><span class="p">,</span>
                <span class="n">navigationIcon</span> <span class="p">=</span> <span class="p">{},</span>
                <span class="n">actions</span> <span class="p">=</span> <span class="p">{}</span>
            <span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div></div>

<h4 id="topappbarlayout은-다음과-같이-구현되어-있다">TopAppBarLayout은 다음과 같이 구현되어 있다.</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Layout</code>을 사용하여 <code class="language-plaintext highlighter-rouge">TopAppBar</code>의 레이아웃을 구성한다.</li>
  <li>네비게이션 아이콘, 액션, 타이틀을 모두 따로 <code class="language-plaintext highlighter-rouge">Box</code>로 감싼다.</li>
  <li>각각의 <code class="language-plaintext highlighter-rouge">Box</code>에 <code class="language-plaintext highlighter-rouge">layoutId</code>를 부여하여 각각의 <code class="language-plaintext highlighter-rouge">Box</code>를 구분한다.</li>
  <li><code class="language-plaintext highlighter-rouge">layout</code> 함수를 사용하여 각각의 컴포넌트의 크기에 따라 <code class="language-plaintext highlighter-rouge">Box</code>의 위치를 결정한다.</li>
  <li>하단 타이틀이 접히고 펼쳐지는 동작을 자연스럽게 하기 위해 <code class="language-plaintext highlighter-rouge">alpha</code>값을 가지고 투명도를 조절하는 방식을 사용한다.</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Composable</span>
<span class="k">private</span> <span class="k">fun</span> <span class="nf">TopAppBarLayout</span><span class="p">(</span>
    <span class="n">modifier</span><span class="p">:</span> <span class="nc">Modifier</span><span class="p">,</span>
    <span class="n">heightPx</span><span class="p">:</span> <span class="nc">Float</span><span class="p">,</span>
    <span class="n">navigationIconContentColor</span><span class="p">:</span> <span class="nc">Color</span><span class="p">,</span>
    <span class="n">titleContentColor</span><span class="p">:</span> <span class="nc">Color</span><span class="p">,</span>
    <span class="n">actionIconContentColor</span><span class="p">:</span> <span class="nc">Color</span><span class="p">,</span>
    <span class="n">title</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">,</span>
    <span class="n">titleTextStyle</span><span class="p">:</span> <span class="nc">TextStyle</span><span class="p">,</span>
    <span class="n">titleAlpha</span><span class="p">:</span> <span class="nc">Float</span><span class="p">,</span>
    <span class="n">titleVerticalArrangement</span><span class="p">:</span> <span class="nc">Arrangement</span><span class="p">.</span><span class="nc">Vertical</span><span class="p">,</span>
    <span class="n">titleHorizontalArrangement</span><span class="p">:</span> <span class="nc">Arrangement</span><span class="p">.</span><span class="nc">Horizontal</span><span class="p">,</span>
    <span class="n">titleBottomPadding</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span>
    <span class="n">hideTitleSemantics</span><span class="p">:</span> <span class="nc">Boolean</span><span class="p">,</span>
    <span class="n">navigationIcon</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">,</span>
    <span class="n">actions</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">,</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="nc">Layout</span><span class="p">(</span>
        <span class="p">{</span>
            <span class="nc">Box</span><span class="p">(</span>
                <span class="nc">Modifier</span>
                    <span class="p">.</span><span class="nf">layoutId</span><span class="p">(</span><span class="s">"navigationIcon"</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">padding</span><span class="p">(</span><span class="n">start</span> <span class="p">=</span> <span class="nc">TopAppBarHorizontalPadding</span><span class="p">)</span>
            <span class="p">)</span> <span class="p">{</span>
                <span class="nc">CompositionLocalProvider</span><span class="p">(</span>
                    <span class="nc">LocalContentColor</span> <span class="n">provides</span> <span class="n">navigationIconContentColor</span><span class="p">,</span>
                    <span class="n">content</span> <span class="p">=</span> <span class="n">navigationIcon</span>
                <span class="p">)</span>
            <span class="p">}</span>
            <span class="nc">Box</span><span class="p">(</span>
                <span class="nc">Modifier</span>
                    <span class="p">.</span><span class="nf">layoutId</span><span class="p">(</span><span class="s">"title"</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="nc">TopAppBarHorizontalPadding</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="n">hideTitleSemantics</span><span class="p">)</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">clearAndSetSemantics</span> <span class="p">{</span> <span class="p">}</span> <span class="k">else</span> <span class="nc">Modifier</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">graphicsLayer</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="n">titleAlpha</span><span class="p">)</span>
            <span class="p">)</span> <span class="p">{</span>
                <span class="nc">ProvideContentColorTextStyle</span><span class="p">(</span>
                    <span class="n">contentColor</span> <span class="p">=</span> <span class="n">titleContentColor</span><span class="p">,</span>
                    <span class="n">textStyle</span> <span class="p">=</span> <span class="n">titleTextStyle</span><span class="p">,</span>
                    <span class="n">content</span> <span class="p">=</span> <span class="n">title</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="nc">Box</span><span class="p">(</span>
                <span class="nc">Modifier</span>
                    <span class="p">.</span><span class="nf">layoutId</span><span class="p">(</span><span class="s">"actionIcons"</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">padding</span><span class="p">(</span><span class="n">end</span> <span class="p">=</span> <span class="nc">TopAppBarHorizontalPadding</span><span class="p">)</span>
            <span class="p">)</span> <span class="p">{</span>
                <span class="nc">CompositionLocalProvider</span><span class="p">(</span>
                    <span class="nc">LocalContentColor</span> <span class="n">provides</span> <span class="n">actionIconContentColor</span><span class="p">,</span>
                    <span class="n">content</span> <span class="p">=</span> <span class="n">actions</span>
                <span class="p">)</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
    <span class="p">)</span> <span class="p">{</span> <span class="n">measurables</span><span class="p">,</span> <span class="n">constraints</span> <span class="p">-&gt;</span>
        <span class="kd">val</span> <span class="py">navigationIconPlaceable</span> <span class="p">=</span>
            <span class="n">measurables</span><span class="p">.</span><span class="nf">fastFirst</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">layoutId</span> <span class="p">==</span> <span class="s">"navigationIcon"</span> <span class="p">}</span>
                <span class="p">.</span><span class="nf">measure</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">minWidth</span> <span class="p">=</span> <span class="mi">0</span><span class="p">))</span>
        <span class="kd">val</span> <span class="py">actionIconsPlaceable</span> <span class="p">=</span>
            <span class="n">measurables</span><span class="p">.</span><span class="nf">fastFirst</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">layoutId</span> <span class="p">==</span> <span class="s">"actionIcons"</span> <span class="p">}</span>
                <span class="p">.</span><span class="nf">measure</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">minWidth</span> <span class="p">=</span> <span class="mi">0</span><span class="p">))</span>

        <span class="kd">val</span> <span class="py">maxTitleWidth</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span> <span class="p">==</span> <span class="nc">Constraints</span><span class="p">.</span><span class="nc">Infinity</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span> <span class="p">-</span> <span class="n">navigationIconPlaceable</span><span class="p">.</span><span class="n">width</span> <span class="p">-</span> <span class="n">actionIconsPlaceable</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">coerceAtLeast</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="kd">val</span> <span class="py">titlePlaceable</span> <span class="p">=</span>
            <span class="n">measurables</span><span class="p">.</span><span class="nf">fastFirst</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">layoutId</span> <span class="p">==</span> <span class="s">"title"</span> <span class="p">}</span>
                <span class="p">.</span><span class="nf">measure</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">minWidth</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">maxWidth</span> <span class="p">=</span> <span class="n">maxTitleWidth</span><span class="p">))</span>

        <span class="kd">val</span> <span class="py">titleBaseline</span> <span class="p">=</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">titlePlaceable</span><span class="p">[</span><span class="nc">LastBaseline</span><span class="p">]</span> <span class="p">!=</span> <span class="nc">AlignmentLine</span><span class="p">.</span><span class="nc">Unspecified</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">titlePlaceable</span><span class="p">[</span><span class="nc">LastBaseline</span><span class="p">]</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="mi">0</span>
            <span class="p">}</span>

        <span class="kd">val</span> <span class="py">layoutHeight</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">heightPx</span><span class="p">.</span><span class="nf">isNaN</span><span class="p">())</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">heightPx</span><span class="p">.</span><span class="nf">roundToInt</span><span class="p">()</span>

        <span class="nf">layout</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span><span class="p">,</span> <span class="n">layoutHeight</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">navigationIconPlaceable</span><span class="p">.</span><span class="nf">placeRelative</span><span class="p">(</span>
                <span class="n">x</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
                <span class="n">y</span> <span class="p">=</span> <span class="p">(</span><span class="n">layoutHeight</span> <span class="p">-</span> <span class="n">navigationIconPlaceable</span><span class="p">.</span><span class="n">height</span><span class="p">)</span> <span class="p">/</span> <span class="mi">2</span>
            <span class="p">)</span>

            <span class="n">titlePlaceable</span><span class="p">.</span><span class="nf">placeRelative</span><span class="p">(</span>
                <span class="n">x</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">titleHorizontalArrangement</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nc">Arrangement</span><span class="p">.</span><span class="nc">Center</span> <span class="p">-&gt;</span> <span class="p">{</span>
                        <span class="kd">var</span> <span class="py">baseX</span> <span class="p">=</span> <span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span> <span class="p">-</span> <span class="n">titlePlaceable</span><span class="p">.</span><span class="n">width</span><span class="p">)</span> <span class="p">/</span> <span class="mi">2</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">baseX</span> <span class="p">&lt;</span> <span class="n">navigationIconPlaceable</span><span class="p">.</span><span class="n">width</span><span class="p">)</span> <span class="p">{</span>
                            <span class="n">baseX</span> <span class="p">+=</span> <span class="p">(</span><span class="n">navigationIconPlaceable</span><span class="p">.</span><span class="n">width</span> <span class="p">-</span> <span class="n">baseX</span><span class="p">)</span>
                        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">baseX</span> <span class="p">+</span> <span class="n">titlePlaceable</span><span class="p">.</span><span class="n">width</span> <span class="p">&gt;</span>
                            <span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span> <span class="p">-</span> <span class="n">actionIconsPlaceable</span><span class="p">.</span><span class="n">width</span>
                        <span class="p">)</span> <span class="p">{</span>
                            <span class="n">baseX</span> <span class="p">+=</span> <span class="p">((</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span> <span class="p">-</span> <span class="n">actionIconsPlaceable</span><span class="p">.</span><span class="n">width</span><span class="p">)</span> <span class="p">-</span>
                                <span class="p">(</span><span class="n">baseX</span> <span class="p">+</span> <span class="n">titlePlaceable</span><span class="p">.</span><span class="n">width</span><span class="p">))</span>
                        <span class="p">}</span>
                        <span class="n">baseX</span>
                    <span class="p">}</span>

                    <span class="nc">Arrangement</span><span class="p">.</span><span class="nc">End</span> <span class="p">-&gt;</span>
                        <span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span> <span class="p">-</span> <span class="n">titlePlaceable</span><span class="p">.</span><span class="n">width</span> <span class="p">-</span> <span class="n">actionIconsPlaceable</span><span class="p">.</span><span class="n">width</span>
                    <span class="k">else</span> <span class="p">-&gt;</span> <span class="nf">max</span><span class="p">(</span><span class="nc">TopAppBarTitleInset</span><span class="p">.</span><span class="nf">roundToPx</span><span class="p">(),</span> <span class="n">navigationIconPlaceable</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>
                <span class="p">},</span>
                <span class="n">y</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">titleVerticalArrangement</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nc">Arrangement</span><span class="p">.</span><span class="nc">Center</span> <span class="p">-&gt;</span> <span class="p">(</span><span class="n">layoutHeight</span> <span class="p">-</span> <span class="n">titlePlaceable</span><span class="p">.</span><span class="n">height</span><span class="p">)</span> <span class="p">/</span> <span class="mi">2</span>
                    <span class="nc">Arrangement</span><span class="p">.</span><span class="nc">Bottom</span> <span class="p">-&gt;</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">titleBottomPadding</span> <span class="p">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">layoutHeight</span> <span class="p">-</span> <span class="n">titlePlaceable</span><span class="p">.</span><span class="n">height</span>
                        <span class="k">else</span> <span class="n">layoutHeight</span> <span class="p">-</span> <span class="n">titlePlaceable</span><span class="p">.</span><span class="n">height</span> <span class="p">-</span> <span class="nf">max</span><span class="p">(</span>
                            <span class="mi">0</span><span class="p">,</span>
                            <span class="n">titleBottomPadding</span> <span class="p">-</span> <span class="n">titlePlaceable</span><span class="p">.</span><span class="n">height</span> <span class="p">+</span> <span class="n">titleBaseline</span>
                        <span class="p">)</span>
                    <span class="k">else</span> <span class="p">-&gt;</span> <span class="mi">0</span>
                <span class="p">}</span>
            <span class="p">)</span>

            <span class="n">actionIconsPlaceable</span><span class="p">.</span><span class="nf">placeRelative</span><span class="p">(</span>
                <span class="n">x</span> <span class="p">=</span> <span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span> <span class="p">-</span> <span class="n">actionIconsPlaceable</span><span class="p">.</span><span class="n">width</span><span class="p">,</span>
                <span class="n">y</span> <span class="p">=</span> <span class="p">(</span><span class="n">layoutHeight</span> <span class="p">-</span> <span class="n">actionIconsPlaceable</span><span class="p">.</span><span class="n">height</span><span class="p">)</span> <span class="p">/</span> <span class="mi">2</span>
            <span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="기본적인-레이아웃은-topappbar의-형식을-그대로-따르므로-material3에-구현된-코드를-일부-가져왔다">기본적인 레이아웃은 TopAppBar의 형식을 그대로 따르므로, material3에 구현된 코드를 일부 가져왔다.</h3>

<ul>
  <li>그대로 따오지는 않았으며, 일부 수정하여 사용하였다.</li>
</ul>

<h4 id="--상단-하단-타이블의-배치-방식을-수정하였다">- 상단, 하단 타이블의 배치 방식을 수정하였다.</h4>

<p>Column에 상단, 하단 타이틀이 배치된 부분을 수정하여 단일 컴포저블 함수로 만들었다.
왜냐하면, 상단, 하단 타이틀의 배치 방식이 다르지 않고, 상단 타이틀이 접히고 펼쳐지는 동작을 자연스럽게 하기 위해 <code class="language-plaintext highlighter-rouge">alpha</code>값을 가지고 투명도를 조절하는 방식을 사용하기 때문이다. 그래서 단일 함수로 만들어서 코드 길이를 줄이는 방향이 좋다고 판단하였다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="kd">val</span> <span class="py">topAppBarHorizontalPadding</span> <span class="p">=</span> <span class="mi">4</span><span class="p">.</span><span class="n">dp</span>
<span class="k">private</span> <span class="kd">val</span> <span class="py">topAppBarTitleInset</span> <span class="p">=</span> <span class="mi">16</span><span class="p">.</span><span class="n">dp</span>

<span class="nd">@Composable</span>
<span class="k">fun</span> <span class="nf">CustomTopAppBar</span><span class="p">(</span>
    <span class="n">modifier</span><span class="p">:</span> <span class="nc">Modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">,</span>
    <span class="n">windowInsets</span><span class="p">:</span> <span class="nc">WindowInsets</span><span class="p">,</span>
    <span class="n">colors</span><span class="p">:</span> <span class="nc">CustomTopAppBarColors</span><span class="p">,</span>
    <span class="n">scrollState</span><span class="p">:</span> <span class="nc">ScrollState</span><span class="p">,</span>
    <span class="n">bigTitle</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">,</span>
    <span class="n">smallTitle</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">,</span>
    <span class="n">navigationIcon</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">(()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">)?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">actions</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">(</span><span class="nc">RowScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">)?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">coroutineScope</span> <span class="p">=</span> <span class="nf">rememberCoroutineScope</span><span class="p">()</span>
    <span class="kd">var</span> <span class="py">bigTitleHeight</span> <span class="k">by</span> <span class="nf">remember</span> <span class="p">{</span> <span class="nf">mutableIntStateOf</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">}</span>
    <span class="kd">val</span> <span class="py">collapsedFraction</span> <span class="k">by</span> <span class="nf">remember</span> <span class="p">{</span>
        <span class="nf">derivedStateOf</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="n">scrollState</span><span class="p">.</span><span class="n">value</span> <span class="p">&lt;</span> <span class="n">bigTitleHeight</span><span class="p">)</span> <span class="n">scrollState</span><span class="p">.</span><span class="n">value</span> <span class="p">/</span> <span class="n">bigTitleHeight</span><span class="p">.</span><span class="nf">toFloat</span><span class="p">()</span> <span class="k">else</span> <span class="mf">1f</span> <span class="p">}</span>
    <span class="p">}</span>
    <span class="kd">val</span> <span class="py">nestedScrollConnection</span> <span class="p">=</span> <span class="nf">remember</span> <span class="p">{</span>
        <span class="kd">object</span> <span class="err">: </span><span class="nc">NestedScrollConnection</span> <span class="p">{</span>
            <span class="k">override</span> <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">onPostFling</span><span class="p">(</span><span class="n">consumed</span><span class="p">:</span> <span class="nc">Velocity</span><span class="p">,</span> <span class="n">available</span><span class="p">:</span> <span class="nc">Velocity</span><span class="p">):</span> <span class="nc">Velocity</span> <span class="p">{</span>
                <span class="n">coroutineScope</span><span class="p">.</span><span class="nf">onScroll</span><span class="p">(</span><span class="n">scrollState</span><span class="p">,</span> <span class="n">bigTitleHeight</span><span class="p">,</span> <span class="n">collapsedFraction</span><span class="p">)</span>
                <span class="k">return</span> <span class="k">super</span><span class="p">.</span><span class="nf">onPostFling</span><span class="p">(</span><span class="n">consumed</span><span class="p">,</span> <span class="n">available</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">scrollState</span><span class="p">.</span><span class="n">isScrollInProgress</span> <span class="p">&amp;&amp;</span> <span class="n">scrollState</span><span class="p">.</span><span class="n">value</span> <span class="p">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nc">DisposableEffect</span><span class="p">(</span><span class="n">scrollState</span><span class="p">.</span><span class="n">isScrollInProgress</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">onDispose</span> <span class="p">{</span>
                <span class="n">coroutineScope</span><span class="p">.</span><span class="nf">onScroll</span><span class="p">(</span><span class="n">scrollState</span><span class="p">,</span> <span class="n">bigTitleHeight</span><span class="p">,</span> <span class="n">collapsedFraction</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">val</span> <span class="py">actionsRow</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">(()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">)?</span> <span class="p">=</span> <span class="n">actions</span><span class="o">?.</span><span class="nf">run</span> <span class="p">{</span>
        <span class="nd">@Composable</span> <span class="p">{</span> <span class="nc">Row</span><span class="p">(</span><span class="n">verticalAlignment</span> <span class="p">=</span> <span class="nc">Alignment</span><span class="p">.</span><span class="nc">CenterVertically</span><span class="p">,</span> <span class="n">content</span> <span class="p">=</span> <span class="k">this</span><span class="p">)</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">val</span> <span class="py">bigTitleBox</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span> <span class="p">=</span> <span class="p">{</span>
        <span class="nc">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">onGloballyPositioned</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">bigTitleHeight</span> <span class="p">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">bigTitleHeight</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
            <span class="p">}</span>
        <span class="p">})</span> <span class="p">{</span>
            <span class="nf">bigTitle</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nc">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="nf">nestedScroll</span><span class="p">(</span><span class="n">nestedScrollConnection</span><span class="p">))</span> <span class="p">{</span>
        <span class="nc">TopAppBarLayout</span><span class="p">(</span>
            <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span>
                <span class="p">.</span><span class="nf">windowInsetsPadding</span><span class="p">(</span><span class="n">windowInsets</span><span class="p">),</span>
            <span class="n">navigationIconContentColor</span> <span class="p">=</span> <span class="n">colors</span><span class="p">.</span><span class="n">navigationIconContentColor</span><span class="p">,</span>
            <span class="n">actionIconContentColor</span> <span class="p">=</span> <span class="n">colors</span><span class="p">.</span><span class="n">actionIconContentColor</span><span class="p">,</span>
            <span class="n">smallTitleAlpha</span> <span class="p">=</span> <span class="n">collapsedFraction</span><span class="p">,</span>
            <span class="n">smallTitle</span> <span class="p">=</span> <span class="n">smallTitle</span><span class="p">,</span>
            <span class="n">bigTitle</span> <span class="p">=</span> <span class="n">bigTitleBox</span><span class="p">,</span>
            <span class="n">navigationIcon</span> <span class="p">=</span> <span class="n">navigationIcon</span><span class="p">,</span>
            <span class="n">actions</span> <span class="p">=</span> <span class="n">actionsRow</span><span class="p">,</span>
        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="--드래그-동작-부분이-가장-큰-문제였다-이-부분은-직접-구현하였다">- 드래그 동작 부분이 가장 큰 문제였다. 이 부분은 직접 구현하였다.</h4>

<p>기본 API 함수의 경우 드래그를 처리하는 코드가 internal 접근자로 되어 있는 클래스들과 복잡하게 연결되어 있어서 그대로 복사하는 것은 너무 많은 내용을 복사해야 해서 엄청 비효율적이라서 직접 구현하였다.</p>

<p>구현에 많은 시간이 소요되었다.</p>

<ul>
  <li>이 앱 바를 배치한 상위 컴포저블에서 scrollState를 함수 파라미터로 받아온다.</li>
  <li>앱 바 영역이 펼치고 접힐 때 하단 타이틀 영역의 높이를 가지고 계산되어야 하므로 <code class="language-plaintext highlighter-rouge">onGloballyPositioned</code>를 사용하여 하단 타이틀 영역의 높이를 따로 저장한다.</li>
  <li><code class="language-plaintext highlighter-rouge">nestedScrollConnection</code> 객체를 생성하여 앱 바 전체 영역을 가지는 루트 컴포저블에 <code class="language-plaintext highlighter-rouge">nestedScroll</code>을 적용한다.</li>
  <li>nestedScroll만 그대로 적용하면 날리는 식으로 스크롤을 할 때 제대로 동작이 발생하지 않고 끊기는 현상이 발생한다. 이를 해결하기 위해 <code class="language-plaintext highlighter-rouge">onPostFling</code>을 오버라이드하여 스크롤이 멈추면 앱 바의 확장 또는 접힘 동작을 결정한다. 이 때 애니메이션이 발생하게 된다.</li>
  <li>API의 <code class="language-plaintext highlighter-rouge">settleAppBar</code> 함수가 쓰이는 목적을 구현하기 위해 <code class="language-plaintext highlighter-rouge">DisposableEffect</code>를 사용하여 앱바가 중간에 펼쳐진 상태에서 스크롤이 멈췄을 때 앱바의 확장 또는 접힘 동작을 결정한다. 이 때도 애니메이션이 발생하게 된다.</li>
  <li>최종 구현은 기본 API를 사용하였을 때와 차이가 없음을 확인하였다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">CoroutineScope.onScroll</code> 함수에서 <code class="language-plaintext highlighter-rouge">scrollState</code>의 상태를 직접 갱신하여 앱 바를 드래그하여도 Column을 드래그하는 것과 똑같은 동작을 하도록 구현하였다. 실제 사용에서 화면 어느 영역을 드래그 하더라도 완전히 동일한 터치감이 나타난다.</p>

<p><code class="language-plaintext highlighter-rouge">scrollState의 animateScrollTo</code> 메서드를 사용하면 <code class="language-plaintext highlighter-rouge">nestedScrollConnection</code>에서 따로 드래그 상태에 따른 로직을 구현하지 않더라도 자연스러운 드래그 동작을 만들 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">const</span> <span class="kd">val</span> <span class="py">BIG_TITLE</span> <span class="p">=</span> <span class="s">"bigTitle"</span>
<span class="k">private</span> <span class="k">const</span> <span class="kd">val</span> <span class="py">SMALL_TITLE</span> <span class="p">=</span> <span class="s">"smallTitle"</span>
<span class="k">private</span> <span class="k">const</span> <span class="kd">val</span> <span class="py">NAVIGATION_ICON</span> <span class="p">=</span> <span class="s">"navigationIcon"</span>
<span class="k">private</span> <span class="k">const</span> <span class="kd">val</span> <span class="py">ACTION_ROW</span> <span class="p">=</span> <span class="s">"actionRow"</span>

<span class="nd">@Composable</span>
<span class="k">private</span> <span class="k">fun</span> <span class="nf">TopAppBarLayout</span><span class="p">(</span>
    <span class="n">modifier</span><span class="p">:</span> <span class="nc">Modifier</span><span class="p">,</span>
    <span class="n">navigationIconContentColor</span><span class="p">:</span> <span class="nc">Color</span><span class="p">,</span>
    <span class="n">actionIconContentColor</span><span class="p">:</span> <span class="nc">Color</span><span class="p">,</span>
    <span class="n">smallTitleAlpha</span><span class="p">:</span> <span class="nc">Float</span><span class="p">,</span>
    <span class="n">bigTitle</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">,</span>
    <span class="n">smallTitle</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">,</span>
    <span class="n">navigationIcon</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">(()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">)?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">actions</span><span class="p">:</span> <span class="nd">@Composable</span> <span class="p">(()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">)?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="nc">Layout</span><span class="p">({</span>
        <span class="nc">Box</span><span class="p">(</span><span class="nc">Modifier</span>
            <span class="p">.</span><span class="nf">layoutId</span><span class="p">(</span><span class="nc">NAVIGATION_ICON</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">padding</span><span class="p">(</span><span class="n">start</span> <span class="p">=</span> <span class="n">topAppBarHorizontalPadding</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">navigationIcon</span><span class="o">?.</span><span class="nf">run</span> <span class="p">{</span>
                <span class="nc">CompositionLocalProvider</span><span class="p">(</span><span class="nc">LocalContentColor</span> <span class="n">provides</span> <span class="n">navigationIconContentColor</span><span class="p">,</span> <span class="n">content</span> <span class="p">=</span> <span class="k">this</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nc">Box</span><span class="p">(</span><span class="nc">Modifier</span>
            <span class="p">.</span><span class="nf">layoutId</span><span class="p">(</span><span class="nc">BIG_TITLE</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="n">topAppBarHorizontalPadding</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">graphicsLayer</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="mf">1f</span> <span class="p">-</span> <span class="n">smallTitleAlpha</span><span class="p">))</span> <span class="p">{</span>
            <span class="nf">bigTitle</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="nc">Box</span><span class="p">(</span><span class="nc">Modifier</span>
            <span class="p">.</span><span class="nf">layoutId</span><span class="p">(</span><span class="nc">SMALL_TITLE</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="n">topAppBarHorizontalPadding</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">graphicsLayer</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="n">smallTitleAlpha</span><span class="p">))</span> <span class="p">{</span>
            <span class="nf">smallTitle</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="nc">Box</span><span class="p">(</span><span class="nc">Modifier</span>
            <span class="p">.</span><span class="nf">layoutId</span><span class="p">(</span><span class="nc">ACTION_ROW</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">padding</span><span class="p">(</span><span class="n">end</span> <span class="p">=</span> <span class="n">topAppBarHorizontalPadding</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">actions</span><span class="o">?.</span><span class="nf">run</span> <span class="p">{</span>
                <span class="nc">CompositionLocalProvider</span><span class="p">(</span><span class="nc">LocalContentColor</span> <span class="n">provides</span> <span class="n">actionIconContentColor</span><span class="p">,</span> <span class="n">content</span> <span class="p">=</span> <span class="k">this</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">},</span> <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">)</span> <span class="p">{</span> <span class="n">measurables</span><span class="p">,</span> <span class="n">constraints</span> <span class="p">-&gt;</span>
        <span class="kd">val</span> <span class="py">navigationIconPlaceable</span> <span class="p">=</span> <span class="n">measurables</span><span class="p">.</span><span class="nf">first</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">layoutId</span> <span class="p">==</span> <span class="nc">NAVIGATION_ICON</span> <span class="p">}.</span><span class="nf">measure</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">minWidth</span> <span class="p">=</span> <span class="mi">0</span><span class="p">))</span>
        <span class="kd">val</span> <span class="py">actionIconsPlaceable</span> <span class="p">=</span> <span class="n">measurables</span><span class="p">.</span><span class="nf">first</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">layoutId</span> <span class="p">==</span> <span class="nc">ACTION_ROW</span> <span class="p">}.</span><span class="nf">measure</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">minWidth</span> <span class="p">=</span> <span class="mi">0</span><span class="p">))</span>
        <span class="kd">val</span> <span class="py">bigTitlePlaceable</span> <span class="p">=</span> <span class="n">measurables</span><span class="p">.</span><span class="nf">first</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">layoutId</span> <span class="p">==</span> <span class="nc">BIG_TITLE</span> <span class="p">}.</span><span class="nf">measure</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">minWidth</span> <span class="p">=</span> <span class="mi">0</span><span class="p">))</span>
        <span class="kd">val</span> <span class="py">smallTitlePlaceable</span> <span class="p">=</span> <span class="n">measurables</span><span class="p">.</span><span class="nf">first</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">layoutId</span> <span class="p">==</span> <span class="nc">SMALL_TITLE</span> <span class="p">}.</span><span class="nf">measure</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">minWidth</span> <span class="p">=</span> <span class="mi">0</span><span class="p">))</span>

        <span class="kd">val</span> <span class="py">expandedRatio</span> <span class="p">=</span> <span class="mf">1f</span> <span class="p">-</span> <span class="p">(</span><span class="mf">1f</span> <span class="p">-</span> <span class="n">smallTitleAlpha</span><span class="p">)</span>
        <span class="kd">val</span> <span class="py">layoutHeight</span> <span class="p">=</span> <span class="n">navigationIconPlaceable</span><span class="p">.</span><span class="n">height</span> <span class="p">+</span> <span class="p">(</span><span class="n">bigTitlePlaceable</span><span class="p">.</span><span class="n">height</span> <span class="p">*</span> <span class="p">(</span><span class="mf">1f</span> <span class="p">-</span> <span class="n">expandedRatio</span><span class="p">)).</span><span class="nf">toInt</span><span class="p">()</span>
        <span class="kd">val</span> <span class="py">titleInset</span> <span class="p">=</span> <span class="n">topAppBarTitleInset</span><span class="p">.</span><span class="nf">roundToPx</span><span class="p">()</span>

        <span class="nf">layout</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span><span class="p">,</span> <span class="n">layoutHeight</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">navigationIconPlaceable</span><span class="p">.</span><span class="nf">place</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="mi">0</span><span class="p">)</span>
            <span class="n">actionIconsPlaceable</span><span class="p">.</span><span class="nf">place</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span> <span class="p">-</span> <span class="n">actionIconsPlaceable</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="mi">0</span><span class="p">)</span>

            <span class="n">bigTitlePlaceable</span><span class="p">.</span><span class="nf">place</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">titleInset</span> <span class="p">+</span> <span class="n">navigationIconPlaceable</span><span class="p">.</span><span class="n">width</span> <span class="p">*</span> <span class="n">expandedRatio</span><span class="p">).</span><span class="nf">toInt</span><span class="p">(),</span>
                <span class="n">y</span> <span class="p">=</span> <span class="n">navigationIconPlaceable</span><span class="p">.</span><span class="n">height</span> <span class="p">-</span> <span class="p">(</span><span class="n">bigTitlePlaceable</span><span class="p">.</span><span class="n">height</span> <span class="p">*</span> <span class="n">expandedRatio</span><span class="p">).</span><span class="nf">toInt</span><span class="p">())</span>
            <span class="n">smallTitlePlaceable</span><span class="p">.</span><span class="nf">place</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="n">navigationIconPlaceable</span><span class="p">.</span><span class="n">width</span> <span class="p">+</span> <span class="n">titleInset</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="p">(</span><span class="n">layoutHeight</span> <span class="p">-</span> <span class="n">smallTitlePlaceable</span><span class="p">.</span><span class="n">height</span><span class="p">)</span> <span class="p">/</span> <span class="mi">2</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="k">private</span> <span class="kd">val</span> <span class="py">animationSpec</span><span class="p">:</span> <span class="nc">AnimationSpec</span><span class="p">&lt;</span><span class="nc">Float</span><span class="p">&gt;</span> <span class="p">=</span>
    <span class="nc">SpringSpec</span><span class="p">(</span><span class="n">dampingRatio</span> <span class="p">=</span> <span class="nc">Spring</span><span class="p">.</span><span class="nc">DampingRatioLowBouncy</span><span class="p">,</span> <span class="n">stiffness</span> <span class="p">=</span> <span class="nc">Spring</span><span class="p">.</span><span class="nc">StiffnessMediumLow</span><span class="p">)</span>
<span class="k">private</span> <span class="k">const</span> <span class="kd">val</span> <span class="py">COLLAPSE_THRESHOLD</span> <span class="p">=</span> <span class="mf">0.5f</span>

<span class="k">private</span> <span class="k">fun</span> <span class="nc">CoroutineScope</span><span class="p">.</span><span class="nf">onScroll</span><span class="p">(</span><span class="n">scrollState</span><span class="p">:</span> <span class="nc">ScrollState</span><span class="p">,</span> <span class="n">shiftY</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="n">collapsedFraction</span><span class="p">:</span> <span class="nc">Float</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">scrollState</span><span class="p">.</span><span class="n">value</span> <span class="p">&lt;</span> <span class="n">shiftY</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">launch</span> <span class="p">{</span>
            <span class="n">scrollState</span><span class="p">.</span><span class="nf">animateScrollTo</span><span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="n">collapsedFraction</span> <span class="p">&lt;</span> <span class="nc">COLLAPSE_THRESHOLD</span><span class="p">)</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">shiftY</span><span class="p">,</span> <span class="n">animationSpec</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="최종-구현">최종 구현</h2>

<p><img src="https://github.com/pknujsp/pknujsp/assets/48265129/19c9e7b8-1c58-4886-9291-dad3e2104703" alt="" /></p>]]></content><author><name>Junsung Park</name></author><category term="Android" /><category term="Android" /><category term="Compose" /><summary type="html"><![CDATA[내용이 심하게 부실해서 수정하고 있습니다.]]></summary></entry><entry><title type="html">자동으로 폰트 크기 조절되는 Text Composable만들기</title><link href="https://pknujsp.github.io//jekyll-theme-yat/android/2024/01/09/%EC%9E%90%EB%8F%99-%ED%8F%B0%ED%8A%B8-%ED%81%AC%EA%B8%B0-%EC%A1%B0%EC%A0%88-Text-Composable%EB%A7%8C%EB%93%A4%EA%B8%B0.html" rel="alternate" type="text/html" title="자동으로 폰트 크기 조절되는 Text Composable만들기" /><published>2024-01-09T00:00:00+09:00</published><updated>2024-01-09T00:00:00+09:00</updated><id>https://pknujsp.github.io//jekyll-theme-yat/android/2024/01/09/%EC%9E%90%EB%8F%99%20%ED%8F%B0%ED%8A%B8%20%ED%81%AC%EA%B8%B0%20%EC%A1%B0%EC%A0%88%20Text%20Composable%EB%A7%8C%EB%93%A4%EA%B8%B0</id><content type="html" xml:base="https://pknujsp.github.io//jekyll-theme-yat/android/2024/01/09/%EC%9E%90%EB%8F%99-%ED%8F%B0%ED%8A%B8-%ED%81%AC%EA%B8%B0-%EC%A1%B0%EC%A0%88-Text-Composable%EB%A7%8C%EB%93%A4%EA%B8%B0.html"><![CDATA[<h2 id="자동으로-폰트-크기-조절되는-text-composable만들기">자동으로 폰트 크기 조절되는 Text Composable만들기</h2>

<p><img src="https://github.com/pknujsp/pknujsp/assets/48265129/54a14f2f-723a-4b9b-b310-c95973b3fd62" alt="" /></p>

<h2 id="필요성">필요성</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">&lt;img src="https://github.com/pknujsp/pknujsp/assets/48265129/154a7984-643f-4e67-9a5c-bc5d40514b60"&gt;</td>
      <td style="text-align: center">&lt;img src="https://github.com/pknujsp/pknujsp/assets/48265129/53127974-2c00-4f2a-b654-037b9fea7e46"&gt;</td>
    </tr>
  </tbody>
</table>

<p>Text를 화면에 보여줄 때, 값의 길이가 길어지면 위와 같이 내용이 잘리게 된다.(<code class="language-plaintext highlighter-rouge">maxLines = 1</code>인 경우)</p>

<p>잘리지 않게하려면 길이에 따라 폰트 크기를 조절한 후 Text를 그리면 된다.</p>

<p>이를 위해 다음 단계를 따르면 된다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">BoxWithConstraints</code>Composable 내에 <code class="language-plaintext highlighter-rouge">Text</code> Composable을 배치한다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">BoxWithConstraints</code>를 사용하면 화면상에 그려질 수 있는 크기를 알 수 있다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">TextMeasurer</code>를 사용해 Text가 화면에서 실제로 보여지는 크기를 구하고, 폰트 크기를 바꿔준다.</li>
</ul>

<h3 id="구현-1">구현 1</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Composable</span>
<span class="k">fun</span> <span class="nf">AutoText</span><span class="p">(</span>
    <span class="n">modifier</span><span class="p">:</span> <span class="nc">Modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">,</span>
    <span class="n">text</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="n">style</span><span class="p">:</span> <span class="nc">TextStyle</span><span class="p">,</span>
    <span class="n">overflow</span><span class="p">:</span> <span class="nc">TextOverflow</span> <span class="p">=</span> <span class="nc">TextOverflow</span><span class="p">.</span><span class="nc">Clip</span><span class="p">,</span>
    <span class="n">minFontSize</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="nc">MIN_AUTO_SIZING_TEXT_SIZE</span><span class="p">,</span>
    <span class="n">defaultFontSize</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="nc">DEFAULT_AUTO_SIZING_TEXT_SIZE</span><span class="p">,</span>
    <span class="n">step</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">1</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="nc">BoxWithConstraints</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">textMeasurer</span> <span class="p">=</span> <span class="nf">rememberTextMeasurer</span><span class="p">()</span>
        <span class="kd">val</span> <span class="py">textOverflow</span> <span class="p">=</span> <span class="nf">remember</span><span class="p">(</span><span class="n">overflow</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="n">overflow</span> <span class="p">==</span> <span class="nc">TextOverflow</span><span class="p">.</span><span class="nc">Ellipsis</span><span class="p">)</span> <span class="nc">TextOverflow</span><span class="p">.</span><span class="nc">Clip</span> <span class="k">else</span> <span class="n">overflow</span> <span class="p">}</span>
        <span class="kd">var</span> <span class="py">textStyle</span> <span class="k">by</span> <span class="nf">remember</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="p">{</span> <span class="nf">mutableStateOf</span><span class="p">(</span><span class="n">style</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">fontSize</span> <span class="p">=</span> <span class="n">defaultFontSize</span><span class="p">.</span><span class="n">sp</span><span class="p">))</span> <span class="p">}</span>

        <span class="nc">LaunchedEffect</span><span class="p">(</span><span class="n">textStyle</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">textMeasurer</span><span class="p">.</span><span class="nf">measure</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">textStyle</span><span class="p">).</span><span class="nf">run</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">textStyle</span><span class="p">.</span><span class="n">fontSize</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="nf">toInt</span><span class="p">()</span> <span class="p">&gt;</span> <span class="n">minFontSize</span> <span class="p">&amp;&amp;</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="p">&gt;=</span> <span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span> <span class="p">||</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">&gt;=</span> <span class="n">constraints</span><span class="p">.</span><span class="n">maxHeight</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kd">val</span> <span class="py">newFontSize</span> <span class="p">=</span> <span class="p">(</span><span class="n">textStyle</span><span class="p">.</span><span class="n">fontSize</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="nf">toInt</span><span class="p">()</span> <span class="p">-</span> <span class="n">step</span><span class="p">).</span><span class="nf">coerceAtLeast</span><span class="p">(</span><span class="n">minFontSize</span><span class="p">)</span>
                    <span class="n">textStyle</span> <span class="p">=</span> <span class="n">textStyle</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">fontSize</span> <span class="p">=</span> <span class="n">newFontSize</span><span class="p">.</span><span class="n">sp</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nc">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">text</span><span class="p">,</span> <span class="n">maxLines</span> <span class="p">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">style</span> <span class="p">=</span> <span class="n">textStyle</span><span class="p">,</span> <span class="n">overflow</span> <span class="p">=</span> <span class="n">textOverflow</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">val textMeasurer = rememberTextMeasurer()</code> : Text의 크기를 측정하는 데 쓰인다.</li>
  <li><code class="language-plaintext highlighter-rouge">var textStyle by remember(text) { mutableStateOf(style.copy(fontSize = defaultFontSize.sp)) }</code> : <code class="language-plaintext highlighter-rouge">textStyle</code>을 조정해야 하므로 <strong>State</strong>로 생성한다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">text</code>가 변경되면, <code class="language-plaintext highlighter-rouge">textStyle</code>는 초기화된다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">LaunchedEffect(textStyle) { ... }</code> : <code class="language-plaintext highlighter-rouge">textStyle</code>이 변경될 때 마다 실행된다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">textStyle</code>이 변경되면, Text의 크기를 다시 측정하고, <code class="language-plaintext highlighter-rouge">constraints</code>와 비교하여 동적으로 폰트 크기를 조절한다.</li>
      <li><code class="language-plaintext highlighter-rouge">if (textStyle.fontSize.value.toInt() &gt; minFontSize &amp;&amp; size.width &gt;= constraints.maxWidth || size.height &gt;= constraints.maxHeight)</code> : <code class="language-plaintext highlighter-rouge">textStyle</code>의 폰트 크기가 <code class="language-plaintext highlighter-rouge">minFontSize</code>보다 크고, Text의 크기가 <code class="language-plaintext highlighter-rouge">constraints</code>를 초과하는지 검사</li>
    </ul>
  </li>
</ul>

<h3 id="위-코드의-단점">위 코드의 단점</h3>

<ul>
  <li>코드가 길다</li>
</ul>

<p>현재 <code class="language-plaintext highlighter-rouge">textMeasurer</code>으로 <code class="language-plaintext highlighter-rouge">text</code>의 크기를 측정하여 처리하는 로직을 직접 구현했는데, 이 부분은 감사하게도 <code class="language-plaintext highlighter-rouge">Text</code> Composable 파라미터로 제공되는 <code class="language-plaintext highlighter-rouge">onTextLayout</code>을 사용해서 코드를 간결하게 정리할 수 있다.</p>

<p>간편하게 <code class="language-plaintext highlighter-rouge">Text(..., onTextLayout = {})</code>의 <code class="language-plaintext highlighter-rouge">onTextLayout</code>람다를 사용하면 된다.
이 람다는 <code class="language-plaintext highlighter-rouge">text</code>의 레이아웃이 새롭게 계산될 때 실행되는 콜백이기 때문에, 람다 인자로 전달되는 <code class="language-plaintext highlighter-rouge">TextLayoutResult</code>의 <code class="language-plaintext highlighter-rouge">didOverflowWidth</code>와 <code class="language-plaintext highlighter-rouge">didOverflowHeight</code>를 통해 <code class="language-plaintext highlighter-rouge">Text</code>의 크기가 주어진 크기를 초과하는지 알수 있다.</p>

<h2 id="구현-2-최종">구현 2, 최종</h2>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">const</span> <span class="kd">val</span> <span class="py">MIN_AUTO_SIZING_TEXT_SIZE</span> <span class="p">=</span> <span class="mi">12</span>
<span class="k">private</span> <span class="k">const</span> <span class="kd">val</span> <span class="py">MAX_AUTO_SIZING_TEXT_SIZE</span> <span class="p">=</span> <span class="mi">30</span>

<span class="cm">/**
 * [minFontSize] ~ [defaultFontSize] 범위 내에서, [step]만큼 fontSize를 동적으로
 * 조절하면서, [TextOverflow]가 발생하지 않도록 하는 Text Composable
 *
 * @param modifier
 * @param text
 * @param style
 * @param overflow [TextOverflow.Ellipsis]는 사용 불가(동적 크기 조절이 이루어지지 않는다)
 * @param minFontSize
 * @param defaultFontSize
 * @param step
 *
 */</span>
<span class="nd">@Composable</span>
<span class="k">fun</span> <span class="nf">AutoAdjustingFontSizeText</span><span class="p">(</span>
    <span class="n">modifier</span><span class="p">:</span> <span class="nc">Modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">,</span>
    <span class="n">text</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="n">style</span><span class="p">:</span> <span class="nc">TextStyle</span><span class="p">,</span>
    <span class="n">overflow</span><span class="p">:</span> <span class="nc">TextOverflow</span> <span class="p">=</span> <span class="nc">TextOverflow</span><span class="p">.</span><span class="nc">Clip</span><span class="p">,</span>
    <span class="n">minFontSize</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="nc">MIN_AUTO_SIZING_TEXT_SIZE</span><span class="p">,</span>
    <span class="n">defaultFontSize</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="nc">DEFAULT_AUTO_SIZING_TEXT_SIZE</span><span class="p">,</span>
    <span class="n">step</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">1</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="nc">BoxWithConstraints</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">textOverflow</span> <span class="p">=</span> <span class="nf">remember</span><span class="p">(</span><span class="n">overflow</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="n">overflow</span> <span class="p">==</span> <span class="nc">TextOverflow</span><span class="p">.</span><span class="nc">Ellipsis</span><span class="p">)</span> <span class="nc">TextOverflow</span><span class="p">.</span><span class="nc">Clip</span> <span class="k">else</span> <span class="n">overflow</span> <span class="p">}</span>
        <span class="kd">var</span> <span class="py">textStyle</span> <span class="k">by</span> <span class="nf">remember</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="p">{</span> <span class="nf">mutableStateOf</span><span class="p">(</span><span class="n">style</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">fontSize</span> <span class="p">=</span> <span class="n">defaultFontSize</span><span class="p">.</span><span class="n">sp</span><span class="p">))</span> <span class="p">}</span>

        <span class="nc">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">text</span><span class="p">,</span> <span class="n">maxLines</span> <span class="p">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">style</span> <span class="p">=</span> <span class="n">textStyle</span><span class="p">,</span> <span class="n">overflow</span> <span class="p">=</span> <span class="n">textOverflow</span><span class="p">,</span> <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">,</span> <span class="n">onTextLayout</span> <span class="p">=</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">textStyle</span><span class="p">.</span><span class="n">fontSize</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="nf">toInt</span><span class="p">()</span> <span class="p">&gt;</span> <span class="n">minFontSize</span> <span class="p">&amp;&amp;</span> <span class="n">it</span><span class="p">.</span><span class="n">didOverflowWidth</span> <span class="p">||</span> <span class="n">it</span><span class="p">.</span><span class="n">didOverflowHeight</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">val</span> <span class="py">newFontSize</span> <span class="p">=</span> <span class="p">(</span><span class="n">textStyle</span><span class="p">.</span><span class="n">fontSize</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="nf">toInt</span><span class="p">()</span> <span class="p">-</span> <span class="n">step</span><span class="p">).</span><span class="nf">coerceAtLeast</span><span class="p">(</span><span class="n">minFontSize</span><span class="p">)</span>
                <span class="n">textStyle</span> <span class="p">=</span> <span class="n">textStyle</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">fontSize</span> <span class="p">=</span> <span class="n">newFontSize</span><span class="p">.</span><span class="n">sp</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="사용-예시">사용 예시</h2>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Box</span> <span class="p">{</span>
    <span class="nc">AutoAdjustingFontSizeText</span><span class="p">(</span>
        <span class="n">text</span> <span class="p">=</span> <span class="s">"value"</span><span class="p">,</span>
        <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">fillMaxWidth</span><span class="p">(),</span>
        <span class="n">style</span> <span class="p">=</span> <span class="nc">TextStyle</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="nc">Color</span><span class="p">.</span><span class="nc">Black</span><span class="p">,</span> <span class="n">fontWeight</span> <span class="p">=</span> <span class="nc">FontWeight</span><span class="p">.</span><span class="nc">SemiBold</span><span class="p">),</span>
    <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>다음과 같이 자동으로 조절됨을 확인할 수 있다.</p>

<p><img src="https://github.com/pknujsp/pknujsp/assets/48265129/54a14f2f-723a-4b9b-b310-c95973b3fd62" alt="" /></p>]]></content><author><name>Junsung Park</name></author><category term="Android" /><category term="Android" /><category term="Compose" /><category term="Text" /><category term="AutoAdjustingFontSize" /><summary type="html"><![CDATA[자동으로 폰트 크기 조절되는 Text Composable만들기]]></summary></entry><entry><title type="html">2023년을 돌아보며</title><link href="https://pknujsp.github.io//jekyll-theme-yat/private/2023/12/30/2023%EB%85%84%EC%9D%84-%EB%8F%8C%EC%95%84%EB%B3%B4%EB%A9%B0.html" rel="alternate" type="text/html" title="2023년을 돌아보며" /><published>2023-12-30T00:00:00+09:00</published><updated>2023-12-30T00:00:00+09:00</updated><id>https://pknujsp.github.io//jekyll-theme-yat/private/2023/12/30/2023%EB%85%84%EC%9D%84%20%EB%8F%8C%EC%95%84%EB%B3%B4%EB%A9%B0</id><content type="html" xml:base="https://pknujsp.github.io//jekyll-theme-yat/private/2023/12/30/2023%EB%85%84%EC%9D%84-%EB%8F%8C%EC%95%84%EB%B3%B4%EB%A9%B0.html"><![CDATA[<blockquote>
  <p>2023년의 마지막이 코 앞으로 다가온 현재, 올해 내가 했던(지금까지도 하고 있는) 일들과 그 과정에서 느끼고 생각하며 배운 점을 정리하여 2024년을 어떻게 살아갈지 작성해보고자 한다.</p>
</blockquote>

<h2 id="2023-다양하게-많은-일이-있었다">2023, 다양하게 많은 일이 있었다</h2>

<h3 id="1-대학교-4학년-시작-전-겨울방학-동안-현장-실습-진행">1. 대학교 4학년 시작 전 겨울방학 동안 현장 실습 진행</h3>

<p><strong>2022년 12월 ~ 1월</strong></p>

<p>한 달간 계절 학기로 한 기업체에서 현장 실습(인턴)을 진행하였다.</p>

<p>주 업무는 이미지 분류, 객체 탐지를 위한 Ai 학습 이미지에 대한 전 처리 작업 수행이었다. 추가적인 업무로 내가 잘 모르는 분야인 Ai 비전 모델 학습 및 검증도 수행했다.</p>

<p>회사의 사업 모델이 건강 관련 Ai인데, 여기서 Ai로 분류하고자 하는 이미지(데이터)는 특징과 패턴이 명확하지 않고, 의사도 정확하게 구분 짓지 못하는 정도라 괜찮은 Ai 모델을 학습 시키는 데에 큰 어려움이 있었다.</p>

<p>일하면서 논문과 자료를 찾는데 많은 시간을 할애했다. 또한 OpenCV로 코딩도 많이 했었고, Ai 모델들을 학습도 시켜봤었다. 마침 그 시기에 ChatGPT가 오픈해서 도움을 많이 받기도 했다.</p>

<p>짦은 기간 이었지만 여러모로 많은 걸 느끼고 배웠다. 하루종일 자료 찾고 코딩하는게 흥미롭고 재밌었는데 이 때 내 적성이 개발임을 확신하게 되었다. 좋았던 추억이다. 회사에서 키우던 귀여운 고양이, 사장님, 직원분들 모두 좋은 분들이라서 느끼는 감정이지 싶다.</p>

<p>이 때 경험이 취업 후에 도움이 될 거 라고 생각한다.</p>

<h3 id="2-medilenz-앱-개발">2. Medilenz 앱 개발</h3>

<p><strong>3월 ~ 현재 진행</strong></p>

<blockquote>
  <p>의약품 정보를 찾고, 사람들과 댓글로 이야기를 나눌 수 있으며, 카메라로 약을 비추면 비전 Ai가 2000개 종류의 약을 자동 검색해주는 앱</p>
</blockquote>

<p>교내 동아리 <a href="https://github.com/pknu-wap">WAP</a> 에서 팀을 꾸려 진행하고 있는 프로젝트로, 내게 큰 <strong>전환점</strong>이라 여기는데, 그 이유는 정말 많은 기술과 API를 배우고 적용해볼 수 있었기 때문이다.</p>

<ul>
  <li>백엔드 개발자 분들과 함께 진행해본 첫 프로젝트</li>
  <li>코루틴을 전체적으로 적용해본 첫 프로젝트 이기도 하다</li>
  <li>소스코드 패키지 모듈화</li>
  <li>Compose 사용</li>
  <li>있는지도 몰랐던 바인딩 어댑터 등 여러 API를 사용</li>
  <li>내부적으로 구현한 기능을 외부 라이브러리로 배포</li>
  <li>현장 실습 때의 경험으로 Ai 모델 학습</li>
  <li>Ai학습을 위해 데이터 전처리, Ai 작업에 상당히 많은 시간이 걸렸다</li>
  <li>백엔드 관련 지식 습득</li>
</ul>

<p>이 중에서 안드로이드 관련해서는 같이 안드로이드 개발을 진행한 <a href="https://github.com/tgyuuAn">@tgyuuAn</a>님이 열정적으로 함께 해주신 덕분에 얻은 경험과 지식이다. 정말 감사하다.</p>

<p><strong><em>실제로는 더 길고 많은 내용이 있다</em></strong></p>

<p>또한 앱의 규모를 내가 처음 구상했던 것 보다 많이 키웠는데, 이 선택이 개발자로서 성장하는데 내게 큰 도움이 되었고, 키우길 잘했다고 느낀다.</p>

<p>처음 앱을 구상했을 때 빠르게 개발하고자 기능을 최대한 단순하게 가려고 했었다. 먼저 의약품 관련 앱을 구상한 시점이 현장 실습 때였는데, 그 때 Ai 모델을 단순히 가져다 학습을 시키는 건 간단하다는 걸 알게 되었다. 그래서 다음 번에 앱을 만든다면 Ai를 적용하고자 했었고, 마침 그 때 내가 먹던 약이 있었는데, 약을 카메라로 찍으면 자동으로 찾아주는 앱이 있었으면 좋겠다는 생각이 들면서, 이번 프로젝트를 진행하게 되었다.</p>

<p>기능으로 간단하게 Ai로 약을 찾고 정보를 볼 수 있는 정도만 구현하자 했었는데, 점점 계속 생각하면 할 수록 이거 잘 만들면 되게 괜찮을 거 같았다. 이 때문에 단순히 Ai가 있는게 아니라 다른 사람들과 소통하면서 약 정보를 알아갈 수 있는 커뮤니티 앱으로 발전시켜나갔고, 현재는 약 정보를 찾고, 커뮤니티와, Ai 기능을 모두 다 갖춘 앱으로 만들고 있다.</p>

<p>기능이 늘어나니 서버가 필요하게 되었고, 백엔드 개발자 분들도 모집하여 함께하게 되었다. 백엔드 개발자 분들(<a href="https://github.com/ho-sick99">@ho-sick99</a>, <a href="https://github.com/winocreative">@winocreative</a>)은 내가 생각했던 기능을 다 구현해주셔서 정말 감사했다. 백엔드 개발자 분들과 함께 작업하면서 관련 지식(JWT, HTTP 등)을 습득할 수 있었고, 서버와 클라이언트가 어떻게 통신하는지, 어떤 방식으로 데이터를 주고 받는지 등을 알 수 있었다. 백엔드 개발자와는 처음 작업을 한거라 클라이언트만 다루는 내겐 소중한 경험이었다.</p>

<h4 id="작업-진행">작업 진행</h4>

<ul>
  <li><strong>3 ~ 6월</strong>
    <ul>
      <li>기획, 디자인, 개발, 배포(알파 단계)</li>
      <li>동아리에서 3차 까지 프로젝트 진행 현황을 발표(기획: 3월 말, 중간: 4월 초, 최종: 6월 초)하였다.</li>
      <li>나는 안드로이드, Ai(혼자)를 담당했다.</li>
    </ul>
  </li>
</ul>

<p>학교 수업과 시험 때문에 오로지 개발에 시간을 쏟을 수 있는 시간은 짧은 편이었지만, 정말 재밌고 행복하게 개발했다. 서로 코드 리뷰 하면서 의견을 나누고 코드를 고치는 등 협업이 잘 진행되었는데, 내 코드를 다른 분이 읽고 피드백을 하는 게 필요했기 때문에 이 과정에서 나의 잘못된 습관이나 코드 형태를 어느 정도 파악하고 개선할 수 있었다. 또한 내가 잘 모르는 것을 배울 수 있어 좋았다.</p>

<p>그런데 Ai 작업은 달랐다. Ai 학습 자체는 간단하지만, 다른게 문제였다. 학습 데이터는 Ai Hub에 있다는 걸 알고 기획했던 거라 지장이 없었는데, 학습할 컴퓨터가 가장 큰 문제였던 거다. 인턴 때는 초기 데이터 세트가 크지 않아서 지장이 크게 없었는데, Medilenz는 다르다. 의약품 5,000개를 분류해야 하는 Ai이기 때문에, 학습하려면 약 하나 당 최소 100장은 써야하며, 이걸 다 합치면 크기가 어마어마하다. 이런 이유로 컴퓨터 성능이 절대적으로 중요한데, 슬프게도 학습이 가능한 컴퓨터가 없어서 구글 코랩, AutoML 등 여러 방법을 시도해봤지만, 결국 만족할 만한 성과는 얻지 못했다.</p>

<p>따라서 Ai 작업은 제대로 못했고 최종 발표에서 Ai기능 시연은 당연하게도 실망적이었다. 그래도 Ai만 빼면 기획 당시 얘기했던 걸 다 구현했기에 발표는 잘 마무리했다.</p>

<ul>
  <li><strong>7월 ~ 현재</strong>
    <ul>
      <li>리팩터링, 기능 추가</li>
      <li>백엔드, Ai 작업 진행</li>
    </ul>
  </li>
</ul>

<p>학교 종강 후 7월에 다시 작업을 재개 했다.</p>

<p>다른 팀원 분들과 같이 열심히 으쌰으쌰 하며 개발했다. 나는 Ai를 어떻게든 처리해보고자 8월에 좀 싸게 컴퓨터를 샀었다. 열심히 데이터 라벨링과 수 많은 모델 별로 학습을 두 달 동안 한 결과, 60% 이상의 추론능력을 가진 Ai 모델을 마침내 구축하는데 성공했다. 컴퓨터가 좋지는 않아서 약은 2,000개 종류만 학습시켰다. 그래도 2,000개 종류의 약을 분류할 수 있는 Ai 모델을 만들었다는 것에 만족한다. 아쉽지만 몇 백만원 컴퓨터를 구입할 여력은 없었기에 어쩔수 없다.</p>

<p>그리고 백엔드 개발도 좀 해보았다. 서버가 8월 까지 <a href="https://github.com/winocreative">@winocreative</a>님의 개인 컴퓨터에서 돌아가는 상황이었다.(지난 몇 달 동안 서버를 돌릴 수 있게 해주셔서 정말 감사하다) 하지만 언제까지나 계속 그렇게 운영할 수는 없다고 생각했다. 내 컴퓨터가 아니니까.</p>

<p>그래서 한번 백엔드 개발해보는 것도 흥미로울거 같아 개발하기 시작했다. 스프링이나 노드.js를 배워서 구축하기에는 비효율적이라 생각했고, AWS를 기반으로 서버를 구축하기로 했다. 이쪽 분야는 초급 수준도 안되기 때문에 많이 어려웠다. 다행히 만들 기능이 적고 단순한거라 냈고, API Gateway에 연동하여 클라이언트와 실제 통신 하는 작업만이 남았다.</p>

<p>아직 끝나지 않았고 현재 진행형이다. 그런데도 참 많이 배우고 성장할 수 있었다. 특히 얇게 나마 백엔드, Ai를 다뤄보는 경험이 지식의 폭을 넓혀주었기 때문에 상당히 긍정적이다. 최근에 작업을 멈췄지만 곧 재개해서, 플레이스토어에 출시 하겠다.</p>

<p>Medilenz를 위해 함께 해주시는 팀원 <a href="https://github.com/tgyuuAn">@tgyuuAn</a>, <a href="https://github.com/winocreative">@winocreative</a>, <a href="https://github.com/ho-sick99">@ho-sick99</a> 세 분 모두 감사하고 리스펙을 보낸다.</p>

<h3 id="3-안드로이드-개발-스터디">3. 안드로이드 개발 스터디</h3>

<p><strong>5월 ~ 현재 진행</strong></p>

<p>항상 하고 싶었던 거였고, 마침내 시작했다.
이 스터디도 <a href="https://github.com/pknu-wap">WAP</a> 내에서 그룹을 만들어 진행하고 있다.</p>

<p>개인 블로그에 공부한 내용을 작성한 것을 매주 발표하는 식으로 진행하고 있다.</p>

<p>많은 도움이 되고 있고 정말 잘 했다고 생각한다. 내가 몰랐던 부분을 알아갈 수 있고, 코드도 참고하기 좋다. 특히 기술 내용을 얘기할 수 있는게 나에겐 참 좋은 부분이다. 이 스터디가 아니라면 다수와 코딩얘기 하는게 쉽지 않기 때문이다.</p>

<p>기술적인 내용을 공유하는 것 뿐만 아니라, 개인 발표를 한다는 것에서도 큰 힘이 된다. 공부한 내용을 말로 누군가에게 설명하는게 좋은 공부법 인데다가, 나서서 발표를 하는 경험을 하기가 쉽지 않은데 지금 경험을 쌓아갈 수 있으니 얼마나 다행인지 모르겠다. 나중에 회사나 어떠한 자리에서 발표를 하게 되는 경우에 경험이 별로 없다면 앞이 컴컴할거다.</p>

<p>스터디를 함께 한 <a href="https://github.com/jeongjaino">@jeongjaino</a>, <a href="https://github.com/tgyuuAn">@tgyuuAn</a>, <a href="https://github.com/Zepelown">@Zepelown</a>, <a href="https://github.com/Redish03">@Redish03</a>, <a href="https://github.com/SeongHoonC">@SeongHoonC</a> 다섯분 모두에게도 감사와 리스펙을 보낸다.</p>

<h3 id="4-라이브러리-배포">4. 라이브러리 배포</h3>

<p>개발하면서 외부 라이브러리 사용은 필수적이다. 어느 순간 나도 라이브러리를 만들어 배포하고 싶다는 생각이 들었다. 다른 개발자가 가져다 쓰면 고맙지만, 안쓰더라도 경험 삼아 만들어보고 싶었다. 물론 버그 덩어리면서 쓸모없는 라이브러리여서는 안된다. 이렇게 생각만 가지고 있다가 같은 동아리인 <a href="https://github.com/alstn113">@alstn113</a>님이 리액트 라이브러리를 배포하는 것을 보고 실행에 옮겼다.</p>

<ul>
  <li>배포한 건 두 개이다.
    <ul>
      <li><strong>smartdeeplink</strong>: 안드로이드 네비게이션 컴포넌트로 딥링크 이동시에 데이터 전달을 간편하게 해주는 라이브러리</li>
      <li><strong>ksealedbinding</strong>: 코틀린 sealed class 바인딩 함수를 자동으로 생성해주는 라이브러리</li>
    </ul>
  </li>
</ul>

<p>Medilenz개발 시 딥링크로 다른 모듈의 화면으로 이동할 때 네비게이션 컴포넌트를 사용했는데, 제공하는 API로는 출발지에서 도착지 화면으로 데이터를 전달하기가 까다로웠다. 그래서 이를 간편하게 해주는 라이브러리(<strong>smartdeeplink</strong>)를 만들어 배포했다.</p>

<p><strong>ksealedbinding</strong>은 코틀린 sealed class사용 시 불편함을 느꼈기 때문에 제작했다. enum의 기능을 제공하는 sealed class가 있다. 보통 부모 sealed class의 자식 클래스 별로 <strong>when, if</strong>로 분기 처리를 하여 다음 작업을 진행하게 된다. 이 때, 자식 클래스가 많아지면 분기 처리가 많아지고, 코드가 길어지는 단점이 있다.</p>

<p>이를 좀 개선해보고자 <code class="language-plaintext highlighter-rouge">@KBindFunc</code> 어노테이션을 부모 sealed class에 붙여주면, <code class="language-plaintext highlighter-rouge">on자식클래스명</code>의 이름으로 컴파일 시 자동으로 함수를 생성해주는 기능을 만들었다. 이걸 쓰면 분기문 없이 함수형으로 다음 작업을 진행할 수 있다. 이 라이브러리를 사용하면 코드가 간결해지고 가독성이 좋아진다. 따로 개인 개발 중인 앱이 있는데 잘 써먹고 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@KBindFunc</span>
<span class="k">sealed</span> <span class="kd">class</span> <span class="nc">TestSealed</span> <span class="p">{</span>
    <span class="n">data</span> <span class="kd">object</span> <span class="nc">A</span> <span class="p">:</span> <span class="nc">TestSealed</span><span class="p">()</span>
    <span class="n">data</span> <span class="kd">object</span> <span class="nc">B</span> <span class="p">:</span> <span class="nc">TestSealed</span><span class="p">()</span>
    <span class="n">data</span> <span class="kd">object</span> <span class="nc">C</span> <span class="p">:</span> <span class="nc">TestSealed</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// 적용 전</span>
<span class="k">when</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">is</span> <span class="nc">TestSealed</span><span class="p">.</span><span class="nc">A</span> <span class="p">-&gt;</span> <span class="p">{</span>
        <span class="c1">// A일 때 실행</span>
    <span class="p">}</span>
    <span class="k">is</span> <span class="nc">TestSealed</span><span class="p">.</span><span class="nc">B</span> <span class="p">-&gt;</span> <span class="p">{</span>
        <span class="c1">// B일 때 실행</span>
    <span class="p">}</span>
    <span class="k">is</span> <span class="nc">TestSealed</span><span class="p">.</span><span class="nc">C</span> <span class="p">-&gt;</span> <span class="p">{</span>
        <span class="c1">// C일 때 실행</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 적용 후, 함수형으로 사용한다</span>
<span class="n">result</span><span class="p">.</span><span class="nf">onA</span> <span class="p">{</span>
    <span class="c1">// A일 때 실행</span>
<span class="p">}.</span><span class="nf">onB</span> <span class="p">{</span>
    <span class="c1">// B일 때 실행</span>
<span class="p">}.</span><span class="nf">onC</span> <span class="p">{</span>
    <span class="c1">// C일 때 실행</span>
<span class="p">}</span>
</code></pre></div></div>

<p>라이브러리를 실제로 사용하는 지는 모르겠는데, <strong>ksealedbinding</strong>은 Github clone 기록을 보니 최소 수십명이 클론했다고 나온다. 사용자가 거의 없는 건 맞는거 같다. 하지만 아쉽거나 괜히 만들었나 싶은 생각은 전혀없는데 수요를 기대하고 개발한 게 아니라서 그렇다. 몇 달간 유기해놓아서 조만간 업데이트를 진행할 것이다. 꾸준히 관리해나가다 보면 수요는 늘지 않을까.</p>

<p><strong>smartdeeplink</strong>는 뷰에 최적화 되어 있어 컴포즈를 지원하도록 업데이트 할 예정이고,
<strong>ksealedbinding</strong>은 자식 클래스의 속성이 많아지면 간간히 컴파일 시 오류가 발생하는 문제가 있어, 오류를 해결해야 한다. 또한, 현재는 컴파일 시에 함수가 자동 생성되는데 Gradle 플러그인으로 변경해서 실시간으로 자동 함수 생성이 되도록 업데이트 할 예정이다.</p>

<h3 id="5-gdg-io-extended-devfest-컨퍼런스-참가-및-두-번의-연사-경험">5. GDG I/O Extended, Devfest 컨퍼런스 참가 및 두 번의 연사 경험</h3>

<h4 id="연사">연사</h4>

<table>
  <thead>
    <tr>
      <th style="text-align: center">WAP(11월)</th>
      <th style="text-align: center">GDSC PKNU 2023년도 2분기 TechTalk(5월)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">&lt;img src="https://github.com/pknujsp/pknujsp/assets/48265129/e2af6eda-324d-4fd4-bcf5-6651c665571f" width="auto" height="auto"&gt;</td>
      <td style="text-align: center">&lt;img src="https://github.com/pknujsp/pknujsp/assets/48265129/52fc09ed-a83b-47e3-baa8-a9f35dad18c3" width="50%"&gt;</td>
    </tr>
  </tbody>
</table>

<p>좌측부터 <strong>여러 프로그래밍 언어를 비슷한 구문과 문법에 따라 한번에 배우기</strong>, <strong>앱 아이콘 클릭부터 앱 실행까지의 여정</strong>을 주제로 발표했었다.</p>

<ul>
  <li>
    <p><strong>여러 프로그래밍 언어를 비슷한 구문과 문법에 따라 한번에 배우기</strong>: 프로그래밍 언어는 대체적으로 기본적으로 비슷한 형태를 가지고 있기 때문에, 언어를 배우면 다른 언어를 배우기가 쉬워진다는 것을 알려주고자 발표했다. 발표를 준비하면서 여러 언어들을 비교해보면서 프로그래밍 패러다임 관련한(객체지향) 부분이나 자료형 등 몇몇 영역을 제외하고는 비슷한 구조를 가지고 있음을 다시 한번 알 수 있었다. 공부할 게 많아 준비에 시간을 나름 많이 투자했는데, 개인적으로 발표를 잘 못해서 아쉽다.</p>
  </li>
  <li>
    <p><strong>앱 아이콘 클릭부터 앱 실행까지의 여정</strong>: 안드로이드 액티비티가 열리는 과정에 대한 내용이 궁금했는데, 인터넷에 관련한 자료가 거의 없어서 직접 공부해본 후 공유해보고자 발표를 하였다. 자료가 너무 없다보니 <a href="https://cs.android.com/">Android Code Search</a>에서 코드를 뒤적뒤적 하면서 공부했는데, 보다보니 안드로이드 OS 코드는 아주 정교하고 추상화가 잘 되어있다는 생각이 들었고, Zygote, Application Thread등 여러 모듈이 상호 작용하면서 앱이 실행되는 과정이 흥미로웠다. 안드로이드 개발자 공식 문서에 이런 내용이 있으면 좋겠다는 생각이 든다.</p>
  </li>
</ul>

<h4 id="gdg-songdo-devfest-gdg-io-extended">GDG Songdo Devfest, GDG I/O Extended</h4>

<table>
  <thead>
    <tr>
      <th style="text-align: center">GDG Songdo Devfest(12월)</th>
      <th style="text-align: center">GDG I/O Extended Busan(9월)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">&lt;img src="https://github.com/pknujsp/pknujsp/assets/48265129/41a3e156-47bc-4295-b608-9f232b52b209"  width="auto"&gt;</td>
      <td style="text-align: center">&lt;img src="https://github.com/pknujsp/pknujsp/assets/48265129/e9037efc-1310-4f03-a523-e44ed95f673a" width="50%"&gt;</td>
    </tr>
  </tbody>
</table>

<p>9월 <strong>I/O Extended Busan</strong>에서 현업자 분과 길게 대화하면서 많은 걸 얻어갔기 때문에, 그런 컨퍼런스를 또 한다면 꼭 가야겠다고 다짐했었다. 마침 12월에 인천에서 <strong>GDG Songdo Devfest</strong>가 열렸고, 멀지만 당일치기로 다녀왔다. 연사자 분들께 내가 평소에 궁금했던 것들을 질문하고, 답변을 들을 수 있어서 좋았다. 그리고 내 옆에는 광주광역시에서 왔다는 고등학생 분이 계셨는데 신기하면서도 대단하다고 느꼈다. 열심히 들으시는 걸 보면서 나중에 뛰어난 개발자가 될거 같았다.</p>

<p>여기를 다녀와서 여러 생각과 고민을 하게 되었다. 원래는 SSAFY, 우아한테크코스, 소프트웨어 마에스트로 등 교육 프로그램은 최대 1년의 긴 기간 동안 연수를 받아야 하니 그냥 빨리 취업하자 였는데, 같은 분야에 몸 담고 계시는 다른 분들과 얘기하고 강연을 듣고 나니, 내가 아직 한참 부족하고 멀었다는 느낌이 더 크게 들었다. 그러다보니, 내가 더 성장할 수 있는 환경에서 공부하는 것도 좋을거 같다는 생각이 들었고, 평소 알고있던 <a href="https://swmaestro.org/sw/main/main.do">소프트웨어 마에스트로</a>가 최적이라고 생각되어 여기에 합격하기 위해 준비하고 있는 상태이다. 너무 매력적이고 좋아보인다. 확실하게 여러 단계 내가 더 성장할 수 있지 않을까 싶다. 학교 다닐 때는 학교 공부 때문에 개발에 온 집중을 못했는데, 연수 기간 동안에는 집중이 가능할테니 기대된다.</p>

<p><strong><em>하지만 취업 준비는 여전히 하고 있다.</em></strong></p>

<h3 id="6-알고리즘-스터디">6. 알고리즘 스터디</h3>

<p><strong>10월 ~ 현재 진행</strong></p>

<p>평소에 코딩 테스트를 위해 알고리즘 문제 풀이를 하고 있었는데, 어려운 문제는 맞춰도 내가 괜찮게 푼건지를 잘 모르겠어서 같이 풀이를 공유하고 서로 피드백을 주고받으면서 성장할 수 있는 스터디를 하고 싶었다.</p>

<p>마침 동아리 내에서 스터디를 할 수 있게 되어서 현재까지 계속 진행 하고 있다.</p>

<p>문제 풀이를 공유하고 리뷰를 하고, 받아가면서 점점 실력이 향상 됨을 느끼고 있다. 요즘 코딩 테스트가 워낙 중요하다보니 걱정이 앞서는데, 스터디로 자신감이 점점 붙고 있다.</p>

<h2 id="그래서-2024년은-어떻게-보낼까">그래서, 2024년은 어떻게 보낼까</h2>

<p>현재로서는 앱 개발, 알고리즘 문제 풀이 이 두 개가 최우선이다.</p>

<p>빠른 시일 내로 앱을 출시해서, 포트폴리오를 추가하고자 한다.</p>

<p>알고리즘 문제 풀이는 점점 난이도를 올려서 실전에서도 흔들리지 않고 풀어낼 수 있게 준비해야 겠다.</p>

<p>취업은 걱정이 안되면 좋겠지만, 걱정이 된다. 근데 걱정이 되는게 사람으로서 당연한거라고 생각한다. 안되는게 신기한거다. 내가 할 수 있는 만큼 다 해보고, 더 노력해보자. 보니까 다른 사람들도 다 비슷한 상태인 거 같다. 개발에 미치고 성장을 갈망하자.</p>]]></content><author><name>Junsung Park</name></author><category term="Private" /><category term="Private" /><summary type="html"><![CDATA[2023년의 마지막이 코 앞으로 다가온 현재, 올해 내가 했던(지금까지도 하고 있는) 일들과 그 과정에서 느끼고 생각하며 배운 점을 정리하여 2024년을 어떻게 살아갈지 작성해보고자 한다.]]></summary></entry><entry><title type="html">코틀린 코루틴을 활용해 데이터 메모리 캐시 기능 구현하기</title><link href="https://pknujsp.github.io//jekyll-theme-yat/kotlin/2023/12/10/%EC%BD%94%ED%8B%80%EB%A6%B0-%EC%BD%94%EB%A3%A8%ED%8B%B4%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%BA%90%EC%8B%9C-%EA%B4%80%EB%A6%AC-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="코틀린 코루틴을 활용해 데이터 메모리 캐시 기능 구현하기" /><published>2023-12-10T00:00:00+09:00</published><updated>2023-12-10T00:00:00+09:00</updated><id>https://pknujsp.github.io//jekyll-theme-yat/kotlin/2023/12/10/%EC%BD%94%ED%8B%80%EB%A6%B0%20%EC%BD%94%EB%A3%A8%ED%8B%B4%EC%9D%84%20%ED%99%9C%EC%9A%A9%ED%95%B4%20%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EC%BA%90%EC%8B%9C%20%EA%B4%80%EB%A6%AC%20%EA%B8%B0%EB%8A%A5%20%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0</id><content type="html" xml:base="https://pknujsp.github.io//jekyll-theme-yat/kotlin/2023/12/10/%EC%BD%94%ED%8B%80%EB%A6%B0-%EC%BD%94%EB%A3%A8%ED%8B%B4%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%BA%90%EC%8B%9C-%EA%B4%80%EB%A6%AC-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0.html"><![CDATA[<h2 id="구현-목적">구현 목적</h2>

<p>앱을 제작하면서 온라인에서 가져온 데이터를 메모리에 캐싱해야 할 필요가 있었다. 그 이유는 해당 데이터의 서버 상에서 업데이트 주기가 수 십분 ~ 수 시간 단위로 긴데, 이 데이터를 짧은 간격으로 다시 중복으로 가져오는 것은 비효율적이기 때문이다. 그래서 메모리에 캐싱하는 기능을 만들었고 효율성을 개선할 수 있었다.</p>

<h3 id="비효율적인-기존-방식">비효율적인 기존 방식</h3>

<blockquote>
  <p>총 세 가지의 지역(A, B, C)에 대해서 대기질 데이터를 가져오는 기능을 구현했다고 가정하였다.</p>
</blockquote>

<p><img src="https://github.com/pknujsp/pknujsp/assets/48265129/13abad16-bc5c-46f3-867a-bc90aee5daa7" alt="비효율적인 기존 방식" /></p>

<ul>
  <li>흐름
    <ol>
      <li>A의 대기질 데이터를 로드</li>
      <li>B 정보 화면으로 전환 -&gt; B의 대기질 데이터를 로드</li>
      <li>A 정보 화면으로 재 전환 -&gt; A의 대기질 데이터를 로드</li>
      <li>C 정보 화면으로 전환 -&gt; C의 대기질 데이터를 로드</li>
      <li>A 정보 화면으로 재 전환 -&gt; A의 대기질 데이터를 로드</li>
    </ol>
  </li>
</ul>

<p>20초간 A의 데이터를 3번 로드하였고, 이 시간동안 서버 상에서 데이터가 갱신되지 않았다면 중복된 데이터를 2번 불러오게 된다. 만약 업데이트 주기가 길고, 화면 전환이 잦다면 위와 같은 상황은 빈번하게 발생할 것이다.</p>

<p>최근에 날씨 앱을 제작하고 있는데, 여러 부분에서 이런 상황이 발생하였다.</p>

<ul>
  <li>화면을 전환하였다가 다시 돌아왔을때 데이터를 다시 불러옴(짧은 주기)
    <ul>
      <li>날씨 정보 화면 -&gt; 앱 설정 화면 -&gt; 날씨 정보 화면</li>
    </ul>
  </li>
  <li>같은 지역의 데이터를 비슷한 시점에 다른 기능 구현을 위해 불러옴
    <ul>
      <li>위젯, 알림, 앱 날씨 화면이 거의 동시에 업데이트 되는 경우</li>
      <li>계속 최신 데이터만 받아온다면, 최악의 경우 같은 데이터를 수십번 동시다발적으로 불러올 수도 있다.</li>
    </ul>
  </li>
  <li>예보 비교 화면(시간별, 일별)
    <ul>
      <li>예를 들어, A지역의 시간별 예보를 불러온지 몇초 밖에 지나지 않은 상태에서 여러 날씨 제공사의 예보를 비교하려고 한다면, 같은 제공사의 데이터를 다시 불러올 수도 있다.</li>
    </ul>
  </li>
</ul>

<p>다수의 문제점이 발생하였고, 데이터를 좀더 효율적으로 관리할 필요가 있었다. 그래서 코틀린 코루틴을 활용하여 데이터를 관리하는 기능을 구현하였다.</p>

<p><strong>!이러한 상황이 무조건 비효율적이라고 정답을 내릴 수는 없다. 만약 업데이트 주기가 아주 짧으면서, 최신 데이터만을 UI에 보여주려고 한다면 위와 같은 방식을 사용하는 것이 더 나을 수도 있다.</strong></p>

<h3 id="구현-방식">구현 방식</h3>

<h4 id="코루틴">코루틴</h4>

<p>앱에서 코루틴을 사용하여 비동기 로직을 처리하고 있기 때문에, 코루틴으로 구현하였다.</p>

<h4 id="캐시-관리">캐시 관리</h4>

<ul>
  <li>캐시 시간 제한</li>
  <li>Lru Cache</li>
</ul>

<p><strong>캐시 시간 제한</strong></p>

<p>캐시 기능이 필요한 이유이기 때문에, 가장 우선적으로 구현하였다.</p>

<p>서버에서 데이터를 가져와서 캐시에 저장할 때, 데이터의 유효 시간을 함께 저장한다. 이후 캐시를 불러올 때 현재 시간과 캐시의 유효 시간을 비교하여 캐시가 유효한지 확인한다. 만약 유효하지 않다면, 다시 서버에서 데이터를 가져와서 캐시에 저장한다.</p>

<p><strong>Lru Cache</strong></p>

<p>설계시 미처 고려하지 못한 것으로, 한창 구현하다가 저장된 캐시의 크기가 너무 커지는 문제가 발생할 수 있음을 깨달았다.</p>

<p>이를 해결하기 위해 Lru Cache를 사용하였다. Lru Cache는 가장 오랫동안 사용되지 않은 데이터를 삭제하는 캐시 관리 기법이며, 저장할 캐시의 최대 개수(크기)를 지정할 수 있다.</p>

<ul>
  <li>예를 들어, 최대 크기를 3으로 지정하였을 때, 4번째로 캐시가 추가될 때 1번째로 추가된 캐시는 삭제된다.</li>
</ul>

<p>Lru Cache에 대해선 이전에 작성한 포스팅 <a href="https://pknujsp.github.io/android/2023/08/13/androidx.collection-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0(SparseArray,-ArrayMap,-LruCache-/).html#h-lrucacheleast-recently-used-cache">ArrayMap, SparseArray, LruCache에 대해서 알아보기</a> 을 참고하면 도움이 될 것이다.</p>

<h4 id="데이터-동기화">데이터 동기화</h4>

<p>여러 스레드에서 동시에 캐시에 접근할 수 있기 때문에, 데이터 동기화를 해주어야 한다.</p>

<p>가장 중요한 부분, 섬세한 로직이 요구되었다.</p>

<ul>
  <li>적용해본 동기화 방식
    <ul>
      <li>Mutex, Synchronized</li>
      <li>ConcurrentHashMap</li>
      <li>ReentrantReadWriteLock</li>
      <li>Actor</li>
    </ul>
  </li>
</ul>

<p>여러 방식으로 테스트 해보면서 Actor로 최종 구현하였다. 이 과정에서 코루틴의 동작 방식에 대해 더욱 깊게 이해할 수 있었다.</p>

<p><strong>1. Mutex, Synchronized</strong></p>

<p>제일 먼저 적용한 기법이다.</p>

<p>Mutex는 Mutual Exclusion의 약자로 상호 배제를 의미한다. 임계 구역을 만들고 그 구역을 통해서 스레드가 데이터에 접근한 뒤 구역을 잠궈서, 다른 스레드는 접근할 수 없도록 막는 기법이다.</p>

<p>스레드 A, B가 동시에 어떤 로직을 시작하려고 할 때, A가 먼저 시작하면 B는 A가 끝낼 때 까지 그 로직 수행을 못하고, A가 작업을 끝내야만 B가 수행할 수 있다. Synchrnoized도 이와 유사하다.</p>

<p>예를 들어, <code class="language-plaintext highlighter-rouge">Map</code>을 Mutex 또는 Synchronized로 동기화하면, 그 Map은 동시에 하나의 스레드만 다룰수 있기 때문에, 데이터 동기화가 보장되는 것이다.</p>

<p><strong>Mutex, Synchronized의 차이</strong></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">Mutex</th>
      <th style="text-align: center">Synchronized</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">동작 기반</td>
      <td style="text-align: center">프로그램 구동 플랫폼, 코루틴에 최적화</td>
      <td style="text-align: center">JVM</td>
    </tr>
    <tr>
      <td style="text-align: center">소유권</td>
      <td style="text-align: center">접근하는 스레드가 잠그고,해제하는 소유권을 가짐</td>
      <td style="text-align: center">소유 개념이 없음</td>
    </tr>
    <tr>
      <td style="text-align: center">잠금해제 대기 방식</td>
      <td style="text-align: center">코루틴 동작을 일시중지</td>
      <td style="text-align: center">스레드 동작을 일시중지</td>
    </tr>
    <tr>
      <td style="text-align: center">재진입</td>
      <td style="text-align: center">불가능, 스레드 A가 Mutex를 잠그고 다시 Mutex를 접근하면 그대로 무한 대기에 빠질 수 있음</td>
      <td style="text-align: center">가능, 한 스레드가 Synchronized에 접근한 상태에서 다시 Synchronized하더라도 문제없이 그대로 접근가능</td>
    </tr>
  </tbody>
</table>

<p>잠금해제를 대기하는 방식에서 확실한 차이가 있다.</p>

<ul>
  <li>Mutex : 대기하는 동안 다른 작업 가능, 코루틴에 최적화되어 있어 대기하는 동안 다른 코루틴으로 작업을 넘길 수 있다.</li>
  <li>Synchronized : 대기하는 동안 다른 작업 불가능</li>
</ul>

<p>하나의 칸만 있는 화장실이 있는 상황으로 비교해보자면 다음과 같다.</p>

<ul>
  <li>Mutex : 다른 사람이 나올때 까지 기다리는 동안, 휴대폰을 보는 등 다른 작업을 할 수 있다.</li>
  <li>Synchronized : 기다리는 동안 아무것도 못한다. 휴대폰도 없고 뭐도 못한다. 그냥 기다린다.</li>
</ul>

<p><strong>2. ConcurrentHashMap</strong></p>

<p>우리가 직접 따로 임계 구역을 만들어 동기화 할 필요없이 자체적으로 동기화를 지원하는 Map이다.</p>

<p>Map을 예로 들어, Mutex, Synchronized로 임계 구역을 통해 동기화를 하게 되면 Map전체에 대해서 다른 스레드는 접근할 수 없게 된다. 하지만 ConcurrentHashMap은 Map의 일부분만 잠그고, 나머지 부분은 다른 스레드가 접근할 수 있게 해준다.</p>

<p>Map의 key로 1, 2가 있을 때</p>

<ul>
  <li>Mutex, Synchronized 를 쓴다면, 1에 대한 작업을 하고 있는 동안 2에 대한 작업을 할 수 없다.</li>
  <li>ConcurrentHashMap을 쓴다면, 1에 대한 작업을 하고 있는 동안 2에 대한 작업을 할 수 있다.</li>
</ul>

<p><strong>3. ReentrantReadWriteLock</strong></p>

<p>ReentrantReadWriteLock은 Mutex와 Synchronized와 다르게, 읽기와 쓰기 각각에 대해 잠금을 걸 수 있다. 즉, 읽기 잠금과 쓰기 잠금을 따로 걸 수 있다.</p>

<ul>
  <li>쓰기 잠금을 걸었다면 다른 스레드는 읽기와 쓰기 모두 불가능하다.</li>
  <li>읽기 잠금을 걸었더라도 다른 키로 접근한다면 읽을 수 있다.</li>
</ul>

<p><strong>4. Actor</strong></p>

<p>Actor Model 패턴으로 동기화를 구현하는 방법이다. <a href="https://syntaxsugar.tistory.com/entry/Actor%EC%95%A1%ED%84%B0">Concurrency with Actor Model(행위자 모델)</a> 페이지에 상세히 정리되어 있어 추가로 참조하면 도움이 될 것이다.</p>

<p><img src="https://github.com/pknujsp/pknujsp/assets/48265129/38bcc74a-a78c-4762-9324-5665e9cfcfd5" alt="제목 없는 다이어그램-페이지-3" /></p>

<p>특정 기능을 전문적으로 수행하는 기능을 하는 것이 Actor이다. 외부에서 Actor에게 메시지를 보내면, Actor는 메시지를 처리하고 결과를 다시 보내준다.</p>

<p>하나의 Actor는 동시에 작업을 수행하지 않고 동기적으로 하나씩 처리하기 때문에, 데이터 동기화가 보장된다.</p>

<p>액터 모델 패턴을 실생활로 비유하자면, 액터는 어떤 특정한 기능을 전문적으로 수행하는 사람이다. 다른 사람은 이 사람과 메시지 채팅으로 소통을 할 수 있다.</p>

<ul>
  <li>특징
    <ul>
      <li>작업을 메시지를 받는 순서대로 처리한다. (메시지 큐)</li>
      <li>순서대로 처리하므로 별도의 동기화를 해줄 필요가 없다.</li>
      <li>메시지 별로 분기하여 독립적인 작업을 수행하기 때문에, 다른 방식 대비 코드가 더 직관적이고 간결하다.</li>
    </ul>
  </li>
</ul>

<h3 id="최종-구현-방식">최종 구현 방식</h3>

<p><strong>Actor</strong>, 여러 방식을 적용해보면서, 개인적으로 코드가 가장 직관적이면서 관리하기 편했고 코루틴에 최적화 되어 있어 이를 선택했다.</p>

<p><strong>! 가장 좋은 방식을 뽑는다면 정답이 없다고 할 수 있다.</strong></p>

<h2 id="구현-코드">구현 코드</h2>

<h3 id="cachemanager">CacheManager</h3>

<p>캐시 관리 기능을 담당하는 클래스이다. 캐시를 저장하고, 불러오고, 삭제하는 기능을 제공한다.</p>

<ul>
  <li>defaultCacheExpiryTime : 캐시의 기본 유효 시간</li>
  <li>cleaningInterval : 캐시 정리 주기</li>
  <li>cacheMaxSize : 캐시 최대 개수</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">abstract</span> <span class="kd">class</span> <span class="nc">CacheManager</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;(</span>
    <span class="k">protected</span> <span class="kd">val</span> <span class="py">defaultCacheExpiryTime</span><span class="p">:</span> <span class="nc">Long</span><span class="p">,</span>
    <span class="k">protected</span> <span class="kd">val</span> <span class="py">cleaningInterval</span><span class="p">:</span> <span class="nc">Long</span><span class="p">,</span>
    <span class="k">protected</span> <span class="kd">val</span> <span class="py">cacheMaxSize</span><span class="p">:</span> <span class="nc">Int</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="k">abstract</span> <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nc">K</span><span class="p">):</span> <span class="nc">CacheState</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;</span>

    <span class="k">abstract</span> <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">remove</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nc">K</span><span class="p">):</span> <span class="nc">Boolean</span>

    <span class="k">abstract</span> <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">put</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nc">K</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="nc">V</span><span class="p">,</span> <span class="n">cacheExpiryTime</span><span class="p">:</span> <span class="nc">Long</span> <span class="p">=</span> <span class="n">defaultCacheExpiryTime</span><span class="p">)</span>

    <span class="k">abstract</span> <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">entries</span><span class="p">():</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">Pair</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">Cache</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;&gt;&gt;</span>

    <span class="k">sealed</span> <span class="kd">interface</span> <span class="nc">CacheState</span><span class="p">&lt;</span><span class="k">out</span> <span class="nc">V</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="kd">data class</span> <span class="nc">Hit</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;(</span><span class="kd">val</span> <span class="py">value</span><span class="p">:</span> <span class="nc">V</span><span class="p">)</span> <span class="p">:</span> <span class="nc">CacheState</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;</span>
        <span class="n">data</span> <span class="kd">object</span> <span class="nc">Miss</span> <span class="p">:</span> <span class="nc">CacheState</span><span class="p">&lt;</span><span class="nc">Nothing</span><span class="p">&gt;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="cachecleaner">CacheCleaner</h3>

<p>코루틴 작업으로 에약되어 설정한 주기마다 자동으로 만료된 캐시를 정리하는 기능을 on/off 할 수 있는 인터페이스이다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">CacheCleaner</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">start</span><span class="p">()</span>
    <span class="k">fun</span> <span class="nf">stop</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="cache">Cache</h3>

<p>Map으로 키와 함께 저장되는 캐시 값이다.</p>

<ul>
  <li>value : 캐시 값</li>
  <li>cacheExpiryTime : 캐시 유효 시간</li>
  <li>addedTime : 캐시 추가 시간</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">Cache</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;(</span>
    <span class="kd">val</span> <span class="py">value</span><span class="p">:</span> <span class="nc">V</span><span class="p">,</span> <span class="kd">val</span> <span class="py">cacheExpiryTime</span><span class="p">:</span> <span class="nc">Long</span><span class="p">,</span> <span class="kd">val</span> <span class="py">addedTime</span><span class="p">:</span> <span class="nc">Long</span> <span class="p">=</span> <span class="nc">System</span><span class="p">.</span><span class="nf">currentTimeMillis</span><span class="p">()</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">isExpired</span><span class="p">(</span><span class="n">now</span><span class="p">:</span> <span class="nc">Long</span> <span class="p">=</span> <span class="nc">System</span><span class="p">.</span><span class="nf">currentTimeMillis</span><span class="p">()):</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="n">now</span> <span class="p">-</span> <span class="n">addedTime</span> <span class="p">&gt;</span> <span class="n">cacheExpiryTime</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="cachemanagerimpl실제-구현체">CacheManagerImpl(실제 구현체)</h3>

<p>위 추상클래스와 인터페이스를 구현한 클래스이다.</p>

<ul>
  <li>cacheExpiryTime : 캐시의 기본 유효 시간</li>
  <li>cleaningInterval : 캐시 정리 주기</li>
  <li>cacheMaxSize : 캐시 최대 개수</li>
  <li>dispatcher : 코루틴 디스패처</li>
  <li>cacheActor : 캐시 관리 기능을 담당하는 Actor</li>
  <li>isCacheCleanerRunning : 캐시 정리 작업이 실행중인지 여부</li>
  <li>waitTimeForCacheCleaning : 캐시 정리 작업이 실행중일 때, 대기할 시간</li>
  <li>cacheCleanerJob : 캐시 정리 코루틴 작업</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">CacheManagerImpl</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;(</span>
    <span class="n">cacheExpiryTime</span><span class="p">:</span> <span class="nc">Duration</span> <span class="p">=</span> <span class="nc">Duration</span><span class="p">.</span><span class="nf">ofMinutes</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span>
    <span class="n">cleaningInterval</span><span class="p">:</span> <span class="nc">Duration</span> <span class="p">=</span> <span class="nc">Duration</span><span class="p">.</span><span class="nf">ofMinutes</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span>
    <span class="n">cacheMaxSize</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">10</span><span class="p">,</span>
    <span class="n">dispatcher</span><span class="p">:</span> <span class="nc">CoroutineDispatcher</span>
<span class="p">)</span> <span class="p">:</span> <span class="nc">CacheManager</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;(</span><span class="n">cacheExpiryTime</span><span class="p">.</span><span class="nf">toMillis</span><span class="p">(),</span> <span class="n">cleaningInterval</span><span class="p">.</span><span class="nf">toMillis</span><span class="p">(),</span> <span class="n">cacheMaxSize</span><span class="p">),</span> <span class="nc">CacheCleaner</span><span class="p">,</span>
    <span class="nc">CoroutineScope</span> <span class="k">by</span> <span class="nc">CoroutineScope</span><span class="p">(</span><span class="n">dispatcher</span><span class="p">)</span> <span class="p">{</span>

    <span class="k">private</span> <span class="kd">val</span> <span class="py">cacheActor</span> <span class="p">=</span> <span class="nf">cacheManagerActor</span><span class="p">()</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">isCacheCleanerRunning</span> <span class="p">=</span> <span class="nc">AtomicBoolean</span><span class="p">(</span><span class="k">false</span><span class="p">)</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">waitTimeForCacheCleaning</span> <span class="p">=</span> <span class="mi">20L</span>
    <span class="k">private</span> <span class="kd">var</span> <span class="py">cacheCleanerJob</span><span class="p">:</span> <span class="nc">Job</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>

    <span class="nf">init</span> <span class="p">{</span>
        <span class="nf">start</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">start</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">cacheCleanerJob</span><span class="o">?.</span><span class="n">isActive</span> <span class="p">==</span> <span class="k">true</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span>
        <span class="p">}</span>

        <span class="n">cacheCleanerJob</span> <span class="p">=</span> <span class="nf">launch</span><span class="p">(</span><span class="nc">SupervisorJob</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
                <span class="nf">delay</span><span class="p">(</span><span class="n">cleaningInterval</span><span class="p">)</span>

                <span class="n">isCacheCleanerRunning</span><span class="p">.</span><span class="nf">getAndSet</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>

                <span class="kd">val</span> <span class="py">response</span> <span class="p">=</span> <span class="nc">CompletableDeferred</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">&gt;()</span>
                <span class="n">cacheActor</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nc">CacheMessage</span><span class="p">.</span><span class="nc">Clear</span><span class="p">(</span><span class="n">response</span><span class="p">))</span>
                <span class="n">response</span><span class="p">.</span><span class="nf">await</span><span class="p">()</span>

                <span class="n">isCacheCleanerRunning</span><span class="p">.</span><span class="nf">getAndSet</span><span class="p">(</span><span class="k">false</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">stop</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">launch</span> <span class="p">{</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">isCacheCleanerRunning</span><span class="p">.</span><span class="k">get</span><span class="p">())</span> <span class="p">{</span>
                <span class="nf">delay</span><span class="p">(</span><span class="n">waitTimeForCacheCleaning</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="n">cacheCleanerJob</span><span class="o">?.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="n">cacheCleanerJob</span> <span class="p">=</span> <span class="k">null</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nc">K</span><span class="p">):</span> <span class="nc">CacheState</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">response</span> <span class="p">=</span> <span class="nc">CompletableDeferred</span><span class="p">&lt;</span><span class="nc">CacheState</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;&gt;()</span>
        <span class="n">cacheActor</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nc">CacheMessage</span><span class="p">.</span><span class="nc">Get</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">response</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">response</span><span class="p">.</span><span class="nf">await</span><span class="p">()</span>
    <span class="p">}</span>


    <span class="k">override</span> <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">put</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nc">K</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="nc">V</span><span class="p">,</span> <span class="n">cacheExpiryTime</span><span class="p">:</span> <span class="nc">Long</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cacheActor</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nc">CacheMessage</span><span class="p">.</span><span class="nc">Put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">cacheExpiryTime</span><span class="p">))</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">remove</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nc">K</span><span class="p">):</span> <span class="nc">Boolean</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">response</span> <span class="p">=</span> <span class="nc">CompletableDeferred</span><span class="p">&lt;</span><span class="nc">Boolean</span><span class="p">&gt;()</span>
        <span class="n">cacheActor</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nc">CacheMessage</span><span class="p">.</span><span class="nc">Remove</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">response</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">response</span><span class="p">.</span><span class="nf">await</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">entries</span><span class="p">():</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">Pair</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">Cache</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;&gt;&gt;</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">response</span> <span class="p">=</span> <span class="nc">CompletableDeferred</span><span class="p">&lt;</span><span class="nc">List</span><span class="p">&lt;</span><span class="nc">Pair</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">Cache</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;&gt;&gt;&gt;()</span>
        <span class="n">cacheActor</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nc">CacheMessage</span><span class="p">.</span><span class="nc">Entries</span><span class="p">(</span><span class="n">response</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">response</span><span class="p">.</span><span class="nf">await</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="nd">@OptIn</span><span class="p">(</span><span class="nc">ObsoleteCoroutinesApi</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
    <span class="k">private</span> <span class="k">fun</span> <span class="nc">CoroutineScope</span><span class="p">.</span><span class="nf">cacheManagerActor</span><span class="p">(</span>
    <span class="p">)</span> <span class="p">=</span> <span class="n">actor</span><span class="p">&lt;</span><span class="nc">CacheMessage</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;&gt;(</span><span class="n">start</span> <span class="p">=</span> <span class="nc">CoroutineStart</span><span class="p">.</span><span class="nc">LAZY</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">cacheMap</span> <span class="p">=</span> <span class="nc">LruCache</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">Cache</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;&gt;(</span><span class="n">cacheMaxSize</span><span class="p">)</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">msg</span> <span class="k">in</span> <span class="n">channel</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">msg</span><span class="p">.</span><span class="nf">process</span><span class="p">(</span><span class="n">cacheMap</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">sealed</span> <span class="kd">interface</span> <span class="nc">CacheMessage</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">fun</span> <span class="nf">process</span><span class="p">(</span><span class="n">cacheMap</span><span class="p">:</span> <span class="nc">LruCache</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">Cache</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;&gt;)</span>

        <span class="kd">data class</span> <span class="nc">Put</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;(</span><span class="kd">val</span> <span class="py">key</span><span class="p">:</span> <span class="nc">K</span><span class="p">,</span> <span class="kd">val</span> <span class="py">value</span><span class="p">:</span> <span class="nc">V</span><span class="p">,</span> <span class="kd">val</span> <span class="py">expiryTime</span><span class="p">:</span> <span class="nc">Long</span><span class="p">)</span> <span class="p">:</span> <span class="nc">CacheMessage</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;</span> <span class="p">{</span>
            <span class="k">override</span> <span class="k">fun</span> <span class="nf">process</span><span class="p">(</span><span class="n">cacheMap</span><span class="p">:</span> <span class="nc">LruCache</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">Cache</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;&gt;)</span> <span class="p">{</span>
                <span class="n">cacheMap</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nc">Cache</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">expiryTime</span><span class="p">))</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="kd">data class</span> <span class="nc">Remove</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;(</span><span class="kd">val</span> <span class="py">key</span><span class="p">:</span> <span class="nc">K</span><span class="p">,</span> <span class="kd">val</span> <span class="py">response</span><span class="p">:</span> <span class="nc">CompletableDeferred</span><span class="p">&lt;</span><span class="nc">Boolean</span><span class="p">&gt;)</span> <span class="p">:</span> <span class="nc">CacheMessage</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;</span> <span class="p">{</span>
            <span class="k">override</span> <span class="k">fun</span> <span class="nf">process</span><span class="p">(</span><span class="n">cacheMap</span><span class="p">:</span> <span class="nc">LruCache</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">Cache</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;&gt;)</span> <span class="p">{</span>
                <span class="n">response</span><span class="p">.</span><span class="nf">complete</span><span class="p">(</span><span class="n">cacheMap</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="kd">data class</span> <span class="nc">Clear</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;(</span><span class="kd">val</span> <span class="py">response</span><span class="p">:</span> <span class="nc">CompletableDeferred</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">&gt;)</span> <span class="p">:</span> <span class="nc">CacheMessage</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;</span> <span class="p">{</span>
            <span class="k">override</span> <span class="k">fun</span> <span class="nf">process</span><span class="p">(</span><span class="n">cacheMap</span><span class="p">:</span> <span class="nc">LruCache</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">Cache</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;&gt;)</span> <span class="p">{</span>
                <span class="kd">val</span> <span class="py">now</span> <span class="p">=</span> <span class="nc">System</span><span class="p">.</span><span class="nf">currentTimeMillis</span><span class="p">()</span>
                <span class="kd">var</span> <span class="py">removedCount</span> <span class="p">=</span> <span class="mi">0</span>
                <span class="n">cacheMap</span><span class="p">.</span><span class="nf">snapshot</span><span class="p">().</span><span class="nf">forEach</span> <span class="p">{</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">cache</span><span class="p">)</span> <span class="p">-&gt;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">cache</span><span class="p">.</span><span class="nf">isExpired</span><span class="p">(</span><span class="n">now</span><span class="p">))</span> <span class="p">{</span>
                        <span class="n">cacheMap</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
                        <span class="n">removedCount</span><span class="p">++</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="n">response</span><span class="p">.</span><span class="nf">complete</span><span class="p">(</span><span class="n">removedCount</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="kd">data class</span> <span class="nc">Get</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;(</span>
            <span class="kd">val</span> <span class="py">key</span><span class="p">:</span> <span class="nc">K</span><span class="p">,</span> <span class="kd">val</span> <span class="py">response</span><span class="p">:</span> <span class="nc">CompletableDeferred</span><span class="p">&lt;</span><span class="nc">CacheState</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;&gt;</span>
        <span class="p">)</span> <span class="p">:</span> <span class="nc">CacheMessage</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;</span> <span class="p">{</span>
            <span class="k">override</span> <span class="k">fun</span> <span class="nf">process</span><span class="p">(</span><span class="n">cacheMap</span><span class="p">:</span> <span class="nc">LruCache</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">Cache</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;&gt;)</span> <span class="p">{</span>
                <span class="kd">val</span> <span class="py">cacheState</span> <span class="p">=</span> <span class="n">cacheMap</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">?.</span><span class="nf">run</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="nf">isExpired</span><span class="p">())</span> <span class="p">{</span>
                        <span class="nc">CacheState</span><span class="p">.</span><span class="nc">Miss</span>
                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                        <span class="nc">CacheState</span><span class="p">.</span><span class="nc">Hit</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">}</span> <span class="o">?:</span> <span class="nf">run</span> <span class="p">{</span>
                    <span class="nc">CacheState</span><span class="p">.</span><span class="nc">Miss</span>
                <span class="p">}</span>
                <span class="n">response</span><span class="p">.</span><span class="nf">complete</span><span class="p">(</span><span class="n">cacheState</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="kd">data class</span> <span class="nc">Entries</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;(</span>
            <span class="kd">val</span> <span class="py">response</span><span class="p">:</span> <span class="nc">CompletableDeferred</span><span class="p">&lt;</span><span class="nc">List</span><span class="p">&lt;</span><span class="nc">Pair</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">Cache</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;&gt;&gt;&gt;</span>
        <span class="p">)</span> <span class="p">:</span> <span class="nc">CacheMessage</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;</span> <span class="p">{</span>
            <span class="k">override</span> <span class="k">fun</span> <span class="nf">process</span><span class="p">(</span><span class="n">cacheMap</span><span class="p">:</span> <span class="nc">LruCache</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">Cache</span><span class="p">&lt;</span><span class="nc">V</span><span class="p">&gt;&gt;)</span> <span class="p">{</span>
                <span class="n">response</span><span class="p">.</span><span class="nf">complete</span><span class="p">(</span><span class="n">cacheMap</span><span class="p">.</span><span class="nf">snapshot</span><span class="p">().</span><span class="nf">map</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">key</span> <span class="n">to</span> <span class="n">it</span><span class="p">.</span><span class="n">value</span> <span class="p">})</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<h4 id="actor">Actor</h4>

<p>코루틴 스코프 내에서 Actor를 생성하였다.</p>

<p>CacheManagerImpl 인스턴스의 생명주기(앱 실행 ~ 종료)와 동일하다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">fun</span> <span class="nc">CoroutineScope</span><span class="p">.</span><span class="nf">cacheManagerActor</span><span class="p">(</span>
    <span class="p">)</span> <span class="p">=</span> <span class="n">actor</span><span class="p">&lt;</span><span class="nc">CacheMessage</span><span class="p">&lt;</span><span class="nc">K</span><span class="p">,</span> <span class="nc">V</span><span class="p">&gt;&gt;(</span><span class="n">start</span> <span class="p">=</span> <span class="nc">CoroutineStart</span><span class="p">.</span><span class="nc">LAZY</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>가능한 작업
    <ul>
      <li>Get : 캐시를 불러온다.</li>
      <li>Put : 캐시를 저장한다.</li>
      <li>Remove : 캐시를 삭제한다.</li>
      <li>Clear : 캐시를 모두 삭제한다.</li>
      <li>Entries : 캐시를 모두 불러온다.</li>
    </ul>
  </li>
</ul>

<h4 id="cachecleanerjob-캐시-자동-정리기">cacheCleanerJob, 캐시 자동 정리기</h4>

<p>캐시 매니저를 사용할 떄 수동으로 캐시 정리 코드를 만드는 수고를 덜기 위해, 캐시 자동 정리기를 구현하였다.</p>

<p><code class="language-plaintext highlighter-rouge">cleaningInterval</code> 주기마다 캐시 정리 작업을 Actor에게 요청한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cacheCleanerJob</span> <span class="p">=</span> <span class="nf">launch</span><span class="p">(</span><span class="nc">SupervisorJob</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">delay</span><span class="p">(</span><span class="n">cleaningInterval</span><span class="p">)</span>

        <span class="n">isCacheCleanerRunning</span><span class="p">.</span><span class="nf">getAndSet</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>

        <span class="kd">val</span> <span class="py">response</span> <span class="p">=</span> <span class="nc">CompletableDeferred</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">&gt;()</span>
        <span class="n">cacheActor</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nc">CacheMessage</span><span class="p">.</span><span class="nc">Clear</span><span class="p">(</span><span class="n">response</span><span class="p">))</span>
        <span class="n">response</span><span class="p">.</span><span class="nf">await</span><span class="p">()</span>

        <span class="n">isCacheCleanerRunning</span><span class="p">.</span><span class="nf">getAndSet</span><span class="p">(</span><span class="k">false</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="캐시-클리너-onoff">캐시 클리너 on/off</h4>

<p>앱에서 캐시 클리너를 on/off 할 수 있도록 구현하였다.</p>

<p>앱이 닫힌 상태라면 캐시 클리너를 굳이 실행할 필요가 없기 때문에, 앱이 닫힌 상태(액티비티 onStop)가 될 때 코루틴 작업을 취소시키고, 다시 앱이 실행될 때(액티비티 onRestart) 코루틴 작업을 다시 시작한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="k">fun</span> <span class="nf">stop</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">launch</span> <span class="p">{</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">isCacheCleanerRunning</span><span class="p">.</span><span class="k">get</span><span class="p">())</span> <span class="p">{</span>
            <span class="nf">delay</span><span class="p">(</span><span class="n">waitTimeForCacheCleaning</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="n">cacheCleanerJob</span><span class="o">?.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="n">cacheCleanerJob</span> <span class="p">=</span> <span class="k">null</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">stop()</code>을 호출하면 <code class="language-plaintext highlighter-rouge">cacheCleanerJob</code>을 취소시키는데, 만약 캐시 정리를 진행 중이라면 캐시 정리 작업이 끝날 때 까지 대기한다.</p>

<p>대기하다가 캐시 정리가 끝나면 그때 <code class="language-plaintext highlighter-rouge">cacheCleanerJob</code>을 취소시킨다.</p>

<p>캐시 정리 작업 진행여부를 확실하게 동기화 시키기 위해 <code class="language-plaintext highlighter-rouge">AtomicBoolean</code>을 사용해서 <code class="language-plaintext highlighter-rouge">isCacheCleanerRunning</code>을 만들었다.</p>

<h2 id="실제-적용">실제 적용</h2>

<p>대기질 정보를 가져오는 기능을 구현하면서 적용해보았다.</p>

<p>구조는 다음과 같다.</p>

<p><img src="https://github.com/pknujsp/pknujsp/assets/48265129/b604642b-eaaa-4ab2-963a-7334249928b6" alt="제목 없는 다이어그램-페이지-4" /></p>

<ul>
  <li>AirQualityRepository : 대기질 정보를 가져오는 기능을 담당</li>
  <li>RepositoryCacheManager : AirQualityRepository내 캐시 매니저의 자동 클리너 기능을 on/off 할 수 있도록 함</li>
  <li>GlobalRepositoryCacheManager : CacheManager를 사용하는 Repository의 캐시 클리너를 일괄적으로 다룸
    <ul>
      <li>Activity 생명주기에 따라 ActivityViewModel을 통해 호출된다</li>
    </ul>
  </li>
</ul>

<h2 id="테스트">테스트</h2>

<p><code class="language-plaintext highlighter-rouge">LruCache</code>는 android 의존성이 있기 때문에, <strong>Robolectric</strong>을 사용하여 테스트했고, 모두 통과했다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RunWith</span><span class="p">(</span><span class="nc">RobolectricTestRunner</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
<span class="nd">@Config</span><span class="p">(</span><span class="n">manifest</span> <span class="p">=</span> <span class="nc">Config</span><span class="p">.</span><span class="nc">NONE</span><span class="p">)</span>
<span class="kd">class</span> <span class="nc">CacheManagerImplTest</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">lateinit</span> <span class="kd">var</span> <span class="py">cacheManager</span><span class="p">:</span> <span class="nc">CacheManagerImpl</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">,</span> <span class="nc">FakeCache</span><span class="p">&gt;</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">testDispatcher</span> <span class="p">=</span> <span class="nc">UnconfinedTestDispatcher</span><span class="p">()</span>

    <span class="nd">@Test</span>
    <span class="k">fun</span> <span class="nf">put_and_get</span><span class="p">()</span> <span class="p">=</span> <span class="nf">runTest</span> <span class="p">{</span>
        <span class="n">cacheManager</span> <span class="p">=</span> <span class="nc">CacheManagerImpl</span><span class="p">(</span><span class="n">dispatcher</span> <span class="p">=</span> <span class="n">testDispatcher</span><span class="p">)</span>
        <span class="kd">val</span> <span class="py">fakeHitCache</span> <span class="p">=</span> <span class="nc">FakeCache</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"test"</span><span class="p">)</span>
        <span class="n">cacheManager</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="n">fakeHitCache</span><span class="p">.</span><span class="n">key</span><span class="p">,</span> <span class="n">fakeHitCache</span><span class="p">)</span>

        <span class="c1">// 간단하게 캐시를 저장하고 불러오는 기능을 테스트</span>
        <span class="nf">assert</span><span class="p">(</span><span class="n">cacheManager</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">fakeHitCache</span><span class="p">.</span><span class="n">key</span><span class="p">)</span> <span class="k">is</span> <span class="nc">CacheManager</span><span class="p">.</span><span class="nc">CacheState</span><span class="p">.</span><span class="nc">Hit</span><span class="p">)</span>
        <span class="nf">assert</span><span class="p">(</span><span class="n">cacheManager</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="s">"missKey"</span><span class="p">)</span> <span class="k">is</span> <span class="nc">CacheManager</span><span class="p">.</span><span class="nc">CacheState</span><span class="p">.</span><span class="nc">Miss</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nd">@Test</span>
    <span class="k">fun</span> <span class="nf">test_lru_cache_only</span><span class="p">()</span> <span class="p">=</span> <span class="nf">runTest</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">cacheMaxSize</span> <span class="p">=</span> <span class="mi">3</span>
        <span class="n">cacheManager</span> <span class="p">=</span> <span class="nc">CacheManagerImpl</span><span class="p">(</span><span class="n">dispatcher</span> <span class="p">=</span> <span class="n">testDispatcher</span><span class="p">,</span> <span class="n">cacheMaxSize</span> <span class="p">=</span> <span class="n">cacheMaxSize</span><span class="p">)</span>
        <span class="kd">val</span> <span class="py">fakeCaches</span> <span class="p">=</span> <span class="nc">List</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
            <span class="nc">FakeCache</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="s">"test $it"</span><span class="p">).</span><span class="nf">apply</span> <span class="p">{</span>
                <span class="n">cacheManager</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// 추가한 목록에서 키 0, 1 은 캐시 miss</span>
        <span class="c1">// 키 2, 3, 4는 캐시 hit가 되어야 한다</span>
        <span class="kd">val</span> <span class="py">missKeys</span> <span class="p">=</span> <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="p">&lt;(</span><span class="n">fakeCaches</span><span class="p">.</span><span class="n">size</span> <span class="p">-</span> <span class="n">cacheMaxSize</span><span class="p">)).</span><span class="nf">toList</span><span class="p">()</span>
        <span class="kd">val</span> <span class="py">hitKeys</span> <span class="p">=</span> <span class="p">(</span><span class="n">fakeCaches</span><span class="p">.</span><span class="n">size</span> <span class="p">-</span> <span class="n">cacheMaxSize</span> <span class="n">until</span> <span class="n">fakeCaches</span><span class="p">.</span><span class="n">size</span><span class="p">).</span><span class="nf">toList</span><span class="p">()</span>

        <span class="n">missKeys</span><span class="p">.</span><span class="nf">forEach</span> <span class="p">{</span>
            <span class="nf">assert</span><span class="p">(</span><span class="n">cacheManager</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">fakeCaches</span><span class="p">[</span><span class="n">it</span><span class="p">].</span><span class="n">key</span><span class="p">)</span> <span class="k">is</span> <span class="nc">CacheManager</span><span class="p">.</span><span class="nc">CacheState</span><span class="p">.</span><span class="nc">Miss</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="n">hitKeys</span><span class="p">.</span><span class="nf">forEach</span> <span class="p">{</span>
            <span class="nf">assert</span><span class="p">(</span><span class="n">cacheManager</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">fakeCaches</span><span class="p">[</span><span class="n">it</span><span class="p">].</span><span class="n">key</span><span class="p">)</span> <span class="k">is</span> <span class="nc">CacheManager</span><span class="p">.</span><span class="nc">CacheState</span><span class="p">.</span><span class="nc">Hit</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nd">@Test</span>
    <span class="k">fun</span> <span class="nf">test_time_out_only</span><span class="p">()</span> <span class="p">=</span> <span class="nf">runBlocking</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">cacheExpiryTime</span> <span class="p">=</span> <span class="nc">Duration</span><span class="p">.</span><span class="nf">ofSeconds</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">cacheManager</span> <span class="p">=</span> <span class="nc">CacheManagerImpl</span><span class="p">(</span><span class="n">dispatcher</span> <span class="p">=</span> <span class="n">testDispatcher</span><span class="p">,</span> <span class="n">cacheExpiryTime</span> <span class="p">=</span> <span class="n">cacheExpiryTime</span><span class="p">)</span>

        <span class="kd">val</span> <span class="py">fakeCaches</span> <span class="p">=</span> <span class="nc">List</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="p">{</span>
            <span class="nc">FakeCache</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="s">"test $it"</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="c1">// miss 유도</span>
        <span class="kd">val</span> <span class="py">missList</span> <span class="p">=</span> <span class="n">fakeCaches</span><span class="p">.</span><span class="nf">subList</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
        <span class="c1">// hit 유도</span>
        <span class="kd">val</span> <span class="py">hitList</span> <span class="p">=</span> <span class="n">fakeCaches</span><span class="p">.</span><span class="nf">subList</span><span class="p">(</span><span class="n">missList</span><span class="p">.</span><span class="n">size</span><span class="p">,</span> <span class="n">fakeCaches</span><span class="p">.</span><span class="n">size</span><span class="p">)</span>

        <span class="n">missList</span><span class="p">.</span><span class="nf">forEach</span> <span class="p">{</span>
            <span class="n">cacheManager</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">key</span><span class="p">,</span> <span class="n">it</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="nf">delay</span><span class="p">(</span><span class="n">cacheExpiryTime</span><span class="p">.</span><span class="nf">toMillis</span><span class="p">())</span>

        <span class="n">hitList</span><span class="p">.</span><span class="nf">forEach</span> <span class="p">{</span>
            <span class="n">cacheManager</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">key</span><span class="p">,</span> <span class="n">it</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="n">missList</span><span class="p">.</span><span class="nf">forEach</span> <span class="p">{</span>
            <span class="nf">assert</span><span class="p">(</span><span class="n">cacheManager</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">key</span><span class="p">)</span> <span class="k">is</span> <span class="nc">CacheManager</span><span class="p">.</span><span class="nc">CacheState</span><span class="p">.</span><span class="nc">Miss</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="n">hitList</span><span class="p">.</span><span class="nf">forEach</span> <span class="p">{</span>
            <span class="nf">assert</span><span class="p">(</span><span class="n">cacheManager</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">key</span><span class="p">)</span> <span class="k">is</span> <span class="nc">CacheManager</span><span class="p">.</span><span class="nc">CacheState</span><span class="p">.</span><span class="nc">Hit</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nd">@Test</span>
    <span class="k">fun</span> <span class="nf">cache_cleaner_removes_expired_items</span><span class="p">()</span> <span class="p">=</span> <span class="nf">runBlocking</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">cacheExpiryTime</span> <span class="p">=</span> <span class="nc">Duration</span><span class="p">.</span><span class="nf">ofMillis</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
        <span class="kd">val</span> <span class="py">cleaningInterval</span> <span class="p">=</span> <span class="nc">Duration</span><span class="p">.</span><span class="nf">ofMillis</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

        <span class="kd">val</span> <span class="py">fakeCaches</span> <span class="p">=</span> <span class="nc">List</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">{</span>
            <span class="nc">FakeCache</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="s">"test $it"</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="n">cacheManager</span> <span class="p">=</span> <span class="nc">CacheManagerImpl</span><span class="p">(</span><span class="n">dispatcher</span> <span class="p">=</span> <span class="n">testDispatcher</span><span class="p">,</span>
            <span class="n">cacheMaxSize</span> <span class="p">=</span> <span class="mi">100</span><span class="p">,</span>
            <span class="n">cacheExpiryTime</span> <span class="p">=</span> <span class="n">cacheExpiryTime</span><span class="p">,</span>
            <span class="n">cleaningInterval</span> <span class="p">=</span> <span class="n">cleaningInterval</span><span class="p">)</span>

        <span class="n">fakeCaches</span><span class="p">.</span><span class="nf">forEach</span> <span class="p">{</span>
            <span class="n">cacheManager</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">key</span><span class="p">,</span> <span class="n">it</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="c1">// 자동으로 캐시가 정리되어 캐시맵은 비어있어야 한다.</span>
        <span class="nf">delay</span><span class="p">(</span><span class="n">cleaningInterval</span><span class="p">.</span><span class="nf">toMillis</span><span class="p">()</span> <span class="p">+</span> <span class="mi">10</span><span class="p">)</span>
        <span class="nf">assertTrue</span><span class="p">(</span><span class="n">cacheManager</span><span class="p">.</span><span class="nf">entries</span><span class="p">().</span><span class="nf">isEmpty</span><span class="p">())</span>
    <span class="p">}</span>

    <span class="nd">@Test</span>
    <span class="k">fun</span> <span class="nf">items_should_not_be_deleted_if_cache_cleaner_didnt_work</span><span class="p">()</span> <span class="p">=</span> <span class="nf">runBlocking</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">cacheExpiryTime</span> <span class="p">=</span> <span class="nc">Duration</span><span class="p">.</span><span class="nf">ofMillis</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
        <span class="kd">val</span> <span class="py">cleaningInterval</span> <span class="p">=</span> <span class="nc">Duration</span><span class="p">.</span><span class="nf">ofSeconds</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

        <span class="kd">val</span> <span class="py">fakeCaches</span> <span class="p">=</span> <span class="nc">List</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">{</span>
            <span class="nc">FakeCache</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="s">"test $it"</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="n">cacheManager</span> <span class="p">=</span> <span class="nc">CacheManagerImpl</span><span class="p">(</span><span class="n">dispatcher</span> <span class="p">=</span> <span class="n">testDispatcher</span><span class="p">,</span>
            <span class="n">cacheMaxSize</span> <span class="p">=</span> <span class="mi">100</span><span class="p">,</span>
            <span class="n">cacheExpiryTime</span> <span class="p">=</span> <span class="n">cacheExpiryTime</span><span class="p">,</span>
            <span class="n">cleaningInterval</span> <span class="p">=</span> <span class="n">cleaningInterval</span><span class="p">)</span>

        <span class="n">fakeCaches</span><span class="p">.</span><span class="nf">forEach</span> <span class="p">{</span>
            <span class="n">cacheManager</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">key</span><span class="p">,</span> <span class="n">it</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="c1">// 캐시 클리너가 동작하지 않았으므로 아이템의 개수는 유지되어야 한다</span>
        <span class="nf">assertTrue</span><span class="p">(</span><span class="n">cacheManager</span><span class="p">.</span><span class="nf">entries</span><span class="p">().</span><span class="n">size</span> <span class="p">==</span> <span class="n">fakeCaches</span><span class="p">.</span><span class="n">size</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">data class</span> <span class="nc">FakeCache</span><span class="p">(</span><span class="kd">val</span> <span class="py">id</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="kd">val</span> <span class="py">value</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">key</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="n">id</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="실제-테스트-결과">실제 테스트 결과</h2>

<p>아래 화면은 각 지역을 선택하면 날씨 정보 화면으로 전환되는 기능을 제공한다.</p>

<p>테스트를 위해 캐시의 크기를 4로 설정했고, 다음 순서로 지역을 선택해나갔다.</p>

<ol>
  <li>청주시</li>
  <li>영동군</li>
  <li>의령군</li>
  <li>김해시 내동</li>
  <li>경산시 내동</li>
  <li>청주시</li>
  <li>의령군</li>
</ol>

<p><img src="https://github.com/pknujsp/pknujsp/assets/48265129/51461281-f494-4f8d-960d-e1cb3e555428" alt="스크린샷 2023-12-12 210558" /></p>

<p>다음과 같이 의도대로 정확하게 동작한다.</p>

<ol>
  <li>청주시 : Miss -&gt; 서버에서 데이터를 가져옴</li>
  <li>영동군 : Miss -&gt; 서버에서 데이터를 가져옴</li>
  <li>의령군 : Miss -&gt; 서버에서 데이터를 가져옴</li>
  <li>김해시 내동 : Miss -&gt; 서버에서 데이터를 가져옴</li>
  <li>경산시 내동 : Miss -&gt; 서버에서 데이터를 가져옴</li>
  <li>청주시 : Miss
    <ul>
      <li>5번째 경산시를 선택하면서 청주시의 캐시가 삭제되었기 때문에, 다시 서버에서 데이터를 가져옴</li>
    </ul>
  </li>
  <li>의령군 : Hit
    <ul>
      <li>만약 8번째에서 다른 지역을 선택한다면, 그 때 의령군이 캐시에서 삭제된다.</li>
    </ul>
  </li>
</ol>

<p><img src="https://github.com/pknujsp/pknujsp/assets/48265129/ca2c20a0-10a8-4a4f-b133-90538fdb2c6b" alt="image" /></p>]]></content><author><name>Junsung Park</name></author><category term="Kotlin" /><category term="Kotlin" /><category term="Cache" /><category term="Coroutines" /><category term="Actor" /><category term="LruCache" /><summary type="html"><![CDATA[구현 목적]]></summary></entry><entry><title type="html">DroidKnights 2023 ‘빈혈 도메인 모델과 쓸모없는 유스케이스 그리고 비대한 뷰모델에 대해 생각해보기’내용 정리</title><link href="https://pknujsp.github.io//jekyll-theme-yat/android/2023/11/27/%EB%B9%88%ED%98%88-%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%AA%A8%EB%8D%B8,-%EC%93%B8%EB%AA%A8%EC%97%86%EB%8A%94-%EC%9C%A0%EC%8A%A4%EC%BC%80%EC%9D%B4%EC%8A%A4,-%EB%B9%84%EB%8C%80%ED%95%9C-%EB%B7%B0%EB%AA%A8%EB%8D%B8%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-DroidKnights-2023.html" rel="alternate" type="text/html" title="DroidKnights 2023 ‘빈혈 도메인 모델과 쓸모없는 유스케이스 그리고 비대한 뷰모델에 대해 생각해보기’내용 정리" /><published>2023-11-27T00:00:00+09:00</published><updated>2023-11-27T00:00:00+09:00</updated><id>https://pknujsp.github.io//jekyll-theme-yat/android/2023/11/27/%EB%B9%88%ED%98%88%20%EB%8F%84%EB%A9%94%EC%9D%B8%20%EB%AA%A8%EB%8D%B8,%20%EC%93%B8%EB%AA%A8%EC%97%86%EB%8A%94%20%EC%9C%A0%EC%8A%A4%EC%BC%80%EC%9D%B4%EC%8A%A4,%20%EB%B9%84%EB%8C%80%ED%95%9C%20%EB%B7%B0%EB%AA%A8%EB%8D%B8%EC%97%90%20%EB%8C%80%ED%95%98%EC%97%AC%20DroidKnights%202023</id><content type="html" xml:base="https://pknujsp.github.io//jekyll-theme-yat/android/2023/11/27/%EB%B9%88%ED%98%88-%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%AA%A8%EB%8D%B8,-%EC%93%B8%EB%AA%A8%EC%97%86%EB%8A%94-%EC%9C%A0%EC%8A%A4%EC%BC%80%EC%9D%B4%EC%8A%A4,-%EB%B9%84%EB%8C%80%ED%95%9C-%EB%B7%B0%EB%AA%A8%EB%8D%B8%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-DroidKnights-2023.html"><![CDATA[<blockquote>
  <p>이번 글은 아래의 영상으로 부터 얻은 내용을 바탕으로 작성하였습니다.</p>
</blockquote>

<p><strong>빈혈 도메인, 쓸모없는 유스케이스, 비대한 뷰모델에 대하여</strong>를 주제로 DroidKnights 2023에서 강연하신 박종혁님(카카오스타일)의 영상입니다.</p>

<p><a href="https://youtu.be/3mR8_vT7m1U?si=sIs_2rVc667qZUtC"><img src="https://img.youtube.com/vi/3mR8_vT7m1U/sddefault.jpg" alt="빈혈(anemic) 도메인 모델과 쓸모없는 유스케이스 그리고 비대한(Bloated) 뷰모델에 대해 생각해보기" /></a>
<strong><em>Video: 빈혈(anemic) 도메인 모델과 쓸모없는 유스케이스 그리고 비대한(Bloated) 뷰모델에 대해 생각해보기</em></strong></p>

<p>개발에서 발생할 수 있는 문제점들로 <strong>빈혈 도메인 모델</strong>, <strong>쓸모없는 유스케이스</strong>, <strong>비대한 뷰모델</strong> 세 가지가 소개되었습니다.</p>

<h4 id="--빈혈-무기력한-빈약한anemic-도메인-모델">- 빈혈, 무기력한, 빈약한(Anemic) 도메인 모델</h4>

<blockquote>
  <p>도메인 모델(클래스)이 데이터만 가지고 있고, 어떠한 로직이 없는 상태, <a href="https://martinfowler.com/bliki/AnemicDomainModel.html">AnemicDomainModel</a></p>
</blockquote>

<ul>
  <li>안티 패턴 중 하나(특정 경우에는 적절할 수 있으므로 무조건 사용하지 말아야 하는 것은 아닙니다)</li>
  <li>객체의 의미와 책임을 제대로 반영하지 못하기 때문에 객체지향적인 설계를 벗어납니다.</li>
  <li>단순 구조체와 다를 바 없으므로, 모델을 생성하는 의미가 없다고 볼수 있습니다.</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">Developer</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">age</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span>
<span class="p">)</span>

<span class="kd">data class</span> <span class="nc">DeveloperList</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">list</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">Developer</span><span class="p">&gt;</span>
<span class="p">)</span>
</code></pre></div></div>

<h4 id="--쓸모없는-유스케이스">- 쓸모없는 유스케이스</h4>

<blockquote>
  <p>유스케이스(클래스)가 단순히 레포지토리와 뷰모델을 연결만 해주는 상태, 특별한 기능이 없음</p>
</blockquote>

<ul>
  <li>비즈니스 로직을 서버에 위임하는 아키텍처에서 주로 보입니다.</li>
  <li>안티 패턴으로 간주되기도 하지만, 코드 일관성 및 미래의 수정에 대비하는 등의 이유로 사용되기도 합니다.</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">SpeakerRepository</span> <span class="p">{</span>
    <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">getSpeakerList</span><span class="p">():</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">Speaker</span><span class="p">&gt;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">LoadSpeakerListUseCase</span><span class="p">(</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">speakerRepository</span><span class="p">:</span> <span class="nc">SpeakerRepository</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="k">suspend</span> <span class="k">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">()</span> <span class="p">=</span> <span class="n">speakerRepository</span><span class="p">.</span><span class="nf">getSpeakerList</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>오직 <code class="language-plaintext highlighter-rouge">speakerRepository.getSpeakerList()</code>를 위해서 유스케이스가 쓰입니다.</p>

<h4 id="--비대한bloated-뷰모델">- 비대한(Bloated) 뷰모델</h4>

<blockquote>
  <p>뷰모델이 과하게 크고 복잡한 상태</p>
</blockquote>

<ul>
  <li>뷰모델이 너무 많은 책임과 로직을 가지고 있으면 유지보수성이 떨어집니다.</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SpeakerListViewModel</span><span class="p">(</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">loadSpeakerList</span><span class="p">:</span> <span class="nc">LoadSpeakerListUseCase</span>
<span class="p">)</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">speakerList</span> <span class="c1">// ...</span>

    <span class="k">fun</span> <span class="nf">load</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">viewModelScope</span><span class="p">.</span><span class="nf">launch</span> <span class="p">{</span>
            <span class="n">speakerList</span> <span class="p">=</span> <span class="nf">loadSpeaker</span><span class="p">()</span>
            <span class="c1">// ...</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">getYoungDevelopers</span><span class="p">()</span> <span class="p">=</span> <span class="n">speakerList</span><span class="p">.</span><span class="nf">filter</span> <span class="p">{</span> 
        <span class="n">it</span><span class="p">.</span><span class="n">age</span> <span class="p">&lt;</span> <span class="mi">30</span> 
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="이러한-문제들을-해결하는-방법">이러한 문제들을 해결하는 방법</h3>

<blockquote>
  <p>명확한 정답은 없음, 끊임없는 고민으로 적절한 방법을 찾도록 합니다. 팀 프로젝트라면 팀원들과의 끊임없는 토의로 가이드라인을 찾아가는 것이 중요합니다.</p>
</blockquote>

<h3 id="카카오스타일-지그재그-앱-개발팀이-적용한-방법">카카오스타일 지그재그 앱 개발팀이 적용한 방법</h3>

<p>팀원들과의 토의를 통해 다음과 같은 가이드라인으로 합의점을 찾았다고 합니다.</p>

<ul>
  <li>가이드라인
    <ul>
      <li>프레젠테이션 레이어에 도메인 로직을 구현하지 않는다.</li>
      <li>단일 도메인 모델에 대한 비즈니스 로직은, 도메인 모델이 책임지도록 한다.</li>
      <li>여러 도메인 모델에 대한 비즈니스 로직은, 유스케이스가 해결할 수 있다.</li>
    </ul>
  </li>
</ul>

<h4 id="1-프레젠테이션-레이어에-도메인-로직을-구현하지-않는다">1. 프레젠테이션 레이어에 도메인 로직을 구현하지 않는다.</h4>

<ul>
  <li>뷰모델은 프레젠테이션 레이어(UI 레이어)이므로, 뷰모델에는 데이터를 뷰에 표현하거나, 사용자 상호작용을 위한 로직을 구현하도록 한다.</li>
</ul>

<h4 id="2-단일-도메인-모델에-대한-비즈니스-로직은-도메인-모델이-책임지도록-한다">2. 단일 도메인 모델에 대한 비즈니스 로직은, 도메인 모델이 책임지도록 한다.</h4>

<ul>
  <li>도메인 모델은 필요한 로직을 직접 구현해야 한다. 빈혈 도메인 모델을 개선시키기 위해 관련 로직을 구현하는 것이다.</li>
  <li>뷰모델에서 도메인 모델을 직접 다루는 로직은 구현해서는 안된다.</li>
  <li>프레젠테이션 로직이 아니라면, 도메인 메서드에 구현하는 것을 우선으로 고려한다.</li>
</ul>

<h4 id="3-여러-도메인-모델에-대한-비즈니스-로직은-유스케이스가-해결할-수-있다">3. 여러 도메인 모델에 대한 비즈니스 로직은, 유스케이스가 해결할 수 있다.</h4>

<ul>
  <li>도메인 로직은 아래 기준에 따라 유스케이스로 구현되어야 한다.
    <ul>
      <li>여러 도메인 모델이 참조되는 복잡한 비즈니스 로직</li>
      <li>프레젠테이션 레이어에서 직접 데이터 레이어를 참조하지 않도록 하는 Wrapper 레이어 로직
        <ul>
          <li>간단하게 SAM interface로 구현 가능</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="개선-예시">개선 예시</h3>

<p>위와 같은 가이드라인에 따라 아래와 같이 개선이 가능합니다.</p>

<h4 id="도메인-모델에-책임을-부여">도메인 모델에 책임을 부여</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">Developer</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">age</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span>
<span class="p">){</span>
    <span class="k">fun</span> <span class="nf">isYoung</span><span class="p">()</span> <span class="p">=</span> <span class="n">age</span> <span class="p">&lt;</span> <span class="mi">30</span>   
<span class="p">}</span>

<span class="kd">data class</span> <span class="nc">DeveloperList</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">list</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">Developer</span><span class="p">&gt;</span>
<span class="p">){</span>
    <span class="k">fun</span> <span class="nf">getYoungDevelopers</span><span class="p">()</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="nf">filter</span> <span class="p">{</span> 
        <span class="n">it</span><span class="p">.</span><span class="nf">isYoung</span><span class="p">()</span> 
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="여러-도메인-모델에-대한-비즈니스-로직을-유스케이스에서-구현">여러 도메인 모델에 대한 비즈니스 로직을 유스케이스에서 구현</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">LoadSpeakerListWithCompanyNameUseCase</span><span class="p">(</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">speakerRepository</span><span class="p">:</span> <span class="nc">SpeakerRepository</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="k">suspend</span> <span class="k">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">company</span><span class="p">:</span> <span class="nc">Company</span><span class="p">)</span> <span class="p">=</span> <span class="n">speakerRepository</span><span class="p">.</span><span class="nf">getSpeakerList</span><span class="p">().</span><span class="nf">concatCompanyName</span><span class="p">(</span><span class="n">company</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SpeakerListViewModel</span><span class="p">(</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">loadSpeakerList</span><span class="p">:</span> <span class="nc">LoadSpeakerListUseCase</span>
<span class="p">)</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">speakerList</span> <span class="c1">// ...</span>

    <span class="k">fun</span> <span class="nf">load</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">viewModelScope</span><span class="p">.</span><span class="nf">launch</span> <span class="p">{</span>
            <span class="n">speakerList</span> <span class="p">=</span> <span class="nf">loadSpeaker</span><span class="p">()</span>
            <span class="c1">// ...</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 도메인 모델 내에서 필터링 로직이 구현된 메서드를 호출하여 사용</span>
    <span class="k">fun</span> <span class="nf">getYoungDevelopers</span><span class="p">()</span> <span class="p">=</span> <span class="n">speakerList</span><span class="p">.</span><span class="nf">getYoungDevelopers</span><span class="p">()</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="정리">정리</h3>

<ul>
  <li>빈혈 도메인 모델을 개선하기 위해서 도메인 모델에 책임을 부여할수 있다.</li>
  <li>여러 도메인 모델에 대한 비즈니스 로직을 유스케이스에서 구현하여, 유스케이스의 책임을 확장할 수 있다.</li>
  <li>뷰모델은 프레젠테이션 레이어이므로, 도메인 모델을 직접 다루는 로직은 구현해서는 안된다.</li>
</ul>

<p>이러한 개선 방법이 무조건 정답이라고 볼수 없으며, 현재 프로젝트의 구조, 상황에 따라 적절한 가이드라인을 찾아가는 것이 중요합니다.</p>]]></content><author><name>Junsung Park</name></author><category term="Android" /><category term="Android" /><summary type="html"><![CDATA[이번 글은 아래의 영상으로 부터 얻은 내용을 바탕으로 작성하였습니다.]]></summary></entry><entry><title type="html">About the UI layer</title><link href="https://pknujsp.github.io//jekyll-theme-yat/android/2023/11/14/UI-Layer%EB%9E%80(Android-%EA%B3%B5%EC%8B%9D-%EB%AC%B8%EC%84%9C-%EC%A0%95%EB%8F%85)-copy.html" rel="alternate" type="text/html" title="About the UI layer" /><published>2023-11-14T00:00:00+09:00</published><updated>2023-11-14T00:00:00+09:00</updated><id>https://pknujsp.github.io//jekyll-theme-yat/android/2023/11/14/UI%20Layer%EB%9E%80(Android%20%EA%B3%B5%EC%8B%9D%20%EB%AC%B8%EC%84%9C%20%EC%A0%95%EB%8F%85)%20copy</id><content type="html" xml:base="https://pknujsp.github.io//jekyll-theme-yat/android/2023/11/14/UI-Layer%EB%9E%80(Android-%EA%B3%B5%EC%8B%9D-%EB%AC%B8%EC%84%9C-%EC%A0%95%EB%8F%85)-copy.html"><![CDATA[<h2 id="ui-layer">UI layer</h2>

<p><a href="https://developer.android.com/topic/architecture/ui-layer#compose_2">UI layer 공식문서</a>를 정리한 내용입니다.</p>

<blockquote>
  <p>UI : 앱의 데이터를 화면에 표시하고 사용자와 상호 작용하는 부분입니다, Data 계층으로 부터 변경되는 앱의 상태를 시각적으로 표현하는 역할</p>
</blockquote>

<p>데이터가 변경될 때마다 UI는 그에 맞게 바뀌어야 합니다.(버튼 클릭, 네트워크 응답 등)</p>

<p>보통 Data 계층에서 받은 데이터를 화면에 바로 보여주기에는 적절하지 않습니다. 예를 들어, 일부 데이터만 보여줘야 하거나, 여러 개의 데이터들을 합쳐서 보여줘야 하는 경우가 있습니다. UI 계층은 이러한 데이터를 UI로 표시할 수 있게 가공하여, 화면에 보여주는 역할을 중요한 과정을 담당합니다.</p>

<p><img src="https://developer.android.com/static/topic/libraries/architecture/images/mad-arch-ui-overview.png" width="70%" /></p>

<p><strong><em>Android 앱 아키텍처에서 UI 계층의 역할</em></strong></p>

<blockquote>
  <p>참고 : 이 페이지에 제시된 권장 사항 및 모범 사례는 다양한 앱에 적용하여 앱의 확장성, 품질 및 견고성을 개선하고 테스트하기 쉽게 만들 수 있습니다. 하지만 이를 가이드라인으로 간주하고 필요에 따라 요구 사항에 맞게 조정해야 합니다.</p>
</blockquote>

<p><a href="https://www.youtube.com/watch?v=p9VR8KbmzEE"><img src="https://img.youtube.com/vi/p9VR8KbmzEE/0.jpg" alt="Architecture: the UI layer" /></a>
<strong><em>Video : Architecture: The UI layer</em></strong></p>

<h2 id="기본-사례">기본 사례</h2>

<p>뉴스 기사를 가져오는 앱을 생각해봅시다.</p>

<p>기사 목록을 표시하는 기사 목록 화면이 있고, 로그인한 사용자는 기사를 즐겨찾기에 추가할 수 있습니다. 기사가 너무 많을 수 있으니 사용자는 카테고리별로 기사를 볼수도 있습니다.</p>

<ul>
  <li>사용자가 할 수 있는 기능
    <ul>
      <li>기사 목록을 볼 수 있습니다.</li>
      <li>카테고리별로 기사를 볼 수 있습니다.</li>
      <li>로그인하여 기사를 즐겨찾기에 추가할 수 있습니다.</li>
      <li>자격이 된다면 일부 프리미엄 기능을 사용할 수 있습니다.(유료 결제)</li>
    </ul>
  </li>
</ul>

<p><img src="https://developer.android.com/static/topic/libraries/architecture/images/mad-arch-ui-basic-case-study.png" width="60%" /></p>

<p><strong><em>샘플 뉴스 앱</em></strong></p>

<p>다음 내용에서는 이 앱을 예시로 하여 단방향 데이터 흐름 원칙을 설명하고, 이러한 원칙이 UI 계층에 대하여 앱 아키텍처의 관점에서 도움이 되는 문제를 설명합니다.</p>

<h2 id="ui-계층-아키텍처">UI 계층 아키텍처</h2>

<p>Android에서 UI는 데이터를 보여주는 액티비티 또는 프래그먼트와 같은 UI 요소를 의미합니다. 이를 구현하기 위해 쓰이는 뷰와 컴포즈 같은 API와는 무관합니다. Data 계층의 역할은 앱 데이터를 보유/관리하고 접근하는 권한을 제공하는 것이므로, UI 계층은 다음 과정을 따라야 합니다.</p>

<ol>
  <li>앱 데이터를 사용하고 UI가 쉽게 표시할 수 있도록 데이터를 가공합니다.</li>
  <li>UI가 표시가능한 데이터를 사용하고, 사용자에게 표시할 수 있도록 UI 요소로 가공합니다.</li>
  <li>UI 요소에서 사용자의 입력을 받고, 필요에 따라 UI 데이터에 관련 효과를 적용합니다.</li>
</ol>

<p>필요한 만큼 <code class="language-plaintext highlighter-rouge">1~3</code> 과정을 반복합니다.</p>

<p>지금부터는 UI 계층에서 이런 과정을 수행하도록 구현하는 방법을 설명하겠습니다. 구체적으로 다음과 같은 내용을 다루겠습니다.</p>

<ul>
  <li><strong>UI 상태 정의</strong>: 앱의 화면과 사용자간의 상호작용을 어떻게 데이터로 표현할지 정의하는 방법.</li>
  <li><strong>단방향 데이터 흐름(UDF)</strong>: UI 상태를 만들고 관리하는 데 사용되는 방식. 데이터가 한 방향으로만 흐르며, 이로 인해 데이터 관리가 더 명확해집니다.</li>
  <li><strong>관찰 가능한 데이터 타입으로 UI 상태를 나타내기</strong>: UDF 원칙을 따라 UI 상태를 어떻게 다른 부분들이 관찰하고 반응할 수 있는 형태로 만드는지 설명합니다.</li>
  <li><strong>관찰 가능한 UI 상태를 사용하는 UI 구현</strong>: 실제 UI가 이러한 상태를 어떻게 받아들이고 화면에 표시하는지 보여줍니다.</li>
</ul>

<p>이 중에서 가장 중요한 것은 <strong>UI 상태의 정의</strong> 입니다.</p>

<h2 id="ui-상태state의-정의">UI 상태(State)의 정의</h2>

<blockquote>
  <p>UI State: 앱이 사용자에게 보여주는 데이터</p>
</blockquote>

<p>UI와 UI State는 정의가 다릅니다.</p>

<ul>
  <li>UI: 사용자가 화면으로 보고 있는 것</li>
  <li>UI 상태: 앱이 사용자에게 보여주는 것</li>
</ul>

<h3 id="동전을-예로-들어보겠습니다">동전을 예로 들어보겠습니다.</h3>

<ul>
  <li>UI: UI 상태의 시각적 표현(눈으로 보이는 동전의 모습), 앞면이나 뒷면이 보이는 것</li>
  <li>UI 상태: 동전의 양면 중 어느 쪽이 위로 향하고 있는지 ‘앞면’ 또는 ‘뒷면’과 같이 현재 상태를 나타내는 정보</li>
</ul>

<p>UI 상태가 바뀌면 그에 따라서 UI도 바뀝니다.</p>

<p><img src="https://developer.android.com/static/topic/libraries/architecture/images/mad-arch-ui-elements-state.png" width="70%" /></p>

<p><strong><em>UI는 화면 상의 UI 요소와 UI 상태가 결합한 것입니다</em></strong></p>

<p>뉴스 앱의 요구 사항을 따라 UI를 만들기 위해서 <code class="language-plaintext highlighter-rouge">NewsUiState</code> 라는 클래스에 데이터를 담을 수 있습니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">NewsUiState</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">isSignedIn</span><span class="p">:</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">isPremium</span><span class="p">:</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">newsItems</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">NewsItemUiState</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">listOf</span><span class="p">(),</span>
    <span class="kd">val</span> <span class="py">userMessages</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">Message</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">listOf</span><span class="p">()</span>
<span class="p">)</span>

<span class="kd">data class</span> <span class="nc">NewsItemUiState</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">title</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">body</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">bookmarked</span><span class="p">:</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
    <span class="o">..</span><span class="p">.</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="불변성immutability">불변성(Immutability)</h3>

<p>위 예제 코드의 UI 상태는 불변합니다. 불변 객체의 장점은 앱의 상태가 특정 시점에서 어떤 상태인지 보장해준다는 것입니다. 이로 인해 UI가 하나의 역할(상태를 읽고 적절하게 UI 요소를 업데이트)만 집중할 수 있게 됩니다. 그래서 UI자체가 데이터의 유일한 출처가 아니라면 개발자는 UI 상태를 직접 변경하면 안됩니다. 직접 변경한다면 같은 데이터에 대해 여러개의 출처가 생기면서 데이터의 일관성이 깨지며 버그가 발생할 수 있습니다.</p>

<p>예를 들어, <code class="language-plaintext highlighter-rouge">NewsUiState</code>내 <code class="language-plaintext highlighter-rouge">bookmarked</code>의 값이 <code class="language-plaintext highlighter-rouge">Activity</code>에서 바뀐다면 <code class="language-plaintext highlighter-rouge">bookmarked</code>는 실제 북마크 상태를 두고 Data 계층과 충돌하게 됩니다. 왜냐하면 북마크 상태를 실제로 변경하는 작업은 Data 계층에서 이루어져야 하기 때문입니다. 이런 문제를 방지하기 위해서 불변 클래스를 사용하는 것이 좋습니다.</p>

<blockquote>
  <p>데이터를 소유하거나 직접적으로 변경하는 객체는 스스로 노출시키는 데이터를 업데이트 할 책임이 있습니다.</p>
</blockquote>

<h3 id="이름-짓기naming-conventions">이름 짓기(Naming conventions)</h3>

<p>현재 문서에서는 UI 상태 클래스의 이름을 화면의 기능 또는 데이터가 표현되는 화면의 일부를 기반으로 하여 짓습니다.</p>

<p><code class="language-plaintext highlighter-rouge">functionality + UiState.kt</code></p>

<ul>
  <li>NewsUiState: 뉴스를 표시하는 화면의 상태</li>
  <li>NewsItemUiState: 기사 목록내 각 아이템의 상태</li>
</ul>

<h2 id="단방향-데이터-흐름udf-unidirectional-data-flow으로-ui-상태를-관리하기">단방향 데이터 흐름(UDF, Unidirectional Data Flow)으로 UI 상태를 관리하기</h2>

<p>위에서 UI 상태가 UI를 표시하기 위해 필요한 세부 사항의 불변 스냅샷이라고 설명했습니다. 그러나 보통 데이터는 동적으로 바뀌고 따라서 상태도 계속 변경됩니다. 사용자가 앱을 쓰기 때문입니다.</p>

<p>이러한 상호작용은 중개자(이벤트에 적용할 로직을 정의하고 UI 상태를 만들기 위한 데이터를 가공하는 작업을 수행)의 도움을 받아야 합니다. 이런 상호작용과 로직은 UI 자체에 포함될 수는 있지만, UI가 이를 처리하는 것은 좋지 않습니다. 왜냐하면 UI는 UI 상태를 표시하는 것에만 집중해야 하기 때문입니다. 데이터 소유, 생산, 변환과 같은 역할까지 해야 한다면 UI는 너무 많은 역할을 하게 됩니다. 이는 코드를 이해하기 어렵게 만들고, 테스트하기 어렵게 만들며, 유지보수하기 어렵게 만듭니다.</p>

<p>UI는 오직 UI 상태를 가지고 화면에 보여주는 역할만을 하여야 합니다.</p>

<h3 id="상태-홀더state-holders">상태 홀더(State holders)</h3>

<blockquote>
  <p>상태 홀더 : UI 상태를 만들고 관련 로직을 가지고 있는 클래스</p>
</blockquote>

<p>상태 홀더 클래스의 규모는 관리하는 UI 요소(App bar와 같은 작은 요소에서 부터 화면 전체 또는 화면 이동 대상)에 따라 다양합니다.</p>

<blockquote>
  <p>Data 계층에 접근하는 화면 수준의 UI 상태를 관리하는 경우에는 <code class="language-plaintext highlighter-rouge">ViewModel</code>을 사용하는 것을 권장합니다. <code class="language-plaintext highlighter-rouge">ViewModel</code>은 구성이 변경되더라도 데이터를 유지할 수 있습니다.<code class="language-plaintext highlighter-rouge">ViewModel</code>은 앱의 이벤트를 처리하는 로직을 정의하고 처리 결과를 상태로 만들어 내는데 사용합니다.</p>
</blockquote>

<p>UI와 상태 생성간의 상호 의존성을 만드는 방법은 다양합니다. 그러나 UI와 ViewModel간의 상호작용은 크게 이벤트의 입력과 그에 따른 상태를 출력하는 것으로 이해할 수 있는데, 다이어그램으로 표현하면 다음과 같습니다.</p>

<p><img src="https://developer.android.com/static/topic/libraries/architecture/images/mad-arch-ui-udf.png" width="70%" /></p>

<p><strong><em>앱 아키텍처에서 UDF의 흐름</em></strong></p>

<p>상태가 아래로 흐르고 이벤트가 위로 흐르는 이러한 패턴이 바로 <code class="language-plaintext highlighter-rouge">단방향 데이터 흐름(UDF)</code>입니다. UDF를 통해 앱 아키텍처는 다음과 같이 변화합니다.</p>

<ul>
  <li>ViewModel은 UI가 사용할 상태를 보유하고 노출시킵니다. UI 상태는 ViewModel에서 변환되는 앱 데이터입니다.</li>
  <li>UI는 ViewModel에 사용자 이벤트를 알립니다.</li>
  <li>ViewModel은 사용자 이벤트를 처리하고 상태를 업데이트합니다.</li>
  <li>업데이트된 상태는 UI에 전달됩니다.</li>
  <li>위 과정은 상태를 바꾸는 이벤트에 의해서 반복됩니다.</li>
</ul>

<p>네비게이션 목적지나 화면에 대해서 ViewModel은 Repository 또는 UseCase에 접근하여 데이터를 가져오고, 이를 UI 상태로 변환합니다. 이때 상태를 변화시킬수 있는 이벤트(사용자 입력, 데이터 변경 등)의 영향을 고려하여 처리합니다. 현재 문서의 예제에서 기사 목록의 경우는 제목, 내용, 출처, 기자, 작성 날짜, 북마크 여부를 포함하고 있고 목록 내 각 아이템에 대한 UI는 다음과 같습니다.</p>

<p><img src="https://developer.android.com/static/topic/libraries/architecture/images/mad-arch-ui-basic-case-study-item.png" width="70%" /></p>

<p><strong><em>기사 하나를 표현하는 아이템의 UI</em></strong></p>

<p>기사를 북마크에 추가하는 사용자는 상태를 변화시키는 이벤트입니다. ViewModel은 상태를 생산하는 역할을 맡고 있으므로 UI 상태 내의 모든 필드를 다루고 UI가 표시되기 위해 필요한 이벤트를 처리하여야 합니다.</p>

<p><img src="https://developer.android.com/static/topic/libraries/architecture/images/mad-arch-ui-udf-in-action.png" width="70%" /></p>

<p><strong><em>UDF에서 이벤트와 데이터가 처리되는 흐름</em></strong></p>

<p>아래에서는 상태 변경을 일으키는 이벤트와 이를 UDF를 사용하여 처리하는 방법을 자세히 설명합니다.</p>

<h3 id="로직의-유형">로직의 유형</h3>

<p>기사를 북마크하는 것은 비즈니스 로직의 예입니다. (이 부분에 대한 자세한 내용은 <a href="https://developer.android.com/jetpack/guide/data-layer">Data 계층</a>페이지를 살펴보세요) 정의해야하는 주요 로직의 유형은 다음과 같습니다.</p>

<ul>
  <li>Business logic: 앱의 데이터에 대한 요구 사항을 구현하는 로직
    <ul>
      <li>예시: 기사를 북마크하는 것</li>
      <li>보통 도메인 또는 Data 계층에서 구현합니다.</li>
      <li>UI 계층에서는 구현하지 않도록 합니다.</li>
    </ul>
  </li>
  <li>UI behavior logic, UI logic: 화면에 상태 변경을 보여주는 로직
    <ul>
      <li>예시: <code class="language-plaintext highlighter-rouge">Resource</code>를 사용하여 표시할 문자열을 가져오는 것, 사용자가 버튼을 눌렀을때 다른 화면으로 이동하는 것, toast 또는 snackbar를 표시하는 것</li>
      <li><code class="language-plaintext highlighter-rouge">Context</code>와 같은 UI 유형과 관련된 로직의 경우, ViewModel이 아닌 UI에서 구현해야 합니다.</li>
      <li>해당 로직이 너무 복잡해진다면 <code class="language-plaintext highlighter-rouge">State holder</code>와 같이 간단한 클래스를 만들어서 위임하면 됩니다.</li>
      <li><a href="https://developer.android.com/jetpack/compose/state#managing-state">Jetpack Compose State guide</a>에서 State holder와 UI 생성과 관련된 내용을 살펴보실수 있습니다.</li>
    </ul>
  </li>
</ul>

<h3 id="udf를-사용해야-하는-이유">UDF를 사용해야 하는 이유</h3>

<p>UDF로 상태를 생성하는 흐름을 모델링할 수 있습니다. 또한 상태 변화가 일어나는 곳/변환되는 곳/최종적으로 소비되는 곳 세 가지를 명확하게 분리할 수 있습니다. 이를 통해 UI는 상태를 관찰하면서 데이터를 표시하고 변경 사항을 ViewModel에 전달하여 사용자의 의도를 전달할 수 있습니다.</p>

<ul>
  <li>UDF 사용의 이점
    <ul>
      <li><strong>데이터 일관성 유지</strong>: UI에 대한 데이터는 하나의 출처만 존재하게 됩니다.</li>
      <li><strong>테스트 용이성</strong>: 상태 소스가 분리되어 있어 UI와 독립적으로 테스트 가능합니다.</li>
      <li><strong>유지보수성</strong>: 상태의 변화는 잘 정의된 패턴을 따르며, 변화는 사용자의 이벤트와 이벤트에 의해 얻은 데이터 소스의 결과입니다.</li>
    </ul>
  </li>
</ul>

<h2 id="ui-상태-노출">UI 상태 노출</h2>

<p>UI 상태를 정의하고 해당 상태의 생성을 관리하는 방법을 결정한 후, 다음 단계는 생성된 상태를 UI에 표시하는 것입니다. UDF를 사용하여 상태 생성을 관리하기 때문에 생성된 상태를 스트림(흐름)으로 간주할 수 있습니다. 다시 말해, 시간이 지남에 따라 여러 버전의 상태가 생성될 것입니다. 따라서 UI 상태를 <code class="language-plaintext highlighter-rouge">LiveData</code> 또는 <code class="language-plaintext highlighter-rouge">StateFlow</code>와 같은 관찰 가능한 데이터 홀더에 노출해야 합니다. 그 이유는 ViewModel에서 직접 데이터를 수동으로 가져올 필요 없이 UI가 상태의 모든 변경 사항에 반응할 수 있도록 하기 위해서입니다. 또한 이러한 유형은 항상 최신의 UI 상태가 캐시되어 있어 구성 변경 후 상태를 빠르게 복원하는 데 유용합니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">NewsViewModel</span><span class="p">(</span><span class="o">..</span><span class="p">.)</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Compose</span>
    <span class="kd">val</span> <span class="py">uiState</span><span class="p">:</span> <span class="nc">NewsUiState</span> <span class="p">=</span> <span class="err">…</span>

    <span class="c1">// Views</span>
    <span class="kd">val</span> <span class="py">uiState</span><span class="p">:</span> <span class="nc">StateFlow</span><span class="p">&lt;</span><span class="nc">NewsUiState</span><span class="p">&gt;</span> <span class="p">=</span> <span class="err">…</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>참고: Compose에서는 Compose 전용인 관찰 가능한 <code class="language-plaintext highlighter-rouge">State APIs</code>를 사용할 수 있습니다. <code class="language-plaintext highlighter-rouge">mutableStateOf</code>, <code class="language-plaintext highlighter-rouge">snapshotFlow</code>등이 있으며 UI 상태를 노출하는데에 쓰입니다. 물론 <code class="language-plaintext highlighter-rouge">LiveData</code>와 <code class="language-plaintext highlighter-rouge">StateFlow</code>도 추가적인 <a href="https://developer.android.com/jetpack/compose/libraries#streams">확장 함수</a>를 통해 쓸수 있습니다.</p>
</blockquote>

<p>UI에 노출되는 데이터가 단순하다면, 데이터를 UI 상태로 감싸는 것이 좋습니다. 왜냐하면 UI 상태는 State holder의 방출과 관련된 화면 또는 UI 요소 사이의 관계를 전달하기 때문입니다. 또한 UI 요소가 더 복잡해진다면 UI 요소를 표시하는데 필요한 추가 정보를 수용하기 위해 UI 상태 정의에 추가하는게 더 낫습니다.</p>

<p><code class="language-plaintext highlighter-rouge">UiState</code> 스트림을 만들려면 ViewModel의 가변 스트림을 불변 스트림으로 노출시키면 됩니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">NewsViewModel</span><span class="p">(</span><span class="o">..</span><span class="p">.)</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Compose</span>
    <span class="kd">var</span> <span class="py">uiState</span> <span class="k">by</span> <span class="nf">mutableStateOf</span><span class="p">(</span><span class="nc">NewsUiState</span><span class="p">())</span>
        <span class="k">private</span> <span class="k">set</span>

    <span class="c1">// Views</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">_uiState</span> <span class="p">=</span> <span class="nc">MutableStateFlow</span><span class="p">(</span><span class="nc">NewsUiState</span><span class="p">())</span>
    <span class="kd">val</span> <span class="py">uiState</span><span class="p">:</span> <span class="nc">StateFlow</span><span class="p">&lt;</span><span class="nc">NewsUiState</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_uiState</span><span class="p">.</span><span class="nf">asStateFlow</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>ViewModel은 내부적으로 상태를 바꾸는 메서드를 노출시켜서 UI가 사용할 업데이트를 만들어 낼 수 있습니다. 예를 들어, 다음과 같은 비동기 작업을 가정해봅시다. <code class="language-plaintext highlighter-rouge">viewModelScope</code>에서 동작하는 코루틴이 있고 코루틴이 완료될 때 상태가 업데이트 되는 로직입니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">NewsViewModel</span><span class="p">(</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">repository</span><span class="p">:</span> <span class="nc">NewsRepository</span><span class="p">,</span>
    <span class="o">..</span><span class="p">.</span>
<span class="p">)</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Compose</span>
    <span class="kd">var</span> <span class="py">uiState</span> <span class="k">by</span> <span class="nf">mutableStateOf</span><span class="p">(</span><span class="nc">NewsUiState</span><span class="p">())</span>
        <span class="k">private</span> <span class="k">set</span>

    <span class="c1">// Views</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">_uiState</span> <span class="p">=</span> <span class="nc">MutableStateFlow</span><span class="p">(</span><span class="nc">NewsUiState</span><span class="p">())</span>
    <span class="kd">val</span> <span class="py">uiState</span><span class="p">:</span> <span class="nc">StateFlow</span><span class="p">&lt;</span><span class="nc">NewsUiState</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_uiState</span><span class="p">.</span><span class="nf">asStateFlow</span><span class="p">()</span>

    <span class="k">private</span> <span class="kd">var</span> <span class="py">fetchJob</span><span class="p">:</span> <span class="nc">Job</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>

    <span class="k">fun</span> <span class="nf">fetchArticles</span><span class="p">(</span><span class="n">category</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fetchJob</span><span class="o">?.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="n">fetchJob</span> <span class="p">=</span> <span class="n">viewModelScope</span><span class="p">.</span><span class="nf">launch</span> <span class="p">{</span>
            <span class="k">try</span> <span class="p">{</span>
                <span class="kd">val</span> <span class="py">newsItems</span> <span class="p">=</span> <span class="n">repository</span><span class="p">.</span><span class="nf">newsItemsForCategory</span><span class="p">(</span><span class="n">category</span><span class="p">)</span>

                <span class="c1">// Compose</span>
                <span class="n">uiState</span> <span class="p">=</span> <span class="n">uiState</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">newsItems</span> <span class="p">=</span> <span class="n">newsItems</span><span class="p">)</span>

                <span class="c1">// Views</span>
                <span class="n">_uiState</span><span class="p">.</span><span class="nf">update</span> <span class="p">{</span>
                    <span class="n">it</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">newsItems</span> <span class="p">=</span> <span class="n">newsItems</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">ioe</span><span class="p">:</span> <span class="nc">IOException</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// 오류를 처리하여 UI에 알립니다</span>
                <span class="c1">// Compose</span>
                <span class="kd">val</span> <span class="py">messages</span> <span class="p">=</span> <span class="nf">getMessagesFromThrowable</span><span class="p">(</span><span class="n">ioe</span><span class="p">)</span>
                <span class="n">uiState</span> <span class="p">=</span> <span class="n">uiState</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">userMessages</span> <span class="p">=</span> <span class="n">messages</span><span class="p">)</span>

                <span class="c1">// Views</span>
                <span class="n">_uiState</span><span class="p">.</span><span class="nf">update</span> <span class="p">{</span>
                    <span class="kd">val</span> <span class="py">messages</span> <span class="p">=</span> <span class="nf">getMessagesFromThrowable</span><span class="p">(</span><span class="n">ioe</span><span class="p">)</span>
                    <span class="n">it</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">userMessages</span> <span class="p">=</span> <span class="n">messages</span><span class="p">)</span>
                 <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">NewsViewModel</code>은 특정 카테고리의 기사들을 가져와서 UI가 반응할 수 있도록 UI 상태에 성공 또는 실패의 결과를 반영하는 작업을 합니다.</p>

<blockquote>
  <p>위의 예제에서 ViewModel의 메서드로 상태가 변경되는 것은 가장 널리쓰이는 UDF의 구현 방식입니다.</p>
</blockquote>

<h3 id="추가-고려-사항">추가 고려 사항</h3>

<p>UI 상태를 노출할 때에는 다음의 내용들을 고려해야 합니다.</p>

<h4 id="ui-상태-객체는-서로-연관된-상태들을-다루어야-합니다">UI 상태 객체는 서로 연관된 상태들을 다루어야 합니다.</h4>

<p>이를 지키면 상태의 불일치가 줄어들고 코드를 이해하기 더 수월해집니다. 만약 뉴스 기사 목록과 북마크한 개수를 서로 다른 스트림에 노출시킨다면, 한 스트림이 제대로 업데이트 되지 않는 오류가 발생할 수 있습니다. 이를 방지하기 위해서 단일 스트림에 두 개를 노출시켜야 합니다. 또한 일부 비즈니스 로직에는 여러 개의 소스들의 조합이 필요할 수도 있습니다. 예를 들어, 사용자가 로그인한 상태이면서 프리미엄 뉴스 구독자인 경우에만 북마크 버튼을 보여줘야 하는 경우가 있습니다. 이때 다음과 같이 UI 상태를 정의할 수 있습니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">NewsUiState</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">isSignedIn</span><span class="p">:</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">isPremium</span><span class="p">:</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">newsItems</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">NewsItemUiState</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">listOf</span><span class="p">()</span>
<span class="p">)</span>

<span class="kd">val</span> <span class="py">NewsUiState</span><span class="p">.</span><span class="n">canBookmarkNews</span><span class="p">:</span> <span class="nc">Boolean</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">isSignedIn</span> <span class="p">&amp;&amp;</span> <span class="n">isPremium</span>
</code></pre></div></div>

<p>북마크 버튼의 표시 여부를 두 개의 속성을 조합하여 결정하고 있습니다. 비즈니스 로직이 복잡해짐에 따라 모든 속성을 즉시 사용할 수 있는 단일 <code class="language-plaintext highlighter-rouge">UiState</code>클래스가 점점 더 중요해지고 있습니다.</p>

<h4 id="ui-상태-단일-스트림-또는-복수-스트림">UI 상태: 단일 스트림 또는 복수 스트림</h4>

<p>UI 상태를 단일과 복수 스트림 중 무엇으로 노출시켜야 할지를 결정할 때 중요한 것은 앞서 방출되는 항목 간의 관계를 살피는 것 입니다. 단일 스트림 노출의 장점은 편의성과 데이터 일관성에 입니다. 상태를 소비하는 측에서는 항상 최신의 정보를 사용할 수 있습니다. 하지만 분리된 상태 스트림을 쓰는게 더 적절한 경우도 있습니다.</p>

<ul>
  <li>서로 관련이 없는 데이터 유형일 때
    <ul>
      <li>UI를 표시하기 위해 필요한 일부 상태는 서로 관련이 없을 수도 있습니다.</li>
      <li>이러한 상태 중 하나가 다른 것보다 훨씬 빈번하게 업데이트 된다면 스트림을 분리하는게 더 낫습니다. 서로 다른 상태를 묶는 비용이 이점보다 더 클 수 있기 때문입니다.</li>
    </ul>
  </li>
  <li>UI 상태 차이
    <ul>
      <li><code class="language-plaintext highlighter-rouge">UiState</code> 객체에 필드가 많을수록 필드 중 하나가 업데이트될 때 스트림이 생성될 가능성이 높아집니다. 뷰는 연속적인 방출이 같거나 다른지의 여부를 파악할 수 없기 때문에, 모든 방출은 뷰의 업데이트를 발생시킵니다. 이러한 부분은  <code class="language-plaintext highlighter-rouge">Flow</code> 또는 <code class="language-plaintext highlighter-rouge">LiveData</code>의 <code class="language-plaintext highlighter-rouge">distinctUntilChanged</code>같은 메서드를 사용하여 완화시킬 수 있습니다.</li>
    </ul>
  </li>
</ul>

<h2 id="ui-상태를-사용소비">UI 상태를 사용(소비)</h2>

<p>UI에서 <code class="language-plaintext highlighter-rouge">UiState</code> 객체의 스트림을 사용하려면, 사용중인 관찰 가능한 데이터 유형에 대해 종단(terminal) 연산자를 사용하면 됩니다. 예를 들어, <code class="language-plaintext highlighter-rouge">LiveData</code>에는 <code class="language-plaintext highlighter-rouge">observe()</code>메서드를, <code class="language-plaintext highlighter-rouge">Flow</code>에는 <code class="language-plaintext highlighter-rouge">collect()</code>메서드, 또는 그 변형을 사용합니다.</p>

<p>UI에서 관찰 가능한 Data holders를 사용할 때는, UI의 생명 주기를 따라야 합니다. 뷰가 화면에 보이지 않을 때는 UI가 UI 상태를 관찰하지 않아야 하기 때문입니다. 이와 관련된 내용은 <a href="https://medium.com/androiddevelopers/a-safer-way-to-collect-flows-from-android-uis-23080b1f8bda">A safer way to collect flows from Android UIs</a> 페이지를 추천드립니다. <code class="language-plaintext highlighter-rouge">LiveData</code>를 쓰는 경우에는, <code class="language-plaintext highlighter-rouge">LifecyclerOwner</code>는 암시적으로 생명 주기 문제를 처리하며, <code class="language-plaintext highlighter-rouge">Flow</code>를 쓴다면 적절한 <code class="language-plaintext highlighter-rouge">Coroutine scope</code>와 <code class="language-plaintext highlighter-rouge">repeatOnLifecycle API</code>를 사용하여 생명 주기에 따른 로직을 처리해야 합니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Views</span>
<span class="kd">class</span> <span class="nc">NewsActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>

    <span class="k">private</span> <span class="kd">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="nc">NewsViewModel</span> <span class="k">by</span> <span class="nf">viewModels</span><span class="p">()</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="o">..</span><span class="p">.</span>

        <span class="n">lifecycleScope</span><span class="p">.</span><span class="nf">launch</span> <span class="p">{</span>
            <span class="nf">repeatOnLifecycle</span><span class="p">(</span><span class="nc">Lifecycle</span><span class="p">.</span><span class="nc">State</span><span class="p">.</span><span class="nc">STARTED</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">viewModel</span><span class="p">.</span><span class="n">uiState</span><span class="p">.</span><span class="nf">collect</span> <span class="p">{</span>
                    <span class="c1">// UI 요소를 업데이트</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Compose</span>
<span class="nd">@Composable</span>
<span class="k">fun</span> <span class="nf">LatestNewsScreen</span><span class="p">(</span>
    <span class="n">viewModel</span><span class="p">:</span> <span class="nc">NewsViewModel</span> <span class="p">=</span> <span class="nf">viewModel</span><span class="p">()</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="c1">// viewModel.uiState에 따라 UI 요소를 업데이트</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>예제의 <code class="language-plaintext highlighter-rouge">StateFlow</code> 객체는 활성화된 수집기가 없을 때 작업을 중단하지 않지만, flow로 작업할 때 그것들이 어떻게 구현되는지 모를 수 있습니다. 생명 주기를 인식하는 flow를 사용하면 나중에 ViewModel flow에 이러한 변경을 하더라도 하위 수집 코드를 다시 검토할 필요 없이 조정할 수 있습니다.</p>
</blockquote>

<h3 id="작업-중임을-나타내기">작업 중임을 나타내기</h3>

<p><code class="language-plaintext highlighter-rouge">UiState</code>에서 로딩중이라는 것을 나타내는 가장 쉬운 방법은 <code class="language-plaintext highlighter-rouge">boolean</code> 필드를 사용하는 것입니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">NewsUiState</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">isFetchingArticles</span><span class="p">:</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
    <span class="o">..</span><span class="p">.</span>
<span class="p">)</span>

<span class="err">이</span> <span class="n">flag</span><span class="err">의</span> <span class="err">값은</span> <span class="nc">UI</span><span class="err">에서</span> <span class="n">progress</span> <span class="n">bar</span><span class="err">의</span> <span class="err">표시</span> <span class="err">여부를</span> <span class="err">나타냅니다</span><span class="p">.</span>  

<span class="err">``</span><span class="n">`kotlin</span>
<span class="c1">// Views</span>
<span class="kd">class</span> <span class="nc">NewsActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>

    <span class="k">private</span> <span class="kd">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="nc">NewsViewModel</span> <span class="k">by</span> <span class="nf">viewModels</span><span class="p">()</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="o">..</span><span class="p">.</span>

        <span class="n">lifecycleScope</span><span class="p">.</span><span class="nf">launch</span> <span class="p">{</span>
            <span class="nf">repeatOnLifecycle</span><span class="p">(</span><span class="nc">Lifecycle</span><span class="p">.</span><span class="nc">State</span><span class="p">.</span><span class="nc">STARTED</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// progressBar의 가시성을 isFetchingArticles의 상태와 결합</span>
                <span class="n">viewModel</span><span class="p">.</span><span class="n">uiState</span>
                    <span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">isFetchingArticles</span> <span class="p">}</span>
                    <span class="p">.</span><span class="nf">distinctUntilChanged</span><span class="p">()</span>
                    <span class="p">.</span><span class="nf">collect</span> <span class="p">{</span> <span class="n">progressBar</span><span class="p">.</span><span class="n">isVisible</span> <span class="p">=</span> <span class="n">it</span> <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Compose</span>
<span class="nd">@Composable</span>
<span class="k">fun</span> <span class="nf">LatestNewsScreen</span><span class="p">(</span>
    <span class="n">modifier</span><span class="p">:</span> <span class="nc">Modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">,</span>
    <span class="n">viewModel</span><span class="p">:</span> <span class="nc">NewsViewModel</span> <span class="p">=</span> <span class="nf">viewModel</span><span class="p">()</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="nc">Box</span><span class="p">(</span><span class="n">modifier</span><span class="p">.</span><span class="nf">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">viewModel</span><span class="p">.</span><span class="n">uiState</span><span class="p">.</span><span class="n">isFetchingArticles</span><span class="p">)</span> <span class="p">{</span>
            <span class="nc">CircularProgressIndicator</span><span class="p">(</span><span class="nc">Modifier</span><span class="p">.</span><span class="nf">align</span><span class="p">(</span><span class="nc">Alignment</span><span class="p">.</span><span class="nc">Center</span><span class="p">))</span>
        <span class="p">}</span>

        <span class="c1">// 리스트같은 다른 UI 요소를 업데이트</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="화면에서-오류-발생을-나타내기">화면에서 오류 발생을 나타내기</h3>

<p>화면에서 오류 발생을 표시하는 것과 로딩 중임을 표시하는 것 모두 유사합니다. 왜냐하면 둘다 <code class="language-plaintext highlighter-rouge">boolean</code> 필드로 간단히 표현될 수 있기 때문입니다. 그러나 오류는 때에 따라서 사용자에게 관련한 메시지를 보여주거나 실패한 작업을 재시도하는 작업을 포함하기도 합니다. 따라서 진행 중인 작업을 로딩 중이거나 로딩 중이지 않은 두 가지로 분류하는 것처럼 오류 상태는 오류와 관련된 데이터를 포함하는 데이터 클래스로 모델링될 필요가 있습니다.</p>

<p>예를 들어, 기사 목록을 가져오고 있을 때 progress bar를 보여주는 작업을 생각해보세요. 만약 작업이 실패한다면 사용자에게 오류 메시지를 보여줘야 할 수 있습니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">Message</span><span class="p">(</span><span class="kd">val</span> <span class="py">id</span><span class="p">:</span> <span class="nc">Long</span><span class="p">,</span> <span class="kd">val</span> <span class="py">message</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span>

<span class="kd">data class</span> <span class="nc">NewsUiState</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">userMessages</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">Message</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">listOf</span><span class="p">(),</span>
    <span class="o">..</span><span class="p">.</span>
<span class="p">)</span>
</code></pre></div></div>

<p>오류 메시지는 snackbar와 같은 UI 요소로 사용자에게 보여져야 합니다. 왜냐하면 이는 UI 요소가 어떻게 생성/소비되는지와 연관되어있기 때문입니다. 더 자세한 내용은 <a href="https://developer.android.com/jetpack/guide/ui-layer/events">UI events</a> 페이지를 참고하세요.</p>

<h2 id="스레드와-동시성">스레드와 동시성</h2>

<p>ViewModel에서 수행되는 작업은 메인 스레드에서 호출되어도 안전해야합니다. 왜냐하면 Data/Domain 계층은 다른 스레드로 작업을 넘기는 것에 대한 책임이 있기 때문입니다.</p>

<p>만약 ViewModel에서 오래 걸리는 작업을 수행한다면, 백그라운드 스레드에서 수행하는게 좋습니다. 코루틴은 동시 작업을 관리하는 데 좋은 방법입니다. 그리고 Jetpack 아키텍처 컴포넌트는 이를 위한 기능을 지원하고 있습니다. <a href="https://developer.android.com/kotlin/coroutines">Kotlin coroutines on Android</a> 페이지를 살펴보세요.</p>

<h2 id="네비게이션">네비게이션</h2>

<p>앱 네비게이션의 변경은 종종 이벤트와 같은 방출로 인해 일어납니다. 예를 들어, <code class="language-plaintext highlighter-rouge">SignInViewModel</code>에서 로그인 작업을 수행한 후에 UI 상태 클래스는 <code class="language-plaintext highlighter-rouge">isSignedIn</code>의 값을 <code class="language-plaintext highlighter-rouge">true</code>로 설정되어야 합니다. 이러한 트리거는 <a href="">UI 상태를 사용(소비)</a>에서 다룬 것과 같이 소비되어야 하지만, 소비 로직의 구현은 <a href="https://developer.android.com/guide/navigation">Navigation component</a>에 의존해야 합니다.</p>

<h2 id="페이징">페이징</h2>

<p><a href="https://developer.android.com/topic/libraries/architecture/paging/v3-overview">Paging library</a>는 <code class="language-plaintext highlighter-rouge">PagingData</code>라는 타입으로 UI에서 소비됩니다. <code class="language-plaintext highlighter-rouge">PagingData</code>는 시간이 지남에 따라 바뀔 수 있는 데이터를 보여주고 표현한다는 점에서 불변 타입이 아니므로 불변 UI 상태로 표시되어선 안됩니다. 대신 독립적인 스트림으로 ViewModel에서 노출시켜야 합니다. 자세한 내용은 <a href="https://developer.android.com/codelabs/android-paging">Android Paging</a>을 참고해보세요.</p>

<h2 id="애니메이션">애니메이션</h2>

<p>자연스럽고 부드러운 최상위 수준의 네비게이션 전환을 제공하려면, 애니메이션이 시작되기 전에 데이터를 불러고기 위해 잠시동안 화면을 대기 상태로 만들어야 합니다. Android View 프레임워크는 <code class="language-plaintext highlighter-rouge">postponeEnteTransition()</code>, <code class="language-plaintext highlighter-rouge">startPostponedEnterTransition()</code>으로 프래그먼트 목적지 간 전환에 지연을 시키는 기능을 제공합니다. 이런 API는 두 번째 화면(네트워크에서 가져온 사진)으로 전환하는 애니메이션을 시작하기 전에 화면의 UI 요소가 준비되었는지 확인하는 방법을 제공합니다. 자세한 내용은 <a href="https://github.com/android/animation-samples/tree/main/Motion">Android Motion sample</a>을 참고해보세요.</p>

<h2 id="샘플">샘플</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: center">[Sunflower with Compose](https://github.com/android/sunflower/tree/main)</th>
      <th style="text-align: center">[Now in Android App](https://github.com/android/nowinandroid/tree/main)</th>
      <th style="text-align: center">[Architecture starter template(single module)](https://github.com/android/architecture-templates/tree/base)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">![](https://raw.github.com/android/sunflower//main//screenshots/SunflowerM3Screenshots.png)</td>
      <td style="text-align: center">![](https://raw.github.com/android/nowinandroid//main//docs/images/screenshots.png)</td>
      <td style="text-align: center">![](https://github.com/android/architecture-templates/raw/main/screenshots.png)</td>
    </tr>
    <tr>
      <td style="text-align: center">[Architecture](https://github.com/android/architecture-samples/tree/main)</td>
      <td style="text-align: center">[Architecture starter template(multi module)](https://github.com/android/architecture-templates/tree/multimodule)</td>
      <td style="text-align: center">[Jetcaster sample](https://github.com/android/compose-samples/tree/main/Jetcaster)</td>
    </tr>
    <tr>
      <td style="text-align: center">![](https://raw.github.com/android/architecture-samples//main//screenshots/screenshots.png)</td>
      <td style="text-align: center">![](https://github.com/android/architecture-templates/raw/main/screenshots.png)</td>
      <td style="text-align: center">![](https://raw.github.com/android/compose-samples//main/Jetcaster//docs/screenshots.png)</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Junsung Park</name></author><category term="Android" /><category term="Android" /><summary type="html"><![CDATA[UI layer]]></summary></entry><entry><title type="html">코루틴에서의 예외 처리 정리</title><link href="https://pknujsp.github.io//jekyll-theme-yat/kotlin/coroutines/2023/11/12/%EC%BD%94%EB%A3%A8%ED%8B%B4%EC%97%90%EC%84%9C%EC%9D%98-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC.html" rel="alternate" type="text/html" title="코루틴에서의 예외 처리 정리" /><published>2023-11-12T00:00:00+09:00</published><updated>2023-11-12T00:00:00+09:00</updated><id>https://pknujsp.github.io//jekyll-theme-yat/kotlin/coroutines/2023/11/12/%EC%BD%94%EB%A3%A8%ED%8B%B4%EC%97%90%EC%84%9C%EC%9D%98%20%EC%98%88%EC%99%B8%20%EC%B2%98%EB%A6%AC</id><content type="html" xml:base="https://pknujsp.github.io//jekyll-theme-yat/kotlin/coroutines/2023/11/12/%EC%BD%94%EB%A3%A8%ED%8B%B4%EC%97%90%EC%84%9C%EC%9D%98-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC.html"><![CDATA[<h2 id="코루틴에서-예외가-발생하면-부모-코루틴으로-예외가-전파되고-부모와-형제-코루틴이-모두-취소된다">코루틴에서 예외가 발생하면, 부모 코루틴으로 예외가 <strong>전파</strong>되고, 부모와 형제 코루틴이 모두 취소된다.</h2>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">():</span> <span class="nc">Unit</span> <span class="p">=</span> <span class="nf">runBlocking</span> <span class="p">{</span>
    <span class="c1">// A</span>
    <span class="nf">launch</span> <span class="p">{</span>
        <span class="c1">// A-A</span>
        <span class="nf">launch</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="nc">Error</span><span class="p">(</span><span class="s">"A-A의 예외"</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="c1">// A-B</span>
        <span class="nf">launch</span> <span class="p">{</span>
            <span class="nf">println</span><span class="p">(</span><span class="s">"A-B"</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="c1">// A-C</span>
        <span class="nf">launch</span> <span class="p">{</span>
            <span class="nf">println</span><span class="p">(</span><span class="s">"A-C"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// B</span>
    <span class="nf">launch</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nc">B</span>
<span class="nc">Exception</span> <span class="k">in</span> <span class="n">thread</span> <span class="s">"main"</span> <span class="n">java</span><span class="p">.</span><span class="n">lang</span><span class="p">.</span><span class="nc">Error</span><span class="p">:</span> <span class="nc">A-A</span><span class="err">의</span> <span class="err">예외</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">A-A</code>에서 발생한 예외가 전파되어, 모든 코루틴<code class="language-plaintext highlighter-rouge">[A-B, A-C, B]</code>이 취소된다. 다음 그림은 위 코드내 코루틴의 계층도를 나타낸다.</p>

<p><img src="https://github-production-user-asset-6210df.s3.amazonaws.com/48265129/284053629-7d87d150-f8e7-4eb8-9eee-c1460c95bf58.png" alt="코루틴 예외" /></p>

<p>작업하나가 실패하더라도 다른 작업에 영향을 주지 않아야 하는 경우, 이를 처리하는 방법을 알아보자.</p>

<h2 id="코루틴에서-발생한-오류를-전파시키지-않도록-하는-방법">코루틴에서 발생한 오류를 전파시키지 않도록 하는 방법</h2>

<h3 id="1-supervisorjob">1. SupervisorJob</h3>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">SupervisorJob</code>를 사용하는 코루틴은 다른 코루틴에게 영향을 주지 않는다.</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SupervisorJob</code> : 자식 코루틴들은 서로 독립적으로 동작하여, 해당 코루틴에서 발생한 예외가 부모와 형제 코루틴에게 영향을 주지 않는다.</li>
  <li><code class="language-plaintext highlighter-rouge">Job</code> : 부모와 자식 코루틴은 서로 연결되어 있어, 예외가 전파된다.</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">suspend</span> <span class="k">fun</span> <span class="nf">main</span><span class="p">():</span> <span class="nc">Unit</span> <span class="p">=</span> <span class="nf">coroutineScope</span> <span class="p">{</span>
    <span class="c1">// A</span>
    <span class="nf">launch</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"A"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// B</span>
    <span class="nf">launch</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// C</span>
    <span class="kd">val</span> <span class="py">scope</span> <span class="p">=</span> <span class="nc">CoroutineScope</span><span class="p">(</span><span class="nc">SupervisorJob</span><span class="p">())</span>
    <span class="n">scope</span><span class="p">.</span><span class="nf">launch</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="nf">println</span><span class="p">(</span><span class="s">"C"</span><span class="p">)</span>
            <span class="k">throw</span> <span class="nc">Exception</span><span class="p">(</span><span class="s">"C의 예외"</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="nc">Exception</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">println</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nc">A</span>
<span class="nc">B</span>
<span class="nc">C</span>
<span class="n">java</span><span class="p">.</span><span class="n">lang</span><span class="p">.</span><span class="nc">Exception</span><span class="p">:</span> <span class="nc">C</span><span class="err">의</span> <span class="err">예외</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">C</code>에서 예외가 발생하였으나, 다른 코루틴에게 영향을 주지 않았다.</p>

<p><img src="https://github-production-user-asset-6210df.s3.amazonaws.com/48265129/284053630-3692d95c-9211-4a27-95b9-4227ac2ddfe3.png" alt="코루틴 예외-supervisorjob" /></p>

<h4 id="사용-방법">사용 방법</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. Scope를 만들 때 SupervisorJob을 컨텍스트로 포함시키기</span>
<span class="kd">val</span> <span class="py">scope</span> <span class="p">=</span> <span class="nc">CoroutineScope</span><span class="p">(</span><span class="nc">SupervisorJob</span><span class="p">())</span>
<span class="n">scope</span><span class="p">.</span><span class="nf">launch</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>

<span class="c1">// 2. 기존 Scope에 SupervisorJob을 추가하기</span>
<span class="nf">launch</span><span class="p">(</span><span class="nc">SupervisorJob</span><span class="p">())</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="부적절한-사용--withcontextsupervisorjob">부적절한 사용 : <code class="language-plaintext highlighter-rouge">withContext(SupervisorJob())</code></h4>

<p><code class="language-plaintext highlighter-rouge">withContext(SupervisorJob())</code>으로 사용하면, 의도와 달리 예외가 전파된다. 왜냐하면 <code class="language-plaintext highlighter-rouge">withContext</code>은 새로운 코루틴을 만드는 것이 아니라 기존 코루틴의 context를 임시적으로 변경하는 것이기 때문이다. 다시 말해, <code class="language-plaintext highlighter-rouge">SupervisorJob</code>으로 지정하여도 코루틴의 동작 방식을 바꿀 수 없기 떄문에 <code class="language-plaintext highlighter-rouge">SupervisorJob</code>의 특성이 적용되지 않는다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">suspend</span> <span class="k">fun</span> <span class="nf">analyzeData</span><span class="p">(</span><span class="n">dataList</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">Data</span><span class="p">&gt;)</span> <span class="p">=</span> 
    <span class="nf">withContext</span><span class="p">(</span><span class="nc">SupervisorJob</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">dataList</span><span class="p">.</span><span class="nf">forEach</span> <span class="p">{</span> <span class="n">data</span> <span class="p">-&gt;</span>
            <span class="nf">launch</span> <span class="p">{</span>
                <span class="kd">val</span> <span class="py">result</span> <span class="p">=</span> <span class="nf">analyze</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
                <span class="nf">notifyResult</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">launch</code>내에서 예외가 발생하면 다른 코루틴이 모두 취소된다.</p>

<h3 id="2-supervisorscope">2. supervisorScope</h3>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">supervisorScope</code>내의 코루틴은 서로 독립적으로 동작하여, 예외가 발생해도 다른 코루틴에게 영향을 주지 않는다.</p>
</blockquote>

<p>Scope내에서 생성되는 코루틴은 <code class="language-plaintext highlighter-rouge">SupervisorJob</code>으로 동작한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">suspend</span> <span class="k">fun</span> <span class="nf">main</span><span class="p">():</span> <span class="nc">Unit</span> <span class="p">=</span> <span class="nf">coroutineScope</span> <span class="p">{</span>
    <span class="c1">// A</span>
    <span class="nf">launch</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"A"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// B</span>
    <span class="nf">launch</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// C</span>
    <span class="nf">supervisorScope</span> <span class="p">{</span>
        <span class="nf">launch</span> <span class="p">{</span>
            <span class="k">try</span> <span class="p">{</span>
                <span class="nf">println</span><span class="p">(</span><span class="s">"C"</span><span class="p">)</span>
                <span class="k">throw</span> <span class="nc">Exception</span><span class="p">(</span><span class="s">"C의 예외"</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="nc">Exception</span><span class="p">)</span> <span class="p">{</span>
                <span class="nf">println</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nc">A</span>
<span class="nc">B</span>
<span class="nc">C</span>
<span class="n">java</span><span class="p">.</span><span class="n">lang</span><span class="p">.</span><span class="nc">Exception</span><span class="p">:</span> <span class="nc">C</span><span class="err">의</span> <span class="err">예외</span>
</code></pre></div></div>

<h3 id="3-exception클래스가-cancellationexception를-상속받도록-하기">3. Exception클래스가 <code class="language-plaintext highlighter-rouge">CancellationException</code>를 상속받도록 하기</h3>

<h4 id="예시--값이-홀수일-때-예외를-발생시키는-코드">예시 : 값이 홀수일 때 예외를 발생시키는 코드</h4>

<p>예외가 발생하면 부모, 자식 코루틴이 종료된다. 짝수일 때는 정상적으로 동작해야 하는데 취소되기 때문에 개선이 필요하다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">OddException</span><span class="p">(</span><span class="kd">val</span> <span class="py">value</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Exception</span><span class="p">()</span>

<span class="k">suspend</span> <span class="k">fun</span> <span class="nf">main</span><span class="p">():</span> <span class="nc">Unit</span> <span class="p">=</span> <span class="nf">coroutineScope</span> <span class="p">{</span>
    <span class="nf">repeat</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">launch</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="p">%</span> <span class="mi">2</span> <span class="p">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="nc">OddException</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="nf">println</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="mi">0</span>
<span class="mi">2</span>
<span class="mi">4</span>
<span class="nc">Exception</span> <span class="k">in</span> <span class="n">thread</span> <span class="s">"main"</span> <span class="nc">OddException</span><span class="p">(</span><span class="n">value</span><span class="p">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">OddException</code>를 <code class="language-plaintext highlighter-rouge">CancellationException</code>를 상속받도록 하면, 예외는 부모로 전파되지 않고, 예외가 발생한 코루틴만 취소된다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">OddException</span><span class="p">(</span><span class="kd">val</span> <span class="py">value</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">CancellationException</span><span class="p">()</span>

<span class="mi">0</span>
<span class="mi">2</span>
<span class="mi">4</span>
<span class="mi">6</span>
<span class="mi">8</span>
<span class="mi">10</span>
<span class="mi">12</span>
<span class="mi">14</span>
<span class="o">..</span><span class="p">.</span>
<span class="mi">98</span>
</code></pre></div></div>

<h2 id="코루틴에서-발생한-예외를-감지하는-방법">코루틴에서 발생한 예외를 감지하는 방법</h2>

<h3 id="1-try-catch-일반적인-방법">1. try-catch, 일반적인 방법</h3>

<p>가장 기초적인 방법으로 <code class="language-plaintext highlighter-rouge">try-catch</code>를 사용하여 예외를 감지할 수 있다.</p>

<p>코루틴 빌더 내에서 <code class="language-plaintext highlighter-rouge">try-catch</code>를 사용하면 된다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">launch</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nc">Exception</span><span class="p">(</span><span class="s">"예외 발생"</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="nc">Exception</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// try 내에서 발생한 예외에 대한 대응 로직을 작성</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>그러나 <code class="language-plaintext highlighter-rouge">try</code>문 내에 자식 코루틴이 있는 경우, 자식 코루틴에서 발생한 예외는 <code class="language-plaintext highlighter-rouge">try-catch</code>로 감지할 수 없다.</p>

<h3 id="try-catch로-예외를-감지할-수-없는-경우">try-catch로 예외를 감지할 수 없는 경우</h3>

<h4 id="try문-내에-자식-코루틴이-있을-때">try문 내에 자식 코루틴이 있을 때</h4>

<p>다음 코드와 같이 내부적으로 또 다른 코루틴이 있다면 그 코루틴에서 발생하는 예외는 <code class="language-plaintext highlighter-rouge">catch</code>로 감지할 수 없다. 즉, 계층 구조가 있는 코루틴에서는 <code class="language-plaintext highlighter-rouge">try-catch</code>로 예외를 감지할 수 없다는 것이다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="p">{</span>
    <span class="nf">launch</span> <span class="p">{</span>
        <span class="c1">// 자식 코루틴 A</span>
        <span class="k">throw</span> <span class="nc">Exception</span><span class="p">(</span><span class="s">"코루틴 A 예외"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// 새로운 Scope에서 코루틴 B를 실행</span>
    <span class="kd">val</span> <span class="py">scope</span> <span class="p">=</span> <span class="nc">CoroutineScope</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="nc">Default</span><span class="p">)</span>
    <span class="n">scope</span><span class="p">.</span><span class="nf">launch</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nc">Exception</span><span class="p">(</span><span class="s">"코루틴 B 예외"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="nc">Exception</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 호출되지 않음</span>
    <span class="c1">// 자식 코루틴의 예외를 감지할 수 없다.</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이러한 경우에는 루트 코루틴에서 <code class="language-plaintext highlighter-rouge">CoroutineExceptionHandler</code>를 사용하면 자식 코루틴의 예외를 감지할 수 있다.</p>

<h3 id="2-coroutineexceptionhandler">2. CoroutineExceptionHandler</h3>

<blockquote>
  <p>Scope내의 코루틴에서 발생한 예외를 감지할 수 있다, 보통 <code class="language-plaintext highlighter-rouge">launch</code> 빌더와 함께 쓰인다</p>
</blockquote>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">supervisorScope</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">exceptionHandler</span> <span class="p">=</span> <span class="nc">CoroutineExceptionHandler</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">throwable</span> <span class="p">-&gt;</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"예외 감지: $throwable"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nf">println</span><span class="p">(</span><span class="s">"ROOT"</span><span class="p">)</span>

    <span class="nf">launch</span><span class="p">(</span><span class="n">exceptionHandler</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"job : ROOT-A"</span><span class="p">)</span>

        <span class="nf">launch</span> <span class="p">{</span>
            <span class="nf">println</span><span class="p">(</span><span class="s">"job : ROOT-A-B"</span><span class="p">)</span>

            <span class="nf">launch</span> <span class="p">{</span>
                <span class="nf">println</span><span class="p">(</span><span class="s">"job : ROOT-A-B-C"</span><span class="p">)</span>

                <span class="nf">supervisorScope</span> <span class="p">{</span>
                    <span class="nf">launch</span> <span class="p">{</span>
                        <span class="k">throw</span> <span class="nc">Exception</span><span class="p">(</span><span class="s">"ROOT-A-B-C의 예외"</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nf">launch</span><span class="p">(</span><span class="n">exceptionHandler</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"job : ROOT-B"</span><span class="p">)</span>
        <span class="k">throw</span> <span class="nc">Exception</span><span class="p">(</span><span class="s">"ROOT-B의 예외"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nc">ROOT</span>
<span class="n">job</span> <span class="p">:</span> <span class="nc">ROOT-A</span>
<span class="n">job</span> <span class="p">:</span> <span class="nc">ROOT-B</span>
<span class="err">예외</span> <span class="err">감지</span><span class="p">:</span> <span class="n">java</span><span class="p">.</span><span class="n">lang</span><span class="p">.</span><span class="nc">Exception</span><span class="p">:</span> <span class="nc">ROOT-B</span><span class="err">의</span> <span class="err">예외</span>
<span class="n">job</span> <span class="p">:</span> <span class="nc">ROOT-A-B</span>
<span class="n">job</span> <span class="p">:</span> <span class="nc">ROOT-A-B-C</span>
<span class="err">예외</span> <span class="err">감지</span><span class="p">:</span> <span class="n">java</span><span class="p">.</span><span class="n">lang</span><span class="p">.</span><span class="nc">Exception</span><span class="p">:</span> <span class="nc">ROOT-A-B-C</span><span class="err">의</span> <span class="err">예외</span>
</code></pre></div></div>

<p><img src="https://github-production-user-asset-6210df.s3.amazonaws.com/48265129/284053611-15bca337-9c45-486b-8bae-d53b6bd6509c.png" alt="CoroutineExceptionHandler" /></p>

<h3 id="주의-사항">주의 사항</h3>

<h4 id="예외에-대해-복구한-후-후속-작업을-해야한다면-부적합">예외에 대해 복구한 후 후속 작업을 해야한다면 부적합</h4>

<blockquote>
  <p>예외가  <code class="language-plaintext highlighter-rouge">CoroutineExceptionHandler</code>에서 감지되었을 때, 해당 코루틴은 이미 실패 상태로 완료된 것이다. 따라서 <code class="language-plaintext highlighter-rouge">CoroutineExceptionHandler</code>에서 예외를 복구하고 다음 작업을 진행하는 것은 불가능하다.</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">try-catch</code>를 사용하여 따로 처리
    <ul>
      <li>예외에 대해서 대응하고 작업을 이어나가려면, 해당 코드를 <code class="language-plaintext highlighter-rouge">try-catch</code> 로 감싸서 예외를 직접 처리해야 한다.</li>
    </ul>
  </li>
</ul>

<h4 id="async에서는-try-catch를-사용해야-한다"><code class="language-plaintext highlighter-rouge">async</code>에서는 <code class="language-plaintext highlighter-rouge">try-catch</code>를 사용해야 한다.</h4>

<p>다음과 같이 <code class="language-plaintext highlighter-rouge">async</code>에서 발생한 예외는 <code class="language-plaintext highlighter-rouge">CoroutineExceptionHandler</code>에서 감지되지 않는다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">suspend</span> <span class="k">fun</span> <span class="nf">main</span><span class="p">():</span> <span class="nc">Unit</span> <span class="p">=</span> <span class="nf">supervisorScope</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">exceptionHandler</span> <span class="p">=</span> <span class="nc">CoroutineExceptionHandler</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">throwable</span> <span class="p">-&gt;</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"Handler 예외 감지: $throwable"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="nf">launch</span><span class="p">(</span><span class="n">exceptionHandler</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nc">AssertionError</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">val</span> <span class="py">deferred</span> <span class="p">=</span> <span class="nf">async</span><span class="p">(</span><span class="n">exceptionHandler</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nc">ArithmeticException</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">try</span> <span class="p">{</span>
        <span class="n">deferred</span><span class="p">.</span><span class="nf">await</span><span class="p">()</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="nc">Exception</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"catch 예외 감지: $e"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nc">Handler</span> <span class="err">예외</span> <span class="err">감지</span><span class="p">:</span> <span class="n">java</span><span class="p">.</span><span class="n">lang</span><span class="p">.</span><span class="nc">AssertionError</span>
<span class="k">catch</span> <span class="err">예외</span> <span class="err">감지</span><span class="p">:</span> <span class="n">java</span><span class="p">.</span><span class="n">lang</span><span class="p">.</span><span class="nc">ArithmeticException</span>
</code></pre></div></div>

<p>핸들러에서 감지되지 않는 이유는 <code class="language-plaintext highlighter-rouge">async</code>의 동작 방식의 특징 때문이다.</p>

<p><code class="language-plaintext highlighter-rouge">async</code>는 결과를 <code class="language-plaintext highlighter-rouge">Deferred</code> 객체에 담아서 반환하는데, <code class="language-plaintext highlighter-rouge">async</code>에서 발생하는 예외는 이 <code class="language-plaintext highlighter-rouge">Deferred</code>객체에 저장되고, <code class="language-plaintext highlighter-rouge">await()</code> 호출 시에 예외에 대해서 처리가 가능하다.
따라서, <code class="language-plaintext highlighter-rouge">async</code>에서 발생한 예외는 <code class="language-plaintext highlighter-rouge">CoroutineExceptionHandler</code>에 도달하지 않으므로, <code class="language-plaintext highlighter-rouge">await()</code>를 호출하는 쪽에서 <code class="language-plaintext highlighter-rouge">try-catch</code>로 예외를 처리해야 한다.</p>

<h4 id="delay-yield-등의-취소가능한-중단-함수는-취소될-때-cancellationexception을-발생시킨다"><code class="language-plaintext highlighter-rouge">delay()</code>, <code class="language-plaintext highlighter-rouge">yield()</code> 등의 취소가능한 중단 함수는 취소될 때 <code class="language-plaintext highlighter-rouge">CancellationException</code>을 발생시킨다.</h4>

<p>다음은 50MS 동안 대기한 후에 코루틴 <code class="language-plaintext highlighter-rouge">B</code>를 취소시키는 코드이다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">suspend</span> <span class="k">fun</span> <span class="nf">main</span><span class="p">():</span> <span class="nc">Unit</span> <span class="p">=</span> <span class="nf">coroutineScope</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">exceptionHandler</span> <span class="p">=</span> <span class="nc">CoroutineExceptionHandler</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">throwable</span> <span class="p">-&gt;</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"예외 감지: $throwable"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// A</span>
    <span class="nf">launch</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"A 시작, 200ms 대기"</span><span class="p">)</span>
        <span class="nf">delay</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"200ms 대기 종료, A 완료"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// B</span>
    <span class="kd">val</span> <span class="py">b</span> <span class="p">=</span> <span class="nf">launch</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="nf">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="nc">Exception</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">println</span><span class="p">(</span><span class="s">"catch에서 예외 처리: $e"</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"B 완료"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nf">delay</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">b</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
<span class="p">}</span>

<span class="nc">A</span> <span class="err">시작</span><span class="p">,</span> <span class="mi">200</span><span class="n">ms</span> <span class="err">대기</span>
<span class="n">catch</span><span class="err">에서</span> <span class="err">예외</span> <span class="err">처리</span><span class="p">:</span> <span class="n">kotlinx</span><span class="p">.</span><span class="n">coroutines</span><span class="p">.</span><span class="nc">JobCancellationException</span><span class="p">:</span> <span class="nc">StandaloneCoroutine</span> <span class="n">was</span> <span class="n">cancelled</span><span class="p">;</span> <span class="n">job</span><span class="p">=</span><span class="nc">StandaloneCoroutine</span><span class="p">{</span><span class="nc">Cancelling</span><span class="p">}</span><span class="err">@</span><span class="mf">17036f</span><span class="mi">98</span>
<span class="nc">B</span> <span class="err">완료</span>
<span class="mi">200</span><span class="n">ms</span> <span class="err">대기</span> <span class="err">종료</span><span class="p">,</span> <span class="nc">A</span> <span class="err">완료</span>
</code></pre></div></div>

<p>위 코드에는 다음과 같은 문제가 있다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">B</code>가 취소되었음에도 불구하고 <code class="language-plaintext highlighter-rouge">B 완료</code>가 출력됨</li>
  <li><code class="language-plaintext highlighter-rouge">SupervisorJob</code>, <code class="language-plaintext highlighter-rouge">supervisorScope</code>에서 처리되지 않음에도 <code class="language-plaintext highlighter-rouge">B</code>의 예외가 전파되지 않고 <code class="language-plaintext highlighter-rouge">A</code>가 정상적으로 동작함</li>
</ol>

<h5 id="문제의-원인-및-해결-방법">문제의 원인 및 해결 방법</h5>

<p>코루틴이 취소된다면 동작중인 <code class="language-plaintext highlighter-rouge">delay</code>는 <code class="language-plaintext highlighter-rouge">CancellationException</code>을 발생시키는데, <code class="language-plaintext highlighter-rouge">catch</code>에서 이 예외를 잡아서 대응을 하였기 때문에 <code class="language-plaintext highlighter-rouge">A 완료</code>가 출력된 것이며, 이 예외가 <code class="language-plaintext highlighter-rouge">catch</code>에서 잡히면서 부모로 전파되지 않아 <code class="language-plaintext highlighter-rouge">A</code>가 정상적으로 동작한 것이다.</p>

<p>이는 다음과 같이 정확하게 잡아야하는 예외를 감지하도록 하면 <strong>해결</strong>된다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="p">{</span>
    <span class="nf">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="nc">IllegalArgumentException</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"catch에서 예외 처리: $e"</span><span class="p">)</span>
<span class="p">}</span>
<span class="nf">println</span><span class="p">(</span><span class="s">"B 완료"</span><span class="p">)</span>

<span class="nc">A</span> <span class="err">시작</span><span class="p">,</span> <span class="mi">200</span><span class="n">ms</span> <span class="err">대기</span>
<span class="mi">200</span><span class="n">ms</span> <span class="err">대기</span> <span class="err">종료</span><span class="p">,</span> <span class="nc">A</span> <span class="err">완료</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">CancellationException</code>를 잡지 않고 정상적으로 코루틴 취소 예외가 부모 코루틴으로 전파되어 <code class="language-plaintext highlighter-rouge">A</code>가 취소되며 <code class="language-plaintext highlighter-rouge">B 완료</code>가 출력되지 않는다.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">CoroutineExceptionHandler</code>에서 <code class="language-plaintext highlighter-rouge">CancellationException</code>는 감지하지 않는다.</p>
</blockquote>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">CancellationException</code>은 코루틴이 취소 될 때 작동하는 메커니즘의 일부이므로, 오류가 아니기 때문에 굳이 이 예외를 감지하여 처리할 필요가 없다.</p>
</blockquote>

<h3 id="3-runcatching">3. runCatching</h3>

<p><code class="language-plaintext highlighter-rouge">runCatching</code>을 사용하여 좀 더 간결하게 예외를 감지할 수 있다.</p>

<p>예외가 발생하면 <code class="language-plaintext highlighter-rouge">onFailure</code> 함수에서 처리하며, <code class="language-plaintext highlighter-rouge">onSuccess</code> 함수에서는 정상적인 동작을 처리한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">suspend</span> <span class="k">fun</span> <span class="nf">main</span><span class="p">():</span> <span class="nc">Unit</span> <span class="p">=</span> <span class="nf">supervisorScope</span> <span class="p">{</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"ROOT"</span><span class="p">)</span>

    <span class="nf">launch</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"job : ROOT-A"</span><span class="p">)</span>

        <span class="nf">launch</span> <span class="p">{</span>
            <span class="nf">println</span><span class="p">(</span><span class="s">"job : ROOT-A-B"</span><span class="p">)</span>

            <span class="nf">launch</span> <span class="p">{</span>
                <span class="nf">println</span><span class="p">(</span><span class="s">"job : ROOT-A-B-C"</span><span class="p">)</span>

                <span class="nf">runCatching</span> <span class="p">{</span>
                    <span class="k">throw</span> <span class="nc">Exception</span><span class="p">(</span><span class="s">"ROOT-A-B-C의 예외"</span><span class="p">)</span>
                <span class="p">}.</span><span class="nf">onFailure</span> <span class="p">{</span> <span class="n">throwable</span> <span class="p">-&gt;</span>
                    <span class="nf">println</span><span class="p">(</span><span class="s">"예외 감지: $throwable"</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="nf">delay</span><span class="p">(</span><span class="mi">100L</span><span class="p">)</span>
            <span class="nf">println</span><span class="p">(</span><span class="s">"job : ROOT-A-B"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nf">launch</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"job : ROOT-B"</span><span class="p">)</span>
        <span class="nf">runCatching</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="nc">Exception</span><span class="p">(</span><span class="s">"ROOT-B의 예외"</span><span class="p">)</span>
        <span class="p">}.</span><span class="nf">onFailure</span> <span class="p">{</span> <span class="n">throwable</span> <span class="p">-&gt;</span>
            <span class="nf">println</span><span class="p">(</span><span class="s">"예외 감지: $throwable"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nc">ROOT</span>
<span class="n">job</span> <span class="p">:</span> <span class="nc">ROOT-A</span>
<span class="n">job</span> <span class="p">:</span> <span class="nc">ROOT-A-B-C</span>
<span class="n">job</span> <span class="p">:</span> <span class="nc">ROOT-B</span>
<span class="err">예외</span> <span class="err">감지</span><span class="p">:</span> <span class="n">java</span><span class="p">.</span><span class="n">lang</span><span class="p">.</span><span class="nc">Exception</span><span class="p">:</span> <span class="nc">ROOT-B</span><span class="err">의</span> <span class="err">예외</span>
<span class="err">예외</span> <span class="err">감지</span><span class="p">:</span> <span class="n">java</span><span class="p">.</span><span class="n">lang</span><span class="p">.</span><span class="nc">Exception</span><span class="p">:</span> <span class="nc">ROOT-A-B-C</span><span class="err">의</span> <span class="err">예외</span>
<span class="n">job</span> <span class="p">:</span> <span class="nc">ROOT-A-B</span>
</code></pre></div></div>

<p>이 함수는 <code class="language-plaintext highlighter-rouge">try-catch</code>와 유사한 역할을 하기 때문에, 자식 코루틴에서 발생하는 예외에 대해서는 감지하지 못한다.</p>

<p>다음 코드에서는 <code class="language-plaintext highlighter-rouge">ROOT-A-B-C</code>에서 발생한 예외를 <code class="language-plaintext highlighter-rouge">runCatching</code>으로 감지할 수 없으며, 예외가 전파되어 모든 코루틴이 종료된다.(<code class="language-plaintext highlighter-rouge">CoroutineExceptionHandler</code>를 사용하면 된다)</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">runCatching</span> <span class="p">{</span>
    <span class="nf">launch</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nc">Exception</span><span class="p">(</span><span class="s">"ROOT-A-B-C의 예외"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}.</span><span class="nf">onFailure</span> <span class="p">{</span> <span class="n">throwable</span> <span class="p">-&gt;</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"예외 감지: $throwable"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="사용-방법-1">사용 방법</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">runCatching</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="nc">Exception</span><span class="p">(</span><span class="s">"ROOT-A-B-C의 예외"</span><span class="p">)</span>
<span class="p">}.</span><span class="nf">onFailure</span> <span class="p">{</span> <span class="n">throwable</span> <span class="p">-&gt;</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"예외 감지: $throwable"</span><span class="p">)</span>
<span class="p">}.</span><span class="nf">onSuccess</span> <span class="p">{</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"정상 동작"</span><span class="p">)</span>
<span class="p">}</span>


<span class="c1">// 함수 형태</span>
<span class="k">inline</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="nc">T</span><span class="p">,</span> <span class="nc">R</span><span class="p">&gt;</span> <span class="nc">T</span><span class="p">.</span><span class="nf">runCatching</span><span class="p">(</span><span class="n">block</span><span class="p">:</span> <span class="nc">T</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="nc">R</span><span class="p">):</span> <span class="nc">Result</span><span class="p">&lt;</span><span class="nc">R</span><span class="p">&gt;</span>
<span class="k">inline</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="nc">R</span><span class="p">&gt;</span> <span class="nf">runCatching</span><span class="p">(</span><span class="n">block</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="nc">R</span><span class="p">):</span> <span class="nc">Result</span><span class="p">&lt;</span><span class="nc">R</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>위와 같이 <code class="language-plaintext highlighter-rouge">onFailure</code>와 <code class="language-plaintext highlighter-rouge">onSuccess</code>를 사용하면 되고, 반환 타입은 <code class="language-plaintext highlighter-rouge">Result&lt;R&gt;</code>이다.</p>

<h2 id="정리">정리</h2>

<p>기본적으로 코루틴에서 발생하는 예외는 부모 코루틴으로 전파되며, 이는 연결된 모든 자식 코루틴들에 영향을 미친다. 따라서, 각 코루틴에서 예외를 어떻게 처리할지를 명확히 결정하는 것이 중요하다. <code class="language-plaintext highlighter-rouge">try-catch</code> 는 특정 코루틴 내에서 발생한 예외를 직접 처리하는 가장 기본적인 방법이다. 반면 <code class="language-plaintext highlighter-rouge">SupervisorJob</code>과 <code class="language-plaintext highlighter-rouge">supervisorScope</code>는 코루틴 간 예외의 독립적 처리를 가능하게 하여, 하나의 코루틴 실패가 다른 코루틴에 영향을 미치지 않도록 한다.</p>

<p><code class="language-plaintext highlighter-rouge">CoroutineExceptionHandler</code>는 감지되지 못한 예외를 감지할 수 있는데, 주로 로깅, 에러 메시지 표시, 프로그램의 재시작 등에 사용된다. 하지만, <code class="language-plaintext highlighter-rouge">CoroutineExceptionHandler</code>에서 예외를 복구하거나 코루틴의 실행을 계속하는 것은 불가능하다.</p>

<p>코루틴의 취소 메커니즘은 <code class="language-plaintext highlighter-rouge">CancellationException</code>을 통해 이루어되며, 코루틴의 취소는 프로그램의 정상적인 흐름의 일부로, 별도의 처리를 요구하지 않는다.</p>]]></content><author><name>Junsung Park</name></author><category term="Kotlin" /><category term="Coroutines" /><category term="Kotlin" /><category term="Coroutines" /><summary type="html"><![CDATA[코루틴에서 예외가 발생하면, 부모 코루틴으로 예외가 전파되고, 부모와 형제 코루틴이 모두 취소된다.]]></summary></entry><entry><title type="html">Android DataBinding, ViewBinding이 파일을 생성하는 방법</title><link href="https://pknujsp.github.io//jekyll-theme-yat/android/2023/11/04/Android-DataBinding,-ViewBinding%EC%9D%B4-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95.html" rel="alternate" type="text/html" title="Android DataBinding, ViewBinding이 파일을 생성하는 방법" /><published>2023-11-04T00:00:00+09:00</published><updated>2023-11-04T00:00:00+09:00</updated><id>https://pknujsp.github.io//jekyll-theme-yat/android/2023/11/04/Android%20DataBinding,%20ViewBinding%EC%9D%B4%20%ED%8C%8C%EC%9D%BC%EC%9D%84%20%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94%20%EB%B0%A9%EB%B2%95</id><content type="html" xml:base="https://pknujsp.github.io//jekyll-theme-yat/android/2023/11/04/Android-DataBinding,-ViewBinding%EC%9D%B4-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95.html"><![CDATA[<p><a href="https://developer.android.com/topic/libraries/data-binding">Android DataBinding</a>에 대한 이해가 있다는 전제하에 작성하였습니다.</p>

<h2 id="주요-클래스">주요 클래스</h2>

<table>
  <thead>
    <tr>
      <th>클래스명</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>AndroidDataBinding</td>
      <td>데이터바인딩의 핵심 클래스, 데이터 바인딩 작업을 총괄한다</td>
    </tr>
    <tr>
      <td>LayoutFileParser</td>
      <td>XML을 파싱하여 ResourceBundle 목록을 만든다</td>
    </tr>
    <tr>
      <td>LayoutXmlProcessor</td>
      <td>레이아웃 XML파일을 읽고 처리한다. 내부적으로 사용할 XML파일도 만든다</td>
    </tr>
    <tr>
      <td>BaseDataBinder</td>
      <td>바인딩 클래스 파일을 생성/삭제한다</td>
    </tr>
    <tr>
      <td>ResourceBundle</td>
      <td>레이아웃 파일 구문 분석 결과를 보관한다. 레이아웃 XML파일 내의 코드를 분석한다</td>
    </tr>
    <tr>
      <td>DataBindingGenBaseClassesTask</td>
      <td>데이터바인딩 클래스 생성을 위한 작업을 처리한다.(데이터바인딩 라이브러리가 아닌 Android Gradle Plugin에 포함되어있다)</td>
    </tr>
    <tr>
      <td>LayoutInfoInput</td>
      <td>XML 파일에 대한 바인딩 정보를 담고 있다</td>
    </tr>
    <tr>
      <td>LayoutFileBundle</td>
      <td>XML 파일에서 데이터 바인딩 관련 정보를 파싱한 결과를 가진다</td>
    </tr>
  </tbody>
</table>

<h2 id="databinding-파일의-생성-과정">DataBinding 파일의 생성 과정</h2>

<h3 id="1-프로젝트-빌드-시-바인딩-처리할-파일-등에-대한-정보를-androiddatabinding에-전달한다">1. 프로젝트 빌드 시, 바인딩 처리할 파일 등에 대한 정보를 AndroidDataBinding에 전달한다.</h3>

<ul>
  <li>전달 인자
    <ul>
      <li>appId : 애플리케이션 패키지 명</li>
      <li>resInput : 리소스(layout, drawable 등)를 담고 있는 폴더</li>
      <li>resOutput : 처리한 리소스를 담을 폴더</li>
      <li>layoutInfoOutput : 레이아웃 파일에 대한 데이터 바인딩 정보를 가지고 있는 XML파일을 저장할 폴더</li>
    </ul>
  </li>
</ul>

<h3 id="2-androiddatabinding의-processresources-호출">2. AndroidDataBinding의 <code class="language-plaintext highlighter-rouge">processResources()</code> 호출</h3>

<p>LayoutXmlProcessor를 초기화한다.</p>

<h3 id="3-layoutxmlprocessor의-processresources-호출">3. LayoutXmlProcessor의 <code class="language-plaintext highlighter-rouge">processResources()</code> 호출</h3>

<h3 id="4-layoutxmlprocessor의-processallinputfiles-호출">4. LayoutXmlProcessor의 <code class="language-plaintext highlighter-rouge">processAllInputFiles()</code> 호출</h3>

<ul>
  <li>입력으로 받은 폴더의 모든 파일을 하나씩 확인한다.</li>
  <li>layout 폴더 내에 있는 파일에 대해서 <code class="language-plaintext highlighter-rouge">processLayoutFile()</code>을 호출한다.</li>
  <li><code class="language-plaintext highlighter-rouge">processLayoutFile()</code>에서는 <code class="language-plaintext highlighter-rouge">processSingleFile()</code>을 호출한다.</li>
</ul>

<h3 id="5-processsinglefile">5. processSingleFile()</h3>

<p>LayoutFileParser의 <code class="language-plaintext highlighter-rouge">parseXml()</code>을 호출하여 XML을 파싱한다.</p>

<p><code class="language-plaintext highlighter-rouge">parseOriginalXml()</code>를 호출하여 실제로 파싱을 한다.</p>

<ul>
  <li>RootView 분석</li>
  <li>data태그 내의 import, variable, class 정보를 분석하고, LayoutFileBundle에 저장한다.</li>
  <li>배치된 View에 대한 정보(id, tag, class)와 바인딩 정보(@{}과 같은 표현식)를 분석하여 LayoutFileBundle에 저장한다.</li>
</ul>

<p>분석한 데이터 바인딩 정보는 추가적으로 XML파일을 만들어 저장해둔다.</p>

<p>원본 파일이 <code class="language-plaintext highlighter-rouge">activity_main.xml</code> 이라면 <code class="language-plaintext highlighter-rouge">activity_main-layout.xml</code>이름으로 생성한다.</p>

<h4 id="원본-레이아웃-파일">원본 레이아웃 파일</h4>

<p><a href="https://viblo.asia/p/understanding-data-bindings-generated-code-and-how-does-android-data-binding-compiler-work-Ljy5Vd1yZra">코드 출처 : https://viblo.asia/p/understanding-data-bindings-generated-code-and-how-does-android-data-binding-compiler-work-Ljy5Vd1yZra</a></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>R.layout.activity_main

<span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;layout</span> <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">xmlns:app=</span><span class="s">"http://schemas.android.com/apk/res-auto"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;data&gt;</span>

        <span class="nt">&lt;variable</span>
            <span class="na">name=</span><span class="s">"viewModel"</span>
            <span class="na">type=</span><span class="s">"com.example.main.MainViewModel"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;/data&gt;</span>

    <span class="nt">&lt;TextView</span> <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
        <span class="na">android:text=</span><span class="s">"@{viewModel.text}"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;/layout&gt;</span>

</code></pre></div></div>

<h4 id="바인딩-정보만을-담고있는-추가로-생성된-파일">바인딩 정보만을 담고있는 추가로 생성된 파일</h4>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>activity_main-layout.xml

<span class="cp">&lt;?xml version="1.0" encoding="utf-8" standalone="yes"?&gt;</span>
<span class="nt">&lt;Layout</span> <span class="na">layout=</span><span class="s">"activity_main"</span> <span class="na">absoluteFilePath=</span><span class="s">"/home/framgia/Projects/harpa-crista/harpacrista/android/app/src/main/res/layout/activity_main.xml"</span>
    <span class="na">directory=</span><span class="s">"layout"</span>
    <span class="na">isMerge=</span><span class="s">"false"</span> <span class="na">modulePackage=</span><span class="s">"com.harpacrista"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Variables</span> <span class="na">declared=</span><span class="s">"true"</span> <span class="na">name=</span><span class="s">"viewModel"</span> <span class="na">type=</span><span class="s">"com.example.main.MainViewModel"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;location</span> <span class="na">endLine=</span><span class="s">"8"</span> <span class="na">endOffset=</span><span class="s">"51"</span> <span class="na">startLine=</span><span class="s">"6"</span> <span class="na">startOffset=</span><span class="s">"8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/Variables&gt;</span>
    <span class="nt">&lt;Imports</span> <span class="na">name=</span><span class="s">"View"</span> <span class="na">type=</span><span class="s">"android.view.View"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;location</span> <span class="na">endLine=</span><span class="s">"10"</span> <span class="na">endOffset=</span><span class="s">"42"</span> <span class="na">startLine=</span><span class="s">"10"</span> <span class="na">startOffset=</span><span class="s">"8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/Imports&gt;</span>
    <span class="nt">&lt;Targets&gt;</span>
        <span class="nt">&lt;Target</span> <span class="na">tag=</span><span class="s">"layout/activity_main_0"</span> <span class="na">view=</span><span class="s">"TextView"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Expressions&gt;</span>
                <span class="nt">&lt;Expression</span> <span class="na">attribute=</span><span class="s">"android:text"</span> <span class="na">text=</span><span class="s">" viewModel.text "</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;Location</span> <span class="na">endLine=</span><span class="s">"16"</span> <span class="na">endOffset=</span><span class="s">"41"</span> <span class="na">startLine=</span><span class="s">"16"</span> <span class="na">startOffset=</span><span class="s">"8"</span> <span class="nt">/&gt;</span>
                    <span class="nt">&lt;TwoWay&gt;</span>false<span class="nt">&lt;/TwoWay&gt;</span>
                    <span class="nt">&lt;ValueLocation</span> <span class="na">endLine=</span><span class="s">"16"</span> <span class="na">endOffset=</span><span class="s">"39"</span> <span class="na">startLine=</span><span class="s">"16"</span> <span class="na">startOffset=</span><span class="s">"24"</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;/Expression&gt;</span>
            <span class="nt">&lt;/Expressions&gt;</span>
            <span class="nt">&lt;location</span> <span class="na">endLine=</span><span class="s">"16"</span> <span class="na">endOffset=</span><span class="s">"44"</span> <span class="na">startLine=</span><span class="s">"14"</span> <span class="na">startOffset=</span><span class="s">"4"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/Target&gt;</span>
    <span class="nt">&lt;/Targets&gt;</span>
<span class="nt">&lt;/Layout&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">android:text="@{ viewModel.text }"</code>은 아래와 같이 변환된다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Expression</span> <span class="na">attribute=</span><span class="s">"android:text"</span> <span class="na">text=</span><span class="s">" viewModel.text "</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Location</span> <span class="na">endLine=</span><span class="s">"23"</span> <span class="na">endOffset=</span><span class="s">"45"</span> <span class="na">startLine=</span><span class="s">"23"</span> <span class="na">startOffset=</span><span class="s">"12"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;TwoWay&gt;</span>false<span class="nt">&lt;/TwoWay&gt;</span>
    <span class="nt">&lt;ValueLocation</span> <span class="na">endLine=</span><span class="s">"23"</span> <span class="na">endOffset=</span><span class="s">"43"</span> <span class="na">startLine=</span><span class="s">"23"</span> <span class="na">startOffset=</span><span class="s">"28"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/Expression&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;Expression attribute="android:text" text="viewModel.text"&gt;</code> : <code class="language-plaintext highlighter-rouge">android:text="@{ viewModel.text }"</code></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;location endLine="16" endOffset="44" startLine="14" startOffset="4" /&gt;</code> : <code class="language-plaintext highlighter-rouge">android:text="@{viewModel.text}"</code>가 위치한 라인과 오프셋</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;TwoWay&gt;false&lt;/TwoWay&gt;</code> : 양방향 바인딩의 여부</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;ValueLocation endLine="16" endOffset="39" startLine="16" startOffset="24" /&gt;</code> : <code class="language-plaintext highlighter-rouge">viewModel.text</code>가 위치한 라인과 오프셋</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;TextView</span> <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span> <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
    <span class="na">android:tag=</span><span class="s">"layout/activity_main_0"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<h3 id="6-writelayoutinfofiles">6. writeLayoutInfoFiles()</h3>

<p><code class="language-plaintext highlighter-rouge">writeXmlFile()</code>을 호출하여 바인딩 정보를 담은 XML파일을 생성</p>

<p>이때 불필요한 파일(제거된 레이아웃에 대한 바인딩 파일)이 있다면 제거한다.</p>

<h3 id="7-java-kotlin-파일-생성">7. java, kotlin 파일 생성</h3>

<p>BaseDataBinder <code class="language-plaintext highlighter-rouge">generateAll()</code>을 호출하여 생성</p>

<p><code class="language-plaintext highlighter-rouge">ActivityMainBinding.java</code>파일을 생성한다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;LinearLayout</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
    <span class="na">android:orientation=</span><span class="s">"vertical"</span>
    <span class="nt">&gt;</span>

    <span class="nt">&lt;TextView</span>
        <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
        <span class="na">android:text=</span><span class="s">"@{viewModel.text}"</span>
        <span class="nt">/&gt;</span>

    <span class="nt">&lt;Button</span>
        <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:visibility=</span><span class="s">"@{viewModel.isVisible ? View.VISIBLE : View.INVISIBLE}"</span>
        <span class="nt">/&gt;</span>
<span class="nt">&lt;/LinearLayout&gt;</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ActivityMainBinding</span> <span class="kd">extends</span> <span class="n">android</span><span class="o">.</span><span class="na">databinding</span><span class="o">.</span><span class="na">ViewDataBinding</span>  <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">android</span><span class="o">.</span><span class="na">databinding</span><span class="o">.</span><span class="na">ViewDataBinding</span><span class="o">.</span><span class="na">IncludedLayouts</span> <span class="n">sIncludes</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">android</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">SparseIntArray</span> <span class="n">sViewsWithIds</span><span class="o">;</span>

    <span class="kd">static</span> <span class="o">{</span>
        <span class="n">sIncludes</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">sViewsWithIds</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">android</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">LinearLayout</span> <span class="n">mboundView0</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">android</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">TextView</span> <span class="n">mboundView1</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">android</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">Button</span> <span class="n">mboundView2</span><span class="o">;</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>View 변수명은 XML에 id가 지정되어있으면 <code class="language-plaintext highlighter-rouge">id</code>를 사용하고, 지정되어있지 않다면 <code class="language-plaintext highlighter-rouge">mBoundView + index</code>로 만들어진다.</p>

<h2 id="view의-binding-클래스-파일이-자동으로-생성되는-과정">View의 Binding 클래스 파일이 자동으로 생성되는 과정</h2>

<ol>
  <li>Gradle Sync</li>
  <li>buildFeatures의 viewBinding, dataBinding 둘 중 최소 하나가 활성화되어있는지 확인</li>
  <li>활성화되어 있다면 아래의 메서드를 호출하고, Gradle Task에 DataBindingGenBaseClassesTask를 추가한다.</li>
  <li>XML파일이 추가/수정/삭제 될때마다 DataBindingGenBaseClassesTask가 동작한다.</li>
  <li>BaseDataBinder를 사용하여 바인딩 파일을 처리한다.</li>
</ol>

<ul>
  <li>TaskManager : Android Gradle Plugin의 클래스, Gradle 작업을 관리한다.</li>
  <li>DataBindingGenBaseClassesTask : 데이터바인딩 처리를 위한 작업</li>
</ul>

<p>두 클래스는 Jetpack DataBinding 라이브러리에 종속되어있지 않다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>in TaskManager.kt

protected fun createDataBindingTasksIfNecessary(creationConfig: ComponentCreationConfig) {
        val dataBindingEnabled = creationConfig.buildFeatures.dataBinding
        val viewBindingEnabled = creationConfig.buildFeatures.viewBinding
        if (!dataBindingEnabled &amp;&amp; !viewBindingEnabled) {
            return
        }
        taskFactory.register(
                DataBindingMergeDependencyArtifactsTask.CreationAction(creationConfig))
        DataBindingBuilder.setDebugLogEnabled(logger.isDebugEnabled)
        taskFactory.register(DataBindingGenBaseClassesTask.CreationAction(creationConfig))
        ...

in DataBindingGenBaseClassesTask.kt

@TaskAction
    fun writeBaseClasses(inputChanges: InputChanges) {
        // TODO extend NewIncrementalTask when moved to new API so that we can remove the manual call to recordTaskAction

        recordTaskAction(analyticsService.get()) {
            // TODO figure out why worker execution makes the task flake.
            // Some files cannot be accessed even though they show up when directory listing is
            // invoked.
            // b/69652332
            val args = buildInputArgs(inputChanges)
            CodeGenerator(
                args,
                sourceOutFolder.get().asFile,
                Logger.getLogger(DataBindingGenBaseClassesTask::class.java),
                encodeErrors,
                getRPackageProvider()).run()
        }
    }
}
</code></pre></div></div>]]></content><author><name>Junsung Park</name></author><category term="Android" /><category term="Android" /><summary type="html"><![CDATA[Android DataBinding에 대한 이해가 있다는 전제하에 작성하였습니다.]]></summary></entry><entry><title type="html">Android Dalvik과 ART에 대해서</title><link href="https://pknujsp.github.io//jekyll-theme-yat/dalvik/art/android/2023/10/15/Android-Dalvik%EA%B3%BC-Art%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C.html" rel="alternate" type="text/html" title="Android Dalvik과 ART에 대해서" /><published>2023-10-15T00:00:00+09:00</published><updated>2023-10-15T00:00:00+09:00</updated><id>https://pknujsp.github.io//jekyll-theme-yat/dalvik/art/android/2023/10/15/Android%20Dalvik%EA%B3%BC%20Art%EC%97%90%20%EB%8C%80%ED%95%B4%EC%84%9C</id><content type="html" xml:base="https://pknujsp.github.io//jekyll-theme-yat/dalvik/art/android/2023/10/15/Android-Dalvik%EA%B3%BC-Art%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C.html"><![CDATA[<h2 id="dalvik-이란">Dalvik 이란?</h2>

<blockquote>
  <p>Android에서 Java 애플리케이션을 구동하는 가상머신(Virtual Machine)이다.</p>
</blockquote>

<p><strong>Java</strong>의 라이센스 문제(오라클, 이 문제로 10년간 소송)와 최적화 등의 이유로 인해, 구글은 <strong>JVM</strong>을 사용하지 않고, 자체적으로 <strong>DVM(Dalvik Virtual Machine)</strong>을 개발하였다.</p>

<h3 id="특징">특징</h3>

<ul>
  <li>JIT(Just-In-Time)
    <ul>
      <li><strong>Android 2.2(2011)</strong>이전에는 <strong>JIT</strong> 컴파일이 없어, 앱이 실행 될 때마다 컴파일을 하여 메모리 효율이 나빴고 앱 구동 성능이 좋지 않았다.</li>
      <li><strong>Android 2.2(2011)</strong>부터 <strong>JIT</strong> 컴파일이 도입되었다.</li>
      <li>자주 사용되는 코드는 캐싱하여 재 사용하기 때문에 전반적으로 성능이 향상되었다.</li>
    </ul>
  </li>
  <li>.dex(Dalvik Executable, Dalvik Bytecode)
    <ul>
      <li>앱 빌드 시 <strong>.class</strong> 파일을 <strong>.dex</strong> 파일로 변환한다.</li>
      <li><code class="language-plaintext highlighter-rouge">.dex</code> 파일을 <strong>Dalvik</strong>에서 실행한다.</li>
    </ul>
  </li>
  <li>CMS(Concurrent Mark Sweep) Garbage Collector 사용
    <ul>
      <li><a href="https://d2.naver.com/helloworld/1329">Java Garbage Collection</a></li>
      <li>GC동작 시 스레드가 멈추는 시간이 다른 알고리즘들 보다 짧다.</li>
    </ul>
  </li>
  <li>메모리 효율 향상
    <ul>
      <li><strong>레지스터 기반</strong>으로 <strong>스택 기반</strong>인 <strong>JVM</strong>보다 메모리를 적게 사용한다.</li>
      <li><strong>JVM</strong>은 연산 수행 시 피연산자를 스택을 사용하여 처리한다.</li>
      <li>반면 <strong>DVM</strong>은 레지스터를 사용하여 처리한다.</li>
      <li><strong>레지스터 머신</strong>의 속도가 <strong>스택 머신</strong>보다 <strong>32%</strong> 더 빠르다는 연구 결과도 있다. <a href="https://www.usenix.org/legacy/events/vee05/full_papers/p153-yunhe.pdf">Virtual Machine Showdown: Stack Versus Registers</a></li>
    </ul>
  </li>
</ul>

<p>Android 기기의 보급이 늘어나기 시작했던 2010년 즈음에는 메모리의 용량이 요즘 나오는 고성능 기기의 1/10 수준(512MB 이하)으로 매우 작았다.</p>

<p>이러한 상황에서 메모리 사용을 최적화하고자, <strong>Dalvik</strong>은 <strong>JIT(Just-In-Time)</strong> 컴파일 형식을 사용하여 앱이 실행되고 있을 때 필요한 부분만 컴파일한다.</p>

<p>필요한 것만 처리하기 때문에 메모리 절약이 가능한 것이다.</p>

<p>그러나, 실행 중에 컴파일을 하기 때문에 앱의 성능에 영향을 미칠 수 밖에 없는 단점이 있었다.</p>

<p>시간이 흐르면서 <strong>애플리케이션의 규모가 커져감</strong>과 동시에 <strong>하드웨어의 성능이 향상</strong>되어갔고 <strong>Dalvik</strong>을 대체할 <strong>ART</strong>가 도입되었다.</p>

<h2 id="artandroid-runtime의-도입">ART(Android Runtime)의 도입</h2>

<blockquote>
  <p>Android 4.4에서 처음 도입된 Runtime</p>
</blockquote>

<p><strong>Dalvik</strong>과 달리 <strong>AOT</strong> 방식을 사용한다.</p>

<p>앱을 설치할 때 바이트 코드인 <strong>.dex</strong>파일들을 기계어로 컴파일하여 <strong>.oat</strong>파일들로 저장한 후 앱 실행 시 <strong>.oat</strong>파일을 불러와서 실행한다.</p>

<h3 id="특징-1">특징</h3>

<ul>
  <li>AOT(Ahead-Of-Time)</li>
  <li>.oat(Optimized Ahead-of-Time)
    <ul>
      <li><strong>ART</strong>에서 사용하는 파일</li>
      <li>dex2oat도구를 통해 <strong>.dex</strong>를 <strong>.odex</strong>로 변환한 후 다시 <strong>.oat</strong>로 변환한다.</li>
    </ul>
  </li>
  <li>.odex(Optimized Dalvik Executable)
    <ul>
      <li><strong>Dalvik</strong>에서 사용하는 파일</li>
      <li>dexopt도구를 통해 <strong>.dex</strong> 파일을 <strong>.odex</strong> 파일로 변환한다.</li>
      <li>앱 실행 시 이 파일을 기계어로 변환한다.</li>
    </ul>
  </li>
  <li>Garbage Collector에서 상당한 개선
    <ul>
      <li><strong>Dalvik</strong>보다 처리가 2배 빠르다.</li>
    </ul>
  </li>
</ul>

<h3 id="dalvik과-art의-비교">Dalvik과 ART의 비교</h3>

<p>간단히 각각의 장단점을 정리하면 다음과 같다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">Dalvik</th>
      <th style="text-align: center">ART</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">앱 설치 속도</td>
      <td style="text-align: center">빠름</td>
      <td style="text-align: center">느림</td>
    </tr>
    <tr>
      <td style="text-align: center">앱 실행 속도</td>
      <td style="text-align: center">느림</td>
      <td style="text-align: center">빠름</td>
    </tr>
    <tr>
      <td style="text-align: center">앱 설치 용량</td>
      <td style="text-align: center">적음</td>
      <td style="text-align: center">많음</td>
    </tr>
  </tbody>
</table>

<p>서로 장단점이 반대이다.</p>

<p>그래서 시간이 지나면서 런타임에 여러 번 변경이 있었다.</p>

<h3 id="android에서-art의-적용-역사">Android에서 ART의 적용 역사</h3>

<ol>
  <li><strong>Android 4.4(2013)</strong>에서 처음 도입(기본 설정은 <strong>Dalvik</strong>), 호환성 문제</li>
  <li><strong>Android 5.0(2014)</strong>에서 기본 Runtime으로 적용</li>
  <li><strong>Android 7.0(2016)</strong>부터 <strong>JIT</strong>와 <strong>AOT</strong>를 혼합하여 사용한다</li>
</ol>

<p><strong>Android 7.0(2016)</strong>에서 다시 <strong>JIT</strong>를 사용하는 <code class="language-plaintext highlighter-rouge">Profile Guided Compilation</code> 방식이 도입되었다.</p>

<h4 id="profile-guided-compilation">Profile Guided Compilation</h4>

<blockquote>
  <p><strong>JIT</strong>와 <strong>AOT</strong>를 혼합하여 컴파일을 수행</p>
</blockquote>

<ul>
  <li>앱 설치 시 <strong>AOT</strong>컴파일 없이 수행되도록 바뀌었고 이로인해 설치 속도가 빨라졌다.</li>
  <li>앱이 실행되면 <strong>JIT</strong> 컴파일을 수행하여 자주 사용되는 코드는 캐싱된다.</li>
  <li>기기가 유휴 상태 또는 충전 중일 때 자주 사용되는 코드룰 <strong>AOT</strong>컴파일 한다.</li>
  <li>이후 앱이 실행될 때 <strong>AOT</strong>컴파일된 코드를 사용한다.</li>
</ul>]]></content><author><name>Junsung Park</name></author><category term="Dalvik" /><category term="ART" /><category term="Android" /><category term="Dalvik" /><category term="ART" /><category term="Android" /><summary type="html"><![CDATA[Dalvik 이란?]]></summary></entry></feed>